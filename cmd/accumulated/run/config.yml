Config:
  non-binary: true
  fields:
    - name: file
      type: string
      marshal-as: none
    - name: Logging
      type: Logging
      marshal-as: reference
      pointer: true
    - name: P2P
      type: P2P
      marshal-as: reference
      pointer: true
    - name: Apps
      type: Service
      marshal-as: union
      repeatable: true
    - name: Services
      type: Service
      marshal-as: union
      repeatable: true

Logging:
  non-binary: true
  fields:
    - name: Format
      type: string
    - name: Rules
      type: LoggingRule
      marshal-as: reference
      pointer: true
      repeatable: true

LoggingRule:
  non-binary: true
  fields:
    - name: Level
      type: slog.Level
      marshal-as: value
      zero-value: '0'
      keep-empty: true
    - name: Module
      type: string

P2P:
  non-binary: true
  fields:
    - name: Network
      type: string
    - name: Listen
      type: p2p.Multiaddr
      toml: listen
      marshal-as: union
      repeatable: true
    - name: BootstrapPeers
      type: p2p.Multiaddr
      toml: bootstrap-peers
      marshal-as: union
      repeatable: true
    - name: Key
      type: PrivateKey
      marshal-as: union
    - name: PeerDB
      type: string
    - name: EnablePeerTracking
      type: bool

ConsensusService:
  union: { type: service }
  non-binary: true
  fields:
    - name: NodeDir
      type: string
    - name: App
      type: ConsensusApp
      marshal-as: union

CoreConsensusApp:
  union: { type: consensusApp }
  non-binary: true
  fields:
    - name: Partition
      type: protocol.PartitionInfo
      marshal-as: reference
      pointer: true
    - name: EnableHealing
      type: bool
      optional: true

HttpService:
  union: { type: service }
  non-binary: true
  fields:
    - name: Listen
      description: are the addresses and schemes to listen on
      type: p2p.Multiaddr
      marshal-as: union
      repeatable: true
    - name: TlsCertPath
      description: is the path of the TLS certificate
      type: string
      optional: true
    - name: TlsKeyPath
      description: is the path of the TLS key
      type: string
      optional: true
    - name: CorsOrigins
      description: is a list of allowed CORS origins
      type: string
      repeatable: true
      optional: true
    - name: LetsEncrypt
      description: automatically retrieves a certificate from Let's Encrypt for the specified domains
      type: string
      repeatable: true
      optional: true
    - name: ConnectionLimit
      description: limits the number of concurrent connections
      type: int
      optional: true
      pointer: true
    - name: ReadHeaderTimeout
      description: protects against slow-loris attacks
      type: duration
      optional: true
      pointer: true
    - name: DebugJsonRpc
      type: bool
      optional: true
      pointer: true
    - name: Router
      type: { name: ServiceOrRef, parameters: [{ type: RouterService, pointer: true }] }
      marshal-as: reference
      pointer: true

RouterService:
  union: { type: service }
  fields:
    - name: Name
      type: string
      optional: true
    - name: Events
      description: may specify an event bus to use for routing table updates
      type: string
      optional: true

StorageService:
  union: { type: service }
  non-binary: true
  fields:
    - name: Name
      type: string
      optional: true
    - name: Storage
      type: Storage
      marshal-as: union

Querier:
  union: { type: service }
  non-binary: true
  fields:
    - name: Partition
      type: string
    - name: Storage
      type: StorageOrRef
      marshal-as: reference
      pointer: true
      optional: true

NetworkService:
  union: { type: service }
  non-binary: true
  fields:
    - name: Partition
      type: string

MetricsService:
  union: { type: service }
  non-binary: true
  fields:
    - name: Partition
      type: string

EventsService:
  union: { type: service }
  non-binary: true
  fields:
    - name: Partition
      type: string

MemoryStorage:
  union: { type: storage }
  non-binary: true
  fields: ~

BadgerStorage:
  union: { type: storage }
  non-binary: true
  fields:
    - name: Path
      type: string

TransientPrivateKey:
  union: { type: privateKey }
  non-binary: true
  fields:
    - name: key
      type: address.Address
      marshal-as: none

PrivateKeySeed:
  union: { type: privateKey, value: seed }
  non-binary: true
  fields:
    - name: key
      type: address.Address
      marshal-as: none
    - name: Seed
      type: record.Key
      marshal-as: reference
      pointer: true

CometPrivValFile:
  union: { type: privateKey }
  non-binary: true
  fields:
    - name: key
      type: address.Address
      marshal-as: none
    - name: Path
      type: string

CometNodeKeyFile:
  union: { type: privateKey }
  non-binary: true
  fields:
    - name: key
      type: address.Address
      marshal-as: none
    - name: Path
      type: string
