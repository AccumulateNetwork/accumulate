// Code generated by gitlab.com/accumulatenetwork/core/schema. DO NOT EDIT.

package run

import (
	"io/fs"
	"log/slog"

	peer "github.com/libp2p/go-libp2p/core/peer"
	multiaddr "github.com/multiformats/go-multiaddr"
	"gitlab.com/accumulatenetwork/accumulate/pkg/types/address"
	encoding "gitlab.com/accumulatenetwork/accumulate/pkg/types/encoding"
	"gitlab.com/accumulatenetwork/accumulate/pkg/types/network"
	record "gitlab.com/accumulatenetwork/accumulate/pkg/types/record"
	url "gitlab.com/accumulatenetwork/accumulate/pkg/url"
	"gitlab.com/accumulatenetwork/accumulate/protocol"
)

type BadgerStorage struct {
	Path    string
	Version int64
}

func (BadgerStorage) Type() StorageType { return StorageTypeBadger }

// Copy returns a copy of the BadgerStorage.
func (v *BadgerStorage) Copy() *BadgerStorage {
	return sBadgerStorage.Copy(v)
}

// EqualBadgerStorage returns true if V is equal to U.
func (v *BadgerStorage) Equal(u *BadgerStorage) bool {
	return sBadgerStorage.Equal(v, u)
}

// MarshalBinary marshals the BadgerStorage to JSON.
func (v *BadgerStorage) MarshalJSON() ([]byte, error) {
	return sBadgerStorage.MarshalJSON(v)
}

// UnmarshalJSON unmarshals the BadgerStorage from JSON.
func (v *BadgerStorage) UnmarshalJSON(b []byte) error {
	return sBadgerStorage.UnmarshalJSON(b, v)
}

type BoltStorage struct {
	Path string
}

func (BoltStorage) Type() StorageType { return StorageTypeBolt }

// Copy returns a copy of the BoltStorage.
func (v *BoltStorage) Copy() *BoltStorage {
	return sBoltStorage.Copy(v)
}

// EqualBoltStorage returns true if V is equal to U.
func (v *BoltStorage) Equal(u *BoltStorage) bool {
	return sBoltStorage.Equal(v, u)
}

// MarshalBinary marshals the BoltStorage to JSON.
func (v *BoltStorage) MarshalJSON() ([]byte, error) {
	return sBoltStorage.MarshalJSON(v)
}

// UnmarshalJSON unmarshals the BoltStorage from JSON.
func (v *BoltStorage) UnmarshalJSON(b []byte) error {
	return sBoltStorage.UnmarshalJSON(b, v)
}

type CometNodeKeyFile struct {
	Path string
	key  address.Address
}

func (CometNodeKeyFile) Type() PrivateKeyType { return PrivateKeyTypeCometNodeKeyFile }

// Copy returns a copy of the CometNodeKeyFile.
func (v *CometNodeKeyFile) Copy() *CometNodeKeyFile {
	return sCometNodeKeyFile.Copy(v)
}

// EqualCometNodeKeyFile returns true if V is equal to U.
func (v *CometNodeKeyFile) Equal(u *CometNodeKeyFile) bool {
	return sCometNodeKeyFile.Equal(v, u)
}

// MarshalBinary marshals the CometNodeKeyFile to JSON.
func (v *CometNodeKeyFile) MarshalJSON() ([]byte, error) {
	return sCometNodeKeyFile.MarshalJSON(v)
}

// UnmarshalJSON unmarshals the CometNodeKeyFile from JSON.
func (v *CometNodeKeyFile) UnmarshalJSON(b []byte) error {
	return sCometNodeKeyFile.UnmarshalJSON(b, v)
}

type CometPrivValFile struct {
	Path string
	key  address.Address
}

func (CometPrivValFile) Type() PrivateKeyType { return PrivateKeyTypeCometPrivValFile }

// Copy returns a copy of the CometPrivValFile.
func (v *CometPrivValFile) Copy() *CometPrivValFile {
	return sCometPrivValFile.Copy(v)
}

// EqualCometPrivValFile returns true if V is equal to U.
func (v *CometPrivValFile) Equal(u *CometPrivValFile) bool {
	return sCometPrivValFile.Equal(v, u)
}

// MarshalBinary marshals the CometPrivValFile to JSON.
func (v *CometPrivValFile) MarshalJSON() ([]byte, error) {
	return sCometPrivValFile.MarshalJSON(v)
}

// UnmarshalJSON unmarshals the CometPrivValFile from JSON.
func (v *CometPrivValFile) UnmarshalJSON(b []byte) error {
	return sCometPrivValFile.UnmarshalJSON(b, v)
}

type Config struct {
	DotEnv          *bool
	Network         string
	Configurations  []Configuration
	Services        []Service
	P2P             *P2P
	Logging         *Logging
	Instrumentation *Instrumentation
	Telemetry       *Telemetry
	file            string
	fs              fs.FS
}

// Copy returns a copy of the Config.
func (v *Config) Copy() *Config {
	return sConfig.Copy(v)
}

// EqualConfig returns true if V is equal to U.
func (v *Config) Equal(u *Config) bool {
	return sConfig.Equal(v, u)
}

// MarshalBinary marshals the Config to JSON.
func (v *Config) MarshalJSON() ([]byte, error) {
	return sConfig.MarshalJSON(v)
}

// UnmarshalJSON unmarshals the Config from JSON.
func (v *Config) UnmarshalJSON(b []byte) error {
	return sConfig.UnmarshalJSON(b, v)
}

// TODO type Configuration interface {}

// CopyConfiguration returns a copy of the Configuration.
func CopyConfiguration(v Configuration) Configuration {
	return sConfiguration.Copy(v)
}

// EqualConfiguration returns true if A and B are equal.
func EqualConfiguration(a, b Configuration) bool {
	return sConfiguration.Equal(a, b)
}

// UnmarshalConfigurationJSON unmarshals a Configuration from JSON.
func UnmarshalConfigurationJSON(b []byte) (Configuration, error) {
	var v Configuration
	err := sConfiguration.UnmarshalJSON(b, &v)
	return v, err
}

type ConfigurationType int64

const (
	ConfigurationTypeCoreValidator ConfigurationType = 1
	ConfigurationTypeDevnet        ConfigurationType = 3
	ConfigurationTypeGateway       ConfigurationType = 2
)

// SetByName looks up a ConfigurationType by name.
func (v *ConfigurationType) SetByName(s string) (ok bool) {
	*v, ok = sConfigurationType.ByName(s)
	return
}

// SetByValue looks up a ConfigurationType by value.
func (v *ConfigurationType) SetByValue(i int64) (ok bool) {
	*v, ok = sConfigurationType.ByValue(i)
	return
}

// String returns the label or name of the ConfigurationType.
func (v ConfigurationType) String() string {
	return sConfigurationType.String(v)
}

// MarshalBinary marshals the ConfigurationType to JSON.
func (v ConfigurationType) MarshalJSON() ([]byte, error) {
	return sConfigurationType.MarshalJSON(v)
}

// UnmarshalJSON unmarshals the ConfigurationType from JSON.
func (v *ConfigurationType) UnmarshalJSON(b []byte) error {
	return sConfigurationType.UnmarshalJSON(b, v)
}

// TODO type ConsensusApp interface {}

// CopyConsensusApp returns a copy of the ConsensusApp.
func CopyConsensusApp(v ConsensusApp) ConsensusApp {
	return sConsensusApp.Copy(v)
}

// EqualConsensusApp returns true if A and B are equal.
func EqualConsensusApp(a, b ConsensusApp) bool {
	return sConsensusApp.Equal(a, b)
}

// UnmarshalConsensusAppJSON unmarshals a ConsensusApp from JSON.
func UnmarshalConsensusAppJSON(b []byte) (ConsensusApp, error) {
	var v ConsensusApp
	err := sConsensusApp.UnmarshalJSON(b, &v)
	return v, err
}

type ConsensusAppType int64

const (
	ConsensusAppTypeCore ConsensusAppType = 1
)

// SetByName looks up a ConsensusAppType by name.
func (v *ConsensusAppType) SetByName(s string) (ok bool) {
	*v, ok = sConsensusAppType.ByName(s)
	return
}

// SetByValue looks up a ConsensusAppType by value.
func (v *ConsensusAppType) SetByValue(i int64) (ok bool) {
	*v, ok = sConsensusAppType.ByValue(i)
	return
}

// String returns the label or name of the ConsensusAppType.
func (v ConsensusAppType) String() string {
	return sConsensusAppType.String(v)
}

// MarshalBinary marshals the ConsensusAppType to JSON.
func (v ConsensusAppType) MarshalJSON() ([]byte, error) {
	return sConsensusAppType.MarshalJSON(v)
}

// UnmarshalJSON unmarshals the ConsensusAppType from JSON.
func (v *ConsensusAppType) UnmarshalJSON(b []byte) error {
	return sConsensusAppType.UnmarshalJSON(b, v)
}

type ConsensusService struct {
	NodeDir          string
	ValidatorKey     PrivateKey
	Genesis          string
	Listen           Multiaddr
	BootstrapPeers   []Multiaddr
	MetricsNamespace string
	App              ConsensusApp
}

func (ConsensusService) Type() ServiceType { return ServiceTypeConsensus }

// Copy returns a copy of the ConsensusService.
func (v *ConsensusService) Copy() *ConsensusService {
	return sConsensusService.Copy(v)
}

// EqualConsensusService returns true if V is equal to U.
func (v *ConsensusService) Equal(u *ConsensusService) bool {
	return sConsensusService.Equal(v, u)
}

// MarshalBinary marshals the ConsensusService to JSON.
func (v *ConsensusService) MarshalJSON() ([]byte, error) {
	return sConsensusService.MarshalJSON(v)
}

// UnmarshalJSON unmarshals the ConsensusService from JSON.
func (v *ConsensusService) UnmarshalJSON(b []byte) error {
	return sConsensusService.UnmarshalJSON(b, v)
}

type CoreConsensusApp struct {
	Partition            *protocol.PartitionInfo
	EnableHealing        *bool
	EnableDirectDispatch *bool
	MaxEnvelopesPerBlock *uint64
}

func (CoreConsensusApp) Type() ConsensusAppType { return ConsensusAppTypeCore }

// Copy returns a copy of the CoreConsensusApp.
func (v *CoreConsensusApp) Copy() *CoreConsensusApp {
	return sCoreConsensusApp.Copy(v)
}

// EqualCoreConsensusApp returns true if V is equal to U.
func (v *CoreConsensusApp) Equal(u *CoreConsensusApp) bool {
	return sCoreConsensusApp.Equal(v, u)
}

// MarshalBinary marshals the CoreConsensusApp to JSON.
func (v *CoreConsensusApp) MarshalJSON() ([]byte, error) {
	return sCoreConsensusApp.MarshalJSON(v)
}

// UnmarshalJSON unmarshals the CoreConsensusApp from JSON.
func (v *CoreConsensusApp) UnmarshalJSON(b []byte) error {
	return sCoreConsensusApp.UnmarshalJSON(b, v)
}

type CoreValidatorConfiguration struct {
	Mode                 CoreValidatorMode
	Listen               Multiaddr
	BVN                  string
	ValidatorKey         PrivateKey
	DnGenesis            string
	BvnGenesis           string
	DnBootstrapPeers     []Multiaddr
	BvnBootstrapPeers    []Multiaddr
	EnableHealing        *bool
	EnableDirectDispatch *bool
	EnableSnapshots      *bool
	MaxEnvelopesPerBlock *uint64
	StorageType          *StorageType
}

func (CoreValidatorConfiguration) Type() ConfigurationType { return ConfigurationTypeCoreValidator }

// Copy returns a copy of the CoreValidatorConfiguration.
func (v *CoreValidatorConfiguration) Copy() *CoreValidatorConfiguration {
	return sCoreValidatorConfiguration.Copy(v)
}

// EqualCoreValidatorConfiguration returns true if V is equal to U.
func (v *CoreValidatorConfiguration) Equal(u *CoreValidatorConfiguration) bool {
	return sCoreValidatorConfiguration.Equal(v, u)
}

// MarshalBinary marshals the CoreValidatorConfiguration to JSON.
func (v *CoreValidatorConfiguration) MarshalJSON() ([]byte, error) {
	return sCoreValidatorConfiguration.MarshalJSON(v)
}

// UnmarshalJSON unmarshals the CoreValidatorConfiguration from JSON.
func (v *CoreValidatorConfiguration) UnmarshalJSON(b []byte) error {
	return sCoreValidatorConfiguration.UnmarshalJSON(b, v)
}

type CoreValidatorMode int64

const (
	CoreValidatorModeBVN  CoreValidatorMode = 2
	CoreValidatorModeDN   CoreValidatorMode = 1
	CoreValidatorModeDual CoreValidatorMode = 0
)

// SetByName looks up a CoreValidatorMode by name.
func (v *CoreValidatorMode) SetByName(s string) (ok bool) {
	*v, ok = sCoreValidatorMode.ByName(s)
	return
}

// SetByValue looks up a CoreValidatorMode by value.
func (v *CoreValidatorMode) SetByValue(i int64) (ok bool) {
	*v, ok = sCoreValidatorMode.ByValue(i)
	return
}

// String returns the label or name of the CoreValidatorMode.
func (v CoreValidatorMode) String() string {
	return sCoreValidatorMode.String(v)
}

// MarshalBinary marshals the CoreValidatorMode to JSON.
func (v CoreValidatorMode) MarshalJSON() ([]byte, error) {
	return sCoreValidatorMode.MarshalJSON(v)
}

// UnmarshalJSON unmarshals the CoreValidatorMode from JSON.
func (v *CoreValidatorMode) UnmarshalJSON(b []byte) error {
	return sCoreValidatorMode.UnmarshalJSON(b, v)
}

type DevnetConfiguration struct {
	Listen      Multiaddr
	Bvns        uint64
	Validators  uint64
	Followers   uint64
	Globals     *network.GlobalValues
	StorageType *StorageType
}

func (DevnetConfiguration) Type() ConfigurationType { return ConfigurationTypeDevnet }

// Copy returns a copy of the DevnetConfiguration.
func (v *DevnetConfiguration) Copy() *DevnetConfiguration {
	return sDevnetConfiguration.Copy(v)
}

// EqualDevnetConfiguration returns true if V is equal to U.
func (v *DevnetConfiguration) Equal(u *DevnetConfiguration) bool {
	return sDevnetConfiguration.Equal(v, u)
}

// MarshalBinary marshals the DevnetConfiguration to JSON.
func (v *DevnetConfiguration) MarshalJSON() ([]byte, error) {
	return sDevnetConfiguration.MarshalJSON(v)
}

// UnmarshalJSON unmarshals the DevnetConfiguration from JSON.
func (v *DevnetConfiguration) UnmarshalJSON(b []byte) error {
	return sDevnetConfiguration.UnmarshalJSON(b, v)
}

type EventsService struct {
	Partition string
}

func (EventsService) Type() ServiceType { return ServiceTypeEvents }

// Copy returns a copy of the EventsService.
func (v *EventsService) Copy() *EventsService {
	return sEventsService.Copy(v)
}

// EqualEventsService returns true if V is equal to U.
func (v *EventsService) Equal(u *EventsService) bool {
	return sEventsService.Equal(v, u)
}

// MarshalBinary marshals the EventsService to JSON.
func (v *EventsService) MarshalJSON() ([]byte, error) {
	return sEventsService.MarshalJSON(v)
}

// UnmarshalJSON unmarshals the EventsService from JSON.
func (v *EventsService) UnmarshalJSON(b []byte) error {
	return sEventsService.UnmarshalJSON(b, v)
}

type ExpBlockDBStorage struct {
	Path string
}

func (ExpBlockDBStorage) Type() StorageType { return StorageTypeExpBlockDB }

// Copy returns a copy of the ExpBlockDBStorage.
func (v *ExpBlockDBStorage) Copy() *ExpBlockDBStorage {
	return sExpBlockDBStorage.Copy(v)
}

// EqualExpBlockDBStorage returns true if V is equal to U.
func (v *ExpBlockDBStorage) Equal(u *ExpBlockDBStorage) bool {
	return sExpBlockDBStorage.Equal(v, u)
}

// MarshalBinary marshals the ExpBlockDBStorage to JSON.
func (v *ExpBlockDBStorage) MarshalJSON() ([]byte, error) {
	return sExpBlockDBStorage.MarshalJSON(v)
}

// UnmarshalJSON unmarshals the ExpBlockDBStorage from JSON.
func (v *ExpBlockDBStorage) UnmarshalJSON(b []byte) error {
	return sExpBlockDBStorage.UnmarshalJSON(b, v)
}

type FaucetService struct {
	Account    *url.URL
	SigningKey PrivateKey
	Router     *RouterServiceRef
}

func (FaucetService) Type() ServiceType { return ServiceTypeFaucet }

// Copy returns a copy of the FaucetService.
func (v *FaucetService) Copy() *FaucetService {
	return sFaucetService.Copy(v)
}

// EqualFaucetService returns true if V is equal to U.
func (v *FaucetService) Equal(u *FaucetService) bool {
	return sFaucetService.Equal(v, u)
}

// MarshalBinary marshals the FaucetService to JSON.
func (v *FaucetService) MarshalJSON() ([]byte, error) {
	return sFaucetService.MarshalJSON(v)
}

// UnmarshalJSON unmarshals the FaucetService from JSON.
func (v *FaucetService) UnmarshalJSON(b []byte) error {
	return sFaucetService.UnmarshalJSON(b, v)
}

type GatewayConfiguration struct {
	Listen Multiaddr
}

func (GatewayConfiguration) Type() ConfigurationType { return ConfigurationTypeGateway }

// Copy returns a copy of the GatewayConfiguration.
func (v *GatewayConfiguration) Copy() *GatewayConfiguration {
	return sGatewayConfiguration.Copy(v)
}

// EqualGatewayConfiguration returns true if V is equal to U.
func (v *GatewayConfiguration) Equal(u *GatewayConfiguration) bool {
	return sGatewayConfiguration.Equal(v, u)
}

// MarshalBinary marshals the GatewayConfiguration to JSON.
func (v *GatewayConfiguration) MarshalJSON() ([]byte, error) {
	return sGatewayConfiguration.MarshalJSON(v)
}

// UnmarshalJSON unmarshals the GatewayConfiguration from JSON.
func (v *GatewayConfiguration) UnmarshalJSON(b []byte) error {
	return sGatewayConfiguration.UnmarshalJSON(b, v)
}

type HttpListener struct {
	// Listen are the addresses and schemes to listen on.
	Listen []Multiaddr
	// ConnectionLimit limits the number of concurrent connections.
	ConnectionLimit *int64
	// ReadHeaderTimeout protects against slow-loris attacks.
	ReadHeaderTimeout *encoding.Duration
	// TlsCertPath is the path of the TLS certificate.
	TlsCertPath string
	// TlsKeyPath is the path of the TLS key.
	TlsKeyPath string
}

// Copy returns a copy of the HttpListener.
func (v *HttpListener) Copy() *HttpListener {
	return sHttpListener.Copy(v)
}

// EqualHttpListener returns true if V is equal to U.
func (v *HttpListener) Equal(u *HttpListener) bool {
	return sHttpListener.Equal(v, u)
}

// MarshalBinary marshals the HttpListener to JSON.
func (v *HttpListener) MarshalJSON() ([]byte, error) {
	return sHttpListener.MarshalJSON(v)
}

// UnmarshalJSON unmarshals the HttpListener from JSON.
func (v *HttpListener) UnmarshalJSON(b []byte) error {
	return sHttpListener.UnmarshalJSON(b, v)
}

type HttpPeerMapEntry struct {
	ID         PeerID
	Partitions []string
	Addresses  []Multiaddr
}

// Copy returns a copy of the HttpPeerMapEntry.
func (v *HttpPeerMapEntry) Copy() *HttpPeerMapEntry {
	return sHttpPeerMapEntry.Copy(v)
}

// EqualHttpPeerMapEntry returns true if V is equal to U.
func (v *HttpPeerMapEntry) Equal(u *HttpPeerMapEntry) bool {
	return sHttpPeerMapEntry.Equal(v, u)
}

// MarshalBinary marshals the HttpPeerMapEntry to JSON.
func (v *HttpPeerMapEntry) MarshalJSON() ([]byte, error) {
	return sHttpPeerMapEntry.MarshalJSON(v)
}

// UnmarshalJSON unmarshals the HttpPeerMapEntry from JSON.
func (v *HttpPeerMapEntry) UnmarshalJSON(b []byte) error {
	return sHttpPeerMapEntry.UnmarshalJSON(b, v)
}

type HttpService struct {
	HttpListener
	// CorsOrigins is a list of allowed CORS origins.
	CorsOrigins []string
	// LetsEncrypt automatically retrieves a certificate from Let's Encrypt for the specified domains.
	LetsEncrypt  []string
	DebugJsonRpc *bool
	Router       *RouterServiceRef
	// PeerMap hard-codes the peer map.
	PeerMap []*HttpPeerMapEntry
}

func (HttpService) Type() ServiceType { return ServiceTypeHttp }

// Copy returns a copy of the HttpService.
func (v *HttpService) Copy() *HttpService {
	return sHttpService.Copy(v)
}

// EqualHttpService returns true if V is equal to U.
func (v *HttpService) Equal(u *HttpService) bool {
	return sHttpService.Equal(v, u)
}

// MarshalBinary marshals the HttpService to JSON.
func (v *HttpService) MarshalJSON() ([]byte, error) {
	return sHttpService.MarshalJSON(v)
}

// UnmarshalJSON unmarshals the HttpService from JSON.
func (v *HttpService) UnmarshalJSON(b []byte) error {
	return sHttpService.UnmarshalJSON(b, v)
}

type Instrumentation struct {
	HttpListener
	PprofListen Multiaddr
	Monitoring  *Monitor
}

// Copy returns a copy of the Instrumentation.
func (v *Instrumentation) Copy() *Instrumentation {
	return sInstrumentation.Copy(v)
}

// EqualInstrumentation returns true if V is equal to U.
func (v *Instrumentation) Equal(u *Instrumentation) bool {
	return sInstrumentation.Equal(v, u)
}

// MarshalBinary marshals the Instrumentation to JSON.
func (v *Instrumentation) MarshalJSON() ([]byte, error) {
	return sInstrumentation.MarshalJSON(v)
}

// UnmarshalJSON unmarshals the Instrumentation from JSON.
func (v *Instrumentation) UnmarshalJSON(b []byte) error {
	return sInstrumentation.UnmarshalJSON(b, v)
}

type LevelDBStorage struct {
	Path string
}

func (LevelDBStorage) Type() StorageType { return StorageTypeLevelDB }

// Copy returns a copy of the LevelDBStorage.
func (v *LevelDBStorage) Copy() *LevelDBStorage {
	return sLevelDBStorage.Copy(v)
}

// EqualLevelDBStorage returns true if V is equal to U.
func (v *LevelDBStorage) Equal(u *LevelDBStorage) bool {
	return sLevelDBStorage.Equal(v, u)
}

// MarshalBinary marshals the LevelDBStorage to JSON.
func (v *LevelDBStorage) MarshalJSON() ([]byte, error) {
	return sLevelDBStorage.MarshalJSON(v)
}

// UnmarshalJSON unmarshals the LevelDBStorage from JSON.
func (v *LevelDBStorage) UnmarshalJSON(b []byte) error {
	return sLevelDBStorage.UnmarshalJSON(b, v)
}

type Logging struct {
	Format string
	Color  *bool
	Rules  []*LoggingRule
	Loki   *LokiLogging
}

// Copy returns a copy of the Logging.
func (v *Logging) Copy() *Logging {
	return sLogging.Copy(v)
}

// EqualLogging returns true if V is equal to U.
func (v *Logging) Equal(u *Logging) bool {
	return sLogging.Equal(v, u)
}

// MarshalBinary marshals the Logging to JSON.
func (v *Logging) MarshalJSON() ([]byte, error) {
	return sLogging.MarshalJSON(v)
}

// UnmarshalJSON unmarshals the Logging from JSON.
func (v *Logging) UnmarshalJSON(b []byte) error {
	return sLogging.UnmarshalJSON(b, v)
}

type LoggingRule struct {
	Level   slog.Level
	Modules []string
}

// Copy returns a copy of the LoggingRule.
func (v *LoggingRule) Copy() *LoggingRule {
	return sLoggingRule.Copy(v)
}

// EqualLoggingRule returns true if V is equal to U.
func (v *LoggingRule) Equal(u *LoggingRule) bool {
	return sLoggingRule.Equal(v, u)
}

// MarshalBinary marshals the LoggingRule to JSON.
func (v *LoggingRule) MarshalJSON() ([]byte, error) {
	return sLoggingRule.MarshalJSON(v)
}

// UnmarshalJSON unmarshals the LoggingRule from JSON.
func (v *LoggingRule) UnmarshalJSON(b []byte) error {
	return sLoggingRule.UnmarshalJSON(b, v)
}

type LokiLogging struct {
	Enable   bool
	Url      string
	Username string
	Password string
}

// Copy returns a copy of the LokiLogging.
func (v *LokiLogging) Copy() *LokiLogging {
	return sLokiLogging.Copy(v)
}

// EqualLokiLogging returns true if V is equal to U.
func (v *LokiLogging) Equal(u *LokiLogging) bool {
	return sLokiLogging.Equal(v, u)
}

// MarshalBinary marshals the LokiLogging to JSON.
func (v *LokiLogging) MarshalJSON() ([]byte, error) {
	return sLokiLogging.MarshalJSON(v)
}

// UnmarshalJSON unmarshals the LokiLogging from JSON.
func (v *LokiLogging) UnmarshalJSON(b []byte) error {
	return sLokiLogging.UnmarshalJSON(b, v)
}

type MemoryStorage struct {
}

func (MemoryStorage) Type() StorageType { return StorageTypeMemory }

// Copy returns a copy of the MemoryStorage.
func (v *MemoryStorage) Copy() *MemoryStorage {
	return sMemoryStorage.Copy(v)
}

// EqualMemoryStorage returns true if V is equal to U.
func (v *MemoryStorage) Equal(u *MemoryStorage) bool {
	return sMemoryStorage.Equal(v, u)
}

// MarshalBinary marshals the MemoryStorage to JSON.
func (v *MemoryStorage) MarshalJSON() ([]byte, error) {
	return sMemoryStorage.MarshalJSON(v)
}

// UnmarshalJSON unmarshals the MemoryStorage from JSON.
func (v *MemoryStorage) UnmarshalJSON(b []byte) error {
	return sMemoryStorage.UnmarshalJSON(b, v)
}

type MetricsService struct {
	Partition string
}

func (MetricsService) Type() ServiceType { return ServiceTypeMetrics }

// Copy returns a copy of the MetricsService.
func (v *MetricsService) Copy() *MetricsService {
	return sMetricsService.Copy(v)
}

// EqualMetricsService returns true if V is equal to U.
func (v *MetricsService) Equal(u *MetricsService) bool {
	return sMetricsService.Equal(v, u)
}

// MarshalBinary marshals the MetricsService to JSON.
func (v *MetricsService) MarshalJSON() ([]byte, error) {
	return sMetricsService.MarshalJSON(v)
}

// UnmarshalJSON unmarshals the MetricsService from JSON.
func (v *MetricsService) UnmarshalJSON(b []byte) error {
	return sMetricsService.UnmarshalJSON(b, v)
}

type Monitor struct {
	// Directory is the directory traces and profiles are written to.
	Directory string
	// ProfileMemory enables profiling when memory usage increases dramatically.
	ProfileMemory *bool
	// MemoryPollingRate is rate at which to poll memory usage.
	MemoryPollingRate *encoding.Duration
	// AllocRateTrigger is the rate of allocation in bytes/second that triggers a profile.
	AllocRateTrigger *float64
}

// Copy returns a copy of the Monitor.
func (v *Monitor) Copy() *Monitor {
	return sMonitor.Copy(v)
}

// EqualMonitor returns true if V is equal to U.
func (v *Monitor) Equal(u *Monitor) bool {
	return sMonitor.Equal(v, u)
}

// MarshalBinary marshals the Monitor to JSON.
func (v *Monitor) MarshalJSON() ([]byte, error) {
	return sMonitor.MarshalJSON(v)
}

// UnmarshalJSON unmarshals the Monitor from JSON.
func (v *Monitor) UnmarshalJSON(b []byte) error {
	return sMonitor.UnmarshalJSON(b, v)
}

type Multiaddr = multiaddr.Multiaddr

type NetworkService struct {
	Partition string
}

func (NetworkService) Type() ServiceType { return ServiceTypeNetwork }

// Copy returns a copy of the NetworkService.
func (v *NetworkService) Copy() *NetworkService {
	return sNetworkService.Copy(v)
}

// EqualNetworkService returns true if V is equal to U.
func (v *NetworkService) Equal(u *NetworkService) bool {
	return sNetworkService.Equal(v, u)
}

// MarshalBinary marshals the NetworkService to JSON.
func (v *NetworkService) MarshalJSON() ([]byte, error) {
	return sNetworkService.MarshalJSON(v)
}

// UnmarshalJSON unmarshals the NetworkService from JSON.
func (v *NetworkService) UnmarshalJSON(b []byte) error {
	return sNetworkService.UnmarshalJSON(b, v)
}

type OtlpConfig struct {
	Enabled  *bool
	Endpoint string
	Username string
	Password string
}

// Copy returns a copy of the OtlpConfig.
func (v *OtlpConfig) Copy() *OtlpConfig {
	return sOtlpConfig.Copy(v)
}

// EqualOtlpConfig returns true if V is equal to U.
func (v *OtlpConfig) Equal(u *OtlpConfig) bool {
	return sOtlpConfig.Equal(v, u)
}

// MarshalBinary marshals the OtlpConfig to JSON.
func (v *OtlpConfig) MarshalJSON() ([]byte, error) {
	return sOtlpConfig.MarshalJSON(v)
}

// UnmarshalJSON unmarshals the OtlpConfig from JSON.
func (v *OtlpConfig) UnmarshalJSON(b []byte) error {
	return sOtlpConfig.UnmarshalJSON(b, v)
}

type P2P struct {
	Listen             []Multiaddr
	BootstrapPeers     []Multiaddr
	Key                PrivateKey
	PeerDB             *string
	EnablePeerTracking bool
	DiscoveryMode      *DhtMode
	External           Multiaddr
}

// Copy returns a copy of the P2P.
func (v *P2P) Copy() *P2P {
	return sP2P.Copy(v)
}

// EqualP2P returns true if V is equal to U.
func (v *P2P) Equal(u *P2P) bool {
	return sP2P.Equal(v, u)
}

// MarshalBinary marshals the P2P to JSON.
func (v *P2P) MarshalJSON() ([]byte, error) {
	return sP2P.MarshalJSON(v)
}

// UnmarshalJSON unmarshals the P2P from JSON.
func (v *P2P) UnmarshalJSON(b []byte) error {
	return sP2P.UnmarshalJSON(b, v)
}

type PeerID = peer.ID

// TODO type PrivateKey interface {}

// CopyPrivateKey returns a copy of the PrivateKey.
func CopyPrivateKey(v PrivateKey) PrivateKey {
	return sPrivateKey.Copy(v)
}

// EqualPrivateKey returns true if A and B are equal.
func EqualPrivateKey(a, b PrivateKey) bool {
	return sPrivateKey.Equal(a, b)
}

// UnmarshalPrivateKeyJSON unmarshals a PrivateKey from JSON.
func UnmarshalPrivateKeyJSON(b []byte) (PrivateKey, error) {
	var v PrivateKey
	err := sPrivateKey.UnmarshalJSON(b, &v)
	return v, err
}

type PrivateKeySeed struct {
	Seed *record.Key
	key  address.Address
}

func (PrivateKeySeed) Type() PrivateKeyType { return PrivateKeyTypeSeed }

// Copy returns a copy of the PrivateKeySeed.
func (v *PrivateKeySeed) Copy() *PrivateKeySeed {
	return sPrivateKeySeed.Copy(v)
}

// EqualPrivateKeySeed returns true if V is equal to U.
func (v *PrivateKeySeed) Equal(u *PrivateKeySeed) bool {
	return sPrivateKeySeed.Equal(v, u)
}

// MarshalBinary marshals the PrivateKeySeed to JSON.
func (v *PrivateKeySeed) MarshalJSON() ([]byte, error) {
	return sPrivateKeySeed.MarshalJSON(v)
}

// UnmarshalJSON unmarshals the PrivateKeySeed from JSON.
func (v *PrivateKeySeed) UnmarshalJSON(b []byte) error {
	return sPrivateKeySeed.UnmarshalJSON(b, v)
}

type PrivateKeyType int64

const (
	PrivateKeyTypeCometNodeKeyFile PrivateKeyType = 5
	PrivateKeyTypeCometPrivValFile PrivateKeyType = 4
	PrivateKeyTypeRaw              PrivateKeyType = 1
	PrivateKeyTypeSeed             PrivateKeyType = 3
	PrivateKeyTypeTransient        PrivateKeyType = 2
)

// SetByName looks up a PrivateKeyType by name.
func (v *PrivateKeyType) SetByName(s string) (ok bool) {
	*v, ok = sPrivateKeyType.ByName(s)
	return
}

// SetByValue looks up a PrivateKeyType by value.
func (v *PrivateKeyType) SetByValue(i int64) (ok bool) {
	*v, ok = sPrivateKeyType.ByValue(i)
	return
}

// String returns the label or name of the PrivateKeyType.
func (v PrivateKeyType) String() string {
	return sPrivateKeyType.String(v)
}

// MarshalBinary marshals the PrivateKeyType to JSON.
func (v PrivateKeyType) MarshalJSON() ([]byte, error) {
	return sPrivateKeyType.MarshalJSON(v)
}

// UnmarshalJSON unmarshals the PrivateKeyType from JSON.
func (v *PrivateKeyType) UnmarshalJSON(b []byte) error {
	return sPrivateKeyType.UnmarshalJSON(b, v)
}

type Querier struct {
	Partition string
	Storage   *StorageOrRef
}

func (Querier) Type() ServiceType { return ServiceTypeQuerier }

// Copy returns a copy of the Querier.
func (v *Querier) Copy() *Querier {
	return sQuerier.Copy(v)
}

// EqualQuerier returns true if V is equal to U.
func (v *Querier) Equal(u *Querier) bool {
	return sQuerier.Equal(v, u)
}

// MarshalBinary marshals the Querier to JSON.
func (v *Querier) MarshalJSON() ([]byte, error) {
	return sQuerier.MarshalJSON(v)
}

// UnmarshalJSON unmarshals the Querier from JSON.
func (v *Querier) UnmarshalJSON(b []byte) error {
	return sQuerier.UnmarshalJSON(b, v)
}

type RawPrivateKey struct {
	Address string
}

func (RawPrivateKey) Type() PrivateKeyType { return PrivateKeyTypeRaw }

// Copy returns a copy of the RawPrivateKey.
func (v *RawPrivateKey) Copy() *RawPrivateKey {
	return sRawPrivateKey.Copy(v)
}

// EqualRawPrivateKey returns true if V is equal to U.
func (v *RawPrivateKey) Equal(u *RawPrivateKey) bool {
	return sRawPrivateKey.Equal(v, u)
}

// MarshalBinary marshals the RawPrivateKey to JSON.
func (v *RawPrivateKey) MarshalJSON() ([]byte, error) {
	return sRawPrivateKey.MarshalJSON(v)
}

// UnmarshalJSON unmarshals the RawPrivateKey from JSON.
func (v *RawPrivateKey) UnmarshalJSON(b []byte) error {
	return sRawPrivateKey.UnmarshalJSON(b, v)
}

type RouterService struct {
	Name string
	// Events may specify an event bus to use for routing table updates.
	Events string
	// PeerMap uses a hard-coded peer map for initializing routing.
	PeerMap []*HttpPeerMapEntry
}

func (RouterService) Type() ServiceType { return ServiceTypeRouter }

// Copy returns a copy of the RouterService.
func (v *RouterService) Copy() *RouterService {
	return sRouterService.Copy(v)
}

// EqualRouterService returns true if V is equal to U.
func (v *RouterService) Equal(u *RouterService) bool {
	return sRouterService.Equal(v, u)
}

// MarshalBinary marshals the RouterService to JSON.
func (v *RouterService) MarshalJSON() ([]byte, error) {
	return sRouterService.MarshalJSON(v)
}

// UnmarshalJSON unmarshals the RouterService from JSON.
func (v *RouterService) UnmarshalJSON(b []byte) error {
	return sRouterService.UnmarshalJSON(b, v)
}

// TODO type Service interface {}

// CopyService returns a copy of the Service.
func CopyService(v Service) Service {
	return sService.Copy(v)
}

// EqualService returns true if A and B are equal.
func EqualService(a, b Service) bool {
	return sService.Equal(a, b)
}

// UnmarshalServiceJSON unmarshals a Service from JSON.
func UnmarshalServiceJSON(b []byte) (Service, error) {
	var v Service
	err := sService.UnmarshalJSON(b, &v)
	return v, err
}

type ServiceType int64

const (
	ServiceTypeConsensus ServiceType = 2
	ServiceTypeEvents    ServiceType = 6
	ServiceTypeFaucet    ServiceType = 10
	ServiceTypeHttp      ServiceType = 7
	ServiceTypeMetrics   ServiceType = 5
	ServiceTypeNetwork   ServiceType = 4
	ServiceTypeQuerier   ServiceType = 3
	ServiceTypeRouter    ServiceType = 8
	ServiceTypeSnapshot  ServiceType = 9
	ServiceTypeStorage   ServiceType = 1
	ServiceTypeSubnode   ServiceType = 11
)

// SetByName looks up a ServiceType by name.
func (v *ServiceType) SetByName(s string) (ok bool) {
	*v, ok = sServiceType.ByName(s)
	return
}

// SetByValue looks up a ServiceType by value.
func (v *ServiceType) SetByValue(i int64) (ok bool) {
	*v, ok = sServiceType.ByValue(i)
	return
}

// String returns the label or name of the ServiceType.
func (v ServiceType) String() string {
	return sServiceType.String(v)
}

// MarshalBinary marshals the ServiceType to JSON.
func (v ServiceType) MarshalJSON() ([]byte, error) {
	return sServiceType.MarshalJSON(v)
}

// UnmarshalJSON unmarshals the ServiceType from JSON.
func (v *ServiceType) UnmarshalJSON(b []byte) error {
	return sServiceType.UnmarshalJSON(b, v)
}

type SnapshotService struct {
	Partition string
	Storage   *StorageOrRef
	// Directory is the directory to store snapshots in.
	Directory string
	// Schedule is the schedule for automatically capturing snapshots.
	Schedule *network.CronSchedule
	// RetainCount is the number of snapshots to retain.
	RetainCount *uint64
	// EnableIndexing enables indexing of snapshots.
	EnableIndexing *bool
}

func (SnapshotService) Type() ServiceType { return ServiceTypeSnapshot }

// Copy returns a copy of the SnapshotService.
func (v *SnapshotService) Copy() *SnapshotService {
	return sSnapshotService.Copy(v)
}

// EqualSnapshotService returns true if V is equal to U.
func (v *SnapshotService) Equal(u *SnapshotService) bool {
	return sSnapshotService.Equal(v, u)
}

// MarshalBinary marshals the SnapshotService to JSON.
func (v *SnapshotService) MarshalJSON() ([]byte, error) {
	return sSnapshotService.MarshalJSON(v)
}

// UnmarshalJSON unmarshals the SnapshotService from JSON.
func (v *SnapshotService) UnmarshalJSON(b []byte) error {
	return sSnapshotService.UnmarshalJSON(b, v)
}

// TODO type Storage interface {}

// CopyStorage returns a copy of the Storage.
func CopyStorage(v Storage) Storage {
	return sStorage.Copy(v)
}

// EqualStorage returns true if A and B are equal.
func EqualStorage(a, b Storage) bool {
	return sStorage.Equal(a, b)
}

// UnmarshalStorageJSON unmarshals a Storage from JSON.
func UnmarshalStorageJSON(b []byte) (Storage, error) {
	var v Storage
	err := sStorage.UnmarshalJSON(b, &v)
	return v, err
}

type StorageService struct {
	Name    string
	Storage Storage
}

func (StorageService) Type() ServiceType { return ServiceTypeStorage }

// Copy returns a copy of the StorageService.
func (v *StorageService) Copy() *StorageService {
	return sStorageService.Copy(v)
}

// EqualStorageService returns true if V is equal to U.
func (v *StorageService) Equal(u *StorageService) bool {
	return sStorageService.Equal(v, u)
}

// MarshalBinary marshals the StorageService to JSON.
func (v *StorageService) MarshalJSON() ([]byte, error) {
	return sStorageService.MarshalJSON(v)
}

// UnmarshalJSON unmarshals the StorageService from JSON.
func (v *StorageService) UnmarshalJSON(b []byte) error {
	return sStorageService.UnmarshalJSON(b, v)
}

type StorageType int64

const (
	StorageTypeBadger     StorageType = 2
	StorageTypeBolt       StorageType = 3
	StorageTypeExpBlockDB StorageType = 1001
	StorageTypeLevelDB    StorageType = 4
	StorageTypeMemory     StorageType = 1
)

// SetByName looks up a StorageType by name.
func (v *StorageType) SetByName(s string) (ok bool) {
	*v, ok = sStorageType.ByName(s)
	return
}

// SetByValue looks up a StorageType by value.
func (v *StorageType) SetByValue(i int64) (ok bool) {
	*v, ok = sStorageType.ByValue(i)
	return
}

// String returns the label or name of the StorageType.
func (v StorageType) String() string {
	return sStorageType.String(v)
}

// MarshalBinary marshals the StorageType to JSON.
func (v StorageType) MarshalJSON() ([]byte, error) {
	return sStorageType.MarshalJSON(v)
}

// UnmarshalJSON unmarshals the StorageType from JSON.
func (v *StorageType) UnmarshalJSON(b []byte) error {
	return sStorageType.UnmarshalJSON(b, v)
}

type SubnodeService struct {
	Name     string
	NodeKey  PrivateKey
	Services []Service
}

func (SubnodeService) Type() ServiceType { return ServiceTypeSubnode }

// Copy returns a copy of the SubnodeService.
func (v *SubnodeService) Copy() *SubnodeService {
	return sSubnodeService.Copy(v)
}

// EqualSubnodeService returns true if V is equal to U.
func (v *SubnodeService) Equal(u *SubnodeService) bool {
	return sSubnodeService.Equal(v, u)
}

// MarshalBinary marshals the SubnodeService to JSON.
func (v *SubnodeService) MarshalJSON() ([]byte, error) {
	return sSubnodeService.MarshalJSON(v)
}

// UnmarshalJSON unmarshals the SubnodeService from JSON.
func (v *SubnodeService) UnmarshalJSON(b []byte) error {
	return sSubnodeService.UnmarshalJSON(b, v)
}

type Telemetry struct {
	Enabled *bool
	Stdout  *bool
	Export  *HttpListener
	Otlp    *OtlpConfig
	Rules   []*TelemetryRule
}

// Copy returns a copy of the Telemetry.
func (v *Telemetry) Copy() *Telemetry {
	return sTelemetry.Copy(v)
}

// EqualTelemetry returns true if V is equal to U.
func (v *Telemetry) Equal(u *Telemetry) bool {
	return sTelemetry.Equal(v, u)
}

// MarshalBinary marshals the Telemetry to JSON.
func (v *Telemetry) MarshalJSON() ([]byte, error) {
	return sTelemetry.MarshalJSON(v)
}

// UnmarshalJSON unmarshals the Telemetry from JSON.
func (v *Telemetry) UnmarshalJSON(b []byte) error {
	return sTelemetry.UnmarshalJSON(b, v)
}

type TelemetryRule struct {
	Match []string
	Drop  bool
	Rate  encoding.Duration
}

// Copy returns a copy of the TelemetryRule.
func (v *TelemetryRule) Copy() *TelemetryRule {
	return sTelemetryRule.Copy(v)
}

// EqualTelemetryRule returns true if V is equal to U.
func (v *TelemetryRule) Equal(u *TelemetryRule) bool {
	return sTelemetryRule.Equal(v, u)
}

// MarshalBinary marshals the TelemetryRule to JSON.
func (v *TelemetryRule) MarshalJSON() ([]byte, error) {
	return sTelemetryRule.MarshalJSON(v)
}

// UnmarshalJSON unmarshals the TelemetryRule from JSON.
func (v *TelemetryRule) UnmarshalJSON(b []byte) error {
	return sTelemetryRule.UnmarshalJSON(b, v)
}

type TransientPrivateKey struct {
	key address.Address
}

func (TransientPrivateKey) Type() PrivateKeyType { return PrivateKeyTypeTransient }

// Copy returns a copy of the TransientPrivateKey.
func (v *TransientPrivateKey) Copy() *TransientPrivateKey {
	return sTransientPrivateKey.Copy(v)
}

// EqualTransientPrivateKey returns true if V is equal to U.
func (v *TransientPrivateKey) Equal(u *TransientPrivateKey) bool {
	return sTransientPrivateKey.Equal(v, u)
}

// MarshalBinary marshals the TransientPrivateKey to JSON.
func (v *TransientPrivateKey) MarshalJSON() ([]byte, error) {
	return sTransientPrivateKey.MarshalJSON(v)
}

// UnmarshalJSON unmarshals the TransientPrivateKey from JSON.
func (v *TransientPrivateKey) UnmarshalJSON(b []byte) error {
	return sTransientPrivateKey.UnmarshalJSON(b, v)
}
