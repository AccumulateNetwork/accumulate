// Copyright 2022 The Accumulate Authors
//
// Use of this source code is governed by an MIT-style
// license that can be found in the LICENSE file or at
// https://opensource.org/licenses/MIT.

package api

// GENERATED BY go run ./tools/cmd/gen-enum. DO NOT EDIT.

import (
	"encoding/json"
	"fmt"
	"strings"
)

// ErrorCodeGeneralError .
const ErrorCodeGeneralError ErrorCode = -33002

// ErrorCodeAlreadyExists .
const ErrorCodeAlreadyExists ErrorCode = -33001

// ErrorCodeNotFound .
const ErrorCodeNotFound ErrorCode = -33000

// GetEnumValue returns the value of the Error Code
func (v ErrorCode) GetEnumValue() uint64 { return uint64(v) }

// SetEnumValue sets the value. SetEnumValue returns false if the value is invalid.
func (v *ErrorCode) SetEnumValue(id uint64) bool {
	u := ErrorCode(id)
	switch u {
	case ErrorCodeGeneralError, ErrorCodeAlreadyExists, ErrorCodeNotFound:
		*v = u
		return true
	default:
		return false
	}
}

// String returns the name of the Error Code.
func (v ErrorCode) String() string {
	switch v {
	case ErrorCodeGeneralError:
		return "generalError"
	case ErrorCodeAlreadyExists:
		return "alreadyExists"
	case ErrorCodeNotFound:
		return "notFound"
	default:
		return fmt.Sprintf("ErrorCode:%d", v)
	}
}

// ErrorCodeByName returns the named Error Code.
func ErrorCodeByName(name string) (ErrorCode, bool) {
	switch strings.ToLower(name) {
	case "generalerror":
		return ErrorCodeGeneralError, true
	case "alreadyexists":
		return ErrorCodeAlreadyExists, true
	case "notfound":
		return ErrorCodeNotFound, true
	default:
		return 0, false
	}
}

// MarshalJSON marshals the Error Code to JSON as a string.
func (v ErrorCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.String())
}

// UnmarshalJSON unmarshals the Error Code from JSON as a string.
func (v *ErrorCode) UnmarshalJSON(data []byte) error {
	var s string
	err := json.Unmarshal(data, &s)
	if err != nil {
		return err
	}

	var ok bool
	*v, ok = ErrorCodeByName(s)
	if !ok || strings.ContainsRune(v.String(), ':') {
		return fmt.Errorf("invalid Error Code %q", s)
	}
	return nil
}
