// Code generated by gitlab.com/accumulatenetwork/core/schema. DO NOT EDIT.

package cometbft

import (
	"fmt"

	protocol "gitlab.com/accumulatenetwork/accumulate/protocol"
	"gitlab.com/accumulatenetwork/core/schema"
)

var (
	sGenesisDoc schema.Methods[*GenesisDoc, *GenesisDoc, *schema.CompositeType]
	sValidator  schema.Methods[*Validator, *Validator, *schema.CompositeType]
)

func init() {
	var deferredTypes schema.ResolverSet

	sGenesisDoc = schema.WithMethods[*GenesisDoc, *GenesisDoc](&schema.CompositeType{
		TypeBase: schema.TypeBase{
			Name: "GenesisDoc",
		},
		Fields: []*schema.Field{
			{
				Name: "ChainID",
				Type: &schema.SimpleType{Type: schema.SimpleTypeString},
			},
			{
				Name: "Params",
				Type: &schema.PointerType{
					TypeBase: schema.TypeBase{},
					Elem:     schema.TypeReferenceFor[ConsensusParams](),
				},
			},
			{
				Name: "Validators",
				Type: &schema.ArrayType{
					TypeBase: schema.TypeBase{},
					Elem: (&schema.PointerType{
						TypeBase: schema.TypeBase{},
					}).
						ResolveElemTo(&deferredTypes, "Validator"),
				},
			},
			{
				Name: "Block",
				Type: &schema.PointerType{
					TypeBase: schema.TypeBase{},
					Elem:     schema.TypeReferenceFor[Block](),
				},
			},
		},
	}).SetGoType()

	sValidator = schema.WithMethods[*Validator, *Validator](&schema.CompositeType{
		TypeBase: schema.TypeBase{
			Name: "Validator",
		},
		Fields: []*schema.Field{
			{
				Name: "Address",
				Type: &schema.SimpleType{Type: schema.SimpleTypeBytes},
			},
			{
				Name: "Type",
				Type: schema.TypeReferenceFor[protocol.SignatureType](),
			},
			{
				Name: "PubKey",
				Type: &schema.SimpleType{Type: schema.SimpleTypeBytes},
			},
			{
				Name: "Power",
				Type: &schema.SimpleType{Type: schema.SimpleTypeInt},
			},
			{
				Name: "Name",
				Type: &schema.SimpleType{Type: schema.SimpleTypeString},
			},
		},
	}).SetGoType()

	s, err := schema.New(
		sGenesisDoc.Type,
		sValidator.Type,
	)
	if err != nil {
		panic(fmt.Errorf("invalid embedded schema: %w", err))
	}

	s.Generate = schema.MapValue{
		"import": schema.MapValue{
			"encoding": schema.StringValue("gitlab.com/accumulatenetwork/accumulate/pkg/types/encoding"),
			"protocol": schema.StringValue("gitlab.com/accumulatenetwork/accumulate/protocol"),
		},
		"methods": schema.MapValue{
			"binary": schema.BooleanValue(true),
			"json":   schema.BooleanValue(true),
		},
		"varPrefix": schema.MapValue{
			"schema": schema.StringValue("s"),
			"widget": schema.StringValue("w"),
		},
		"widgets": schema.BooleanValue(true),
	}

	deferredTypes.Resolve(s)
	err = s.Validate()
	if err != nil {
		panic(fmt.Errorf("invalid embedded schema: %w", err))
	}
}
