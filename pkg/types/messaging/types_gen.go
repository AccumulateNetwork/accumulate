// Copyright 2022 The Accumulate Authors
//
// Use of this source code is governed by an MIT-style
// license that can be found in the LICENSE file or at
// https://opensource.org/licenses/MIT.

package messaging

// GENERATED BY go run ./tools/cmd/gen-types. DO NOT EDIT.

//lint:file-ignore S1001,S1002,S1008,SA4013 generated code

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"strings"

	"gitlab.com/accumulatenetwork/accumulate/pkg/types/encoding"
	"gitlab.com/accumulatenetwork/accumulate/protocol"
)

type LegacyMessage struct {
	fieldsSet   []bool
	Signatures  []protocol.Signature  `json:"signatures,omitempty" form:"signatures" query:"signatures" validate:"required"`
	Transaction *protocol.Transaction `json:"transaction,omitempty" form:"transaction" query:"transaction" validate:"required"`
	extraData   []byte
}

func (*LegacyMessage) Type() MessageType { return MessageTypeLegacy }

func (v *LegacyMessage) Copy() *LegacyMessage {
	u := new(LegacyMessage)

	u.Signatures = make([]protocol.Signature, len(v.Signatures))
	for i, v := range v.Signatures {
		if v != nil {
			u.Signatures[i] = protocol.CopySignature(v)
		}
	}
	if v.Transaction != nil {
		u.Transaction = (v.Transaction).Copy()
	}

	return u
}

func (v *LegacyMessage) CopyAsInterface() interface{} { return v.Copy() }

func (v *LegacyMessage) Equal(u *LegacyMessage) bool {
	if len(v.Signatures) != len(u.Signatures) {
		return false
	}
	for i := range v.Signatures {
		if !(protocol.EqualSignature(v.Signatures[i], u.Signatures[i])) {
			return false
		}
	}
	switch {
	case v.Transaction == u.Transaction:
		// equal
	case v.Transaction == nil || u.Transaction == nil:
		return false
	case !((v.Transaction).Equal(u.Transaction)):
		return false
	}

	return true
}

var fieldNames_LegacyMessage = []string{
	1: "Type",
	2: "Signatures",
	3: "Transaction",
}

func (v *LegacyMessage) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	writer.WriteEnum(1, v.Type())
	if !(len(v.Signatures) == 0) {
		for _, v := range v.Signatures {
			writer.WriteValue(2, v.MarshalBinary)
		}
	}
	if !(v.Transaction == nil) {
		writer.WriteValue(3, v.Transaction.MarshalBinary)
	}

	_, _, err := writer.Reset(fieldNames_LegacyMessage)
	if err != nil {
		return nil, encoding.Error{E: err}
	}
	buffer.Write(v.extraData)
	return buffer.Bytes(), nil
}

func (v *LegacyMessage) IsValid() error {
	var errs []string

	if len(v.fieldsSet) > 0 && !v.fieldsSet[0] {
		errs = append(errs, "field Type is missing")
	}
	if len(v.fieldsSet) > 1 && !v.fieldsSet[1] {
		errs = append(errs, "field Signatures is missing")
	} else if len(v.Signatures) == 0 {
		errs = append(errs, "field Signatures is not set")
	}
	if len(v.fieldsSet) > 2 && !v.fieldsSet[2] {
		errs = append(errs, "field Transaction is missing")
	} else if v.Transaction == nil {
		errs = append(errs, "field Transaction is not set")
	}

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

func (v *LegacyMessage) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *LegacyMessage) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	var vType MessageType
	if x := new(MessageType); reader.ReadEnum(1, x) {
		vType = *x
	}
	if !(v.Type() == vType) {
		return fmt.Errorf("field Type: not equal: want %v, got %v", v.Type(), vType)
	}

	return v.UnmarshalFieldsFrom(reader)
}

func (v *LegacyMessage) UnmarshalFieldsFrom(reader *encoding.Reader) error {
	for {
		ok := reader.ReadValue(2, func(r io.Reader) error {
			x, err := protocol.UnmarshalSignatureFrom(r)
			if err == nil {
				v.Signatures = append(v.Signatures, x)
			}
			return err
		})
		if !ok {
			break
		}
	}
	if x := new(protocol.Transaction); reader.ReadValue(3, x.UnmarshalBinaryFrom) {
		v.Transaction = x
	}

	seen, err := reader.Reset(fieldNames_LegacyMessage)
	if err != nil {
		return encoding.Error{E: err}
	}
	v.fieldsSet = seen
	v.extraData, err = reader.ReadAll()
	if err != nil {
		return encoding.Error{E: err}
	}
	return nil
}

func (v *LegacyMessage) MarshalJSON() ([]byte, error) {
	u := struct {
		Type        MessageType                                        `json:"type"`
		Signatures  encoding.JsonUnmarshalListWith[protocol.Signature] `json:"signatures,omitempty"`
		Transaction *protocol.Transaction                              `json:"transaction,omitempty"`
	}{}
	u.Type = v.Type()
	u.Signatures = encoding.JsonUnmarshalListWith[protocol.Signature]{Value: v.Signatures, Func: protocol.UnmarshalSignatureJSON}
	u.Transaction = v.Transaction
	return json.Marshal(&u)
}

func (v *LegacyMessage) UnmarshalJSON(data []byte) error {
	u := struct {
		Type        MessageType                                        `json:"type"`
		Signatures  encoding.JsonUnmarshalListWith[protocol.Signature] `json:"signatures,omitempty"`
		Transaction *protocol.Transaction                              `json:"transaction,omitempty"`
	}{}
	u.Type = v.Type()
	u.Signatures = encoding.JsonUnmarshalListWith[protocol.Signature]{Value: v.Signatures, Func: protocol.UnmarshalSignatureJSON}
	u.Transaction = v.Transaction
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	if !(v.Type() == u.Type) {
		return fmt.Errorf("field Type: not equal: want %v, got %v", v.Type(), u.Type)
	}
	v.Signatures = make([]protocol.Signature, len(u.Signatures.Value))
	for i, x := range u.Signatures.Value {
		v.Signatures[i] = x
	}
	v.Transaction = u.Transaction
	return nil
}
