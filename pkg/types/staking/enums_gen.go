package staking

// GENERATED BY go run ./tools/cmd/gen-enum. DO NOT EDIT.

import (
	"encoding/json"
	"fmt"
	"strings"
)

// AccountTypeInactive .
const AccountTypeInactive AccountType = 0

// AccountTypePure .
const AccountTypePure AccountType = 1

// AccountTypeDelegated .
const AccountTypeDelegated AccountType = 2

// AccountTypeValidator .
const AccountTypeValidator AccountType = 3

// GetEnumValue returns the value of the Account Type
func (v AccountType) GetEnumValue() uint64 { return uint64(v) }

// SetEnumValue sets the value. SetEnumValue returns false if the value is invalid.
func (v *AccountType) SetEnumValue(id uint64) bool {
	u := AccountType(id)
	switch u {
	case AccountTypeInactive, AccountTypePure, AccountTypeDelegated, AccountTypeValidator:
		*v = u
		return true
	default:
		return false
	}
}

// String returns the name of the Account Type.
func (v AccountType) String() string {
	switch v {
	case AccountTypeInactive:
		return "inactive"
	case AccountTypePure:
		return "pure"
	case AccountTypeDelegated:
		return "delegated"
	case AccountTypeValidator:
		return "validator"
	default:
		return fmt.Sprintf("AccountType:%d", v)
	}
}

// AccountTypeByName returns the named Account Type.
func AccountTypeByName(name string) (AccountType, bool) {
	switch strings.ToLower(name) {
	case "inactive":
		return AccountTypeInactive, true
	case "pure":
		return AccountTypePure, true
	case "delegated":
		return AccountTypeDelegated, true
	case "validator":
		return AccountTypeValidator, true
	default:
		return 0, false
	}
}

// MarshalJSON marshals the Account Type to JSON as a string.
func (v AccountType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.String())
}

// UnmarshalJSON unmarshals the Account Type from JSON as a string.
func (v *AccountType) UnmarshalJSON(data []byte) error {
	var s string
	err := json.Unmarshal(data, &s)
	if err != nil {
		return err
	}

	var ok bool
	*v, ok = AccountTypeByName(s)
	if !ok || strings.ContainsRune(v.String(), ':') {
		return fmt.Errorf("invalid Account Type %q", s)
	}
	return nil
}
