// Copyright 2022 The Accumulate Authors
//
// Use of this source code is governed by an MIT-style
// license that can be found in the LICENSE file or at
// https://opensource.org/licenses/MIT.

package record

// GENERATED BY go run ./tools/cmd/gen-enum. DO NOT EDIT.

import (
	"encoding/json"
	"fmt"
	"strings"
)

// typeCodeUnknown .
const typeCodeUnknown typeCode = 0

// typeCodeInt .
const typeCodeInt typeCode = 1

// typeCodeUint .
const typeCodeUint typeCode = 2

// typeCodeBool .
const typeCodeBool typeCode = 3

// typeCodeString .
const typeCodeString typeCode = 4

// typeCodeHash .
const typeCodeHash typeCode = 5

// typeCodeBytes .
const typeCodeBytes typeCode = 6

// typeCodeUrl .
const typeCodeUrl typeCode = 7

// typeCodeTime .
const typeCodeTime typeCode = 8

// typeCodeDuration .
const typeCodeDuration typeCode = 9

// typeCodeBigInt .
const typeCodeBigInt typeCode = 10

// typeCodeAny .
const typeCodeAny typeCode = 11

// typeCodeRawJson .
const typeCodeRawJson typeCode = 12

// typeCodeFloat .
const typeCodeFloat typeCode = 13

// typeCodeTxid .
const typeCodeTxid typeCode = 14

// GetEnumValue returns the value of the type Code
func (v typeCode) GetEnumValue() uint64 { return uint64(v) }

// SetEnumValue sets the value. SetEnumValue returns false if the value is invalid.
func (v *typeCode) SetEnumValue(id uint64) bool {
	u := typeCode(id)
	switch u {
	case typeCodeUnknown, typeCodeInt, typeCodeUint, typeCodeBool, typeCodeString, typeCodeHash, typeCodeBytes, typeCodeUrl, typeCodeTime, typeCodeDuration, typeCodeBigInt, typeCodeAny, typeCodeRawJson, typeCodeFloat, typeCodeTxid:
		*v = u
		return true
	}
	return false
}

// String returns the name of the type Code.
func (v typeCode) String() string {
	switch v {
	case typeCodeUnknown:
		return "unknown"
	case typeCodeInt:
		return "int"
	case typeCodeUint:
		return "uint"
	case typeCodeBool:
		return "bool"
	case typeCodeString:
		return "string"
	case typeCodeHash:
		return "hash"
	case typeCodeBytes:
		return "bytes"
	case typeCodeUrl:
		return "url"
	case typeCodeTime:
		return "time"
	case typeCodeDuration:
		return "duration"
	case typeCodeBigInt:
		return "bigInt"
	case typeCodeAny:
		return "any"
	case typeCodeRawJson:
		return "rawJson"
	case typeCodeFloat:
		return "float"
	case typeCodeTxid:
		return "txid"
	}
	return fmt.Sprintf("typeCode:%d", v)
}

// typeCodeByName returns the named type Code.
func typeCodeByName(name string) (typeCode, bool) {
	switch strings.ToLower(name) {
	case "unknown":
		return typeCodeUnknown, true
	case "int":
		return typeCodeInt, true
	case "varint":
		return typeCodeInt, true
	case "uint":
		return typeCodeUint, true
	case "uvarint":
		return typeCodeUint, true
	case "bool":
		return typeCodeBool, true
	case "boolean":
		return typeCodeBool, true
	case "string":
		return typeCodeString, true
	case "hash":
		return typeCodeHash, true
	case "chain":
		return typeCodeHash, true
	case "bytes":
		return typeCodeBytes, true
	case "url":
		return typeCodeUrl, true
	case "time":
		return typeCodeTime, true
	case "duration":
		return typeCodeDuration, true
	case "bigint":
		return typeCodeBigInt, true
	case "any":
		return typeCodeAny, true
	case "rawjson":
		return typeCodeRawJson, true
	case "float":
		return typeCodeFloat, true
	case "txid":
		return typeCodeTxid, true
	}
	return 0, false
}

// MarshalJSON marshals the type Code to JSON as a string.
func (v typeCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.String())
}

// UnmarshalJSON unmarshals the type Code from JSON as a string.
func (v *typeCode) UnmarshalJSON(data []byte) error {
	var s string
	err := json.Unmarshal(data, &s)
	if err != nil {
		return err
	}

	var ok bool
	*v, ok = typeCodeByName(s)
	if !ok || strings.ContainsRune(v.String(), ':') {
		return fmt.Errorf("invalid type Code %q", s)
	}
	return nil
}
