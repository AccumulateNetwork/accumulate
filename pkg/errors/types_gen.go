// Copyright 2022 The Accumulate Authors
//
// Use of this source code is governed by an MIT-style
// license that can be found in the LICENSE file or at
// https://opensource.org/licenses/MIT.

package errors

// GENERATED BY go run ./tools/cmd/gen-types. DO NOT EDIT.

//lint:file-ignore S1001,S1002,S1008,SA4013 generated code

import (
	"encoding/json"
	"io"

	"gitlab.com/accumulatenetwork/accumulate/pkg/types/encoding"
)

type CallSite struct {
	fieldsSet []bool
	FuncName  string `json:"funcName,omitempty" form:"funcName" query:"funcName" validate:"required"`
	File      string `json:"file,omitempty" form:"file" query:"file" validate:"required"`
	Line      int64  `json:"line,omitempty" form:"line" query:"line" validate:"required"`
	extraData []byte
}

var machine_CallSite = &encoding.Machine[*CallSite]{
	ExtraData: func(v *CallSite) *[]byte { return &v.extraData },
	Seen:      func(v *CallSite) *[]bool { return &v.fieldsSet },
	Fields: []*encoding.Field[*CallSite]{
		{Name: "FuncName", OmitEmpty: true, Required: true, Accessor: encoding.StringField[*CallSite](func(v *CallSite) *string { return &v.FuncName })},
		{Name: "File", OmitEmpty: true, Required: true, Accessor: encoding.StringField[*CallSite](func(v *CallSite) *string { return &v.File })},
		{Name: "Line", OmitEmpty: true, Required: true, Accessor: encoding.IntField[*CallSite](func(v *CallSite) *int64 { return &v.Line })},
	},
}

func (v *CallSite) IsValid() error                    { return machine_CallSite.IsValid(v) }
func (v *CallSite) Copy() *CallSite                   { return encoding.Copy(machine_CallSite, v) }
func (v *CallSite) CopyAsInterface() interface{}      { return v.Copy() }
func (v *CallSite) Equal(u *CallSite) bool            { return machine_CallSite.Equal(v, u) }
func (v *CallSite) MarshalBinary() ([]byte, error)    { return machine_CallSite.MarshalBinary(v) }
func (v *CallSite) UnmarshalBinary(data []byte) error { return machine_CallSite.Unmarshal(data, v) }
func (v *CallSite) UnmarshalBinaryFrom(rd io.Reader) error {
	return machine_CallSite.UnmarshalFrom(rd, v)
}

type Error struct {
	fieldsSet []bool
	Message   string      `json:"message,omitempty" form:"message" query:"message" validate:"required"`
	Code      Status      `json:"code,omitempty" form:"code" query:"code" validate:"required"`
	Cause     *Error      `json:"cause,omitempty" form:"cause" query:"cause" validate:"required"`
	CallStack []*CallSite `json:"callStack,omitempty" form:"callStack" query:"callStack" validate:"required"`
	extraData []byte
}

var machine_Error = &encoding.Machine[*Error]{
	ExtraData: func(v *Error) *[]byte { return &v.extraData },
	Seen:      func(v *Error) *[]bool { return &v.fieldsSet },
	Fields: []*encoding.Field[*Error]{
		{Name: "Message", OmitEmpty: true, Required: true, Accessor: encoding.StringField[*Error](func(v *Error) *string { return &v.Message })},
		{Name: "Code", OmitEmpty: true, Required: true, Accessor: encoding.EnumField[*Error, *Status, Status](func(v *Error) *Status { return &v.Code })},
		{Name: "Cause", OmitEmpty: true, Required: true, Accessor: encoding.StructPtrField[*Error, *Error, Error](func(v *Error) **Error { return &v.Cause })},
		{Name: "CallStack", OmitEmpty: true, Required: true, Accessor: encoding.SliceField[*Error, *CallSite, encoding.StructPtrField[encoding.SliceIndex[*CallSite], *CallSite, CallSite]](func(v *Error) *[]*CallSite { return &v.CallStack })},
	},
}

func (v *Error) IsValid() error                         { return machine_Error.IsValid(v) }
func (v *Error) Copy() *Error                           { return encoding.Copy(machine_Error, v) }
func (v *Error) CopyAsInterface() interface{}           { return v.Copy() }
func (v *Error) Equal(u *Error) bool                    { return machine_Error.Equal(v, u) }
func (v *Error) MarshalBinary() ([]byte, error)         { return machine_Error.MarshalBinary(v) }
func (v *Error) UnmarshalBinary(data []byte) error      { return machine_Error.Unmarshal(data, v) }
func (v *Error) UnmarshalBinaryFrom(rd io.Reader) error { return machine_Error.UnmarshalFrom(rd, v) }

func (v *Error) MarshalJSON() ([]byte, error) {
	u := struct {
		Message   string                       `json:"message,omitempty"`
		Code      Status                       `json:"code,omitempty"`
		CodeID    uint64                       `json:"codeID,omitempty"`
		Cause     *Error                       `json:"cause,omitempty"`
		CallStack encoding.JsonList[*CallSite] `json:"callStack,omitempty"`
	}{}
	u.Message = v.Message
	u.Code = v.Code
	u.CodeID = v.CodeID()
	u.Cause = v.Cause
	u.CallStack = v.CallStack
	return json.Marshal(&u)
}

func (v *Error) UnmarshalJSON(data []byte) error {
	u := struct {
		Message   string                       `json:"message,omitempty"`
		Code      Status                       `json:"code,omitempty"`
		CodeID    uint64                       `json:"codeID,omitempty"`
		Cause     *Error                       `json:"cause,omitempty"`
		CallStack encoding.JsonList[*CallSite] `json:"callStack,omitempty"`
	}{}
	u.Message = v.Message
	u.Code = v.Code
	u.CodeID = v.CodeID()
	u.Cause = v.Cause
	u.CallStack = v.CallStack
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	v.Message = u.Message
	v.Code = u.Code
	v.Cause = u.Cause
	v.CallStack = u.CallStack
	return nil
}
