package jsonrpc

// GENERATED BY go run ./tools/cmd/gen-types. DO NOT EDIT.

//lint:file-ignore S1001,S1002,S1008,SA4013 generated code

import (
	"encoding/json"

	"gitlab.com/accumulatenetwork/accumulate/internal/encoding"
	"gitlab.com/accumulatenetwork/accumulate/pkg/url"
	"gitlab.com/accumulatenetwork/accumulate/protocol"
)

type FaucetRequest struct {
	Account *url.URL `json:"account,omitempty" form:"account" query:"account" validate:"required"`
	SubmitOptions
}

type QueryRangeRequest struct {
	Account  *url.URL `json:"account,omitempty" form:"account" query:"account" validate:"required"`
	Fragment []string `json:"fragment,omitempty" form:"fragment" query:"fragment"`
	QueryRangeOptions
}

type QueryRecordRequest struct {
	Account  *url.URL `json:"account,omitempty" form:"account" query:"account" validate:"required"`
	Fragment []string `json:"fragment,omitempty" form:"fragment" query:"fragment"`
	QueryRecordOptions
}

type SubmitRequest struct {
	Envelope *protocol.Envelope `json:"envelope,omitempty" form:"envelope" query:"envelope" validate:"required"`
	SubmitOptions
}

func (v *FaucetRequest) MarshalJSON() ([]byte, error) {
	u := struct {
		Account *url.URL `json:"account,omitempty"`
	}{}
	u.Account = v.Account
	return json.Marshal(&u)
}

func (v *QueryRangeRequest) MarshalJSON() ([]byte, error) {
	u := struct {
		Account  *url.URL                  `json:"account,omitempty"`
		Fragment encoding.JsonList[string] `json:"fragment,omitempty"`
		Start    uint64                    `json:"start,omitempty"`
		Count    *uint64                   `json:"count,omitempty"`
		Expand   bool                      `json:"expand,omitempty"`
	}{}
	u.Account = v.Account
	u.Fragment = v.Fragment
	u.Start = v.QueryRangeOptions.Start
	u.Count = v.QueryRangeOptions.Count
	u.Expand = v.QueryRangeOptions.Expand
	return json.Marshal(&u)
}

func (v *QueryRecordRequest) MarshalJSON() ([]byte, error) {
	u := struct {
		Account        *url.URL                  `json:"account,omitempty"`
		Fragment       encoding.JsonList[string] `json:"fragment,omitempty"`
		IncludeReceipt bool                      `json:"includeReceipt,omitempty"`
	}{}
	u.Account = v.Account
	u.Fragment = v.Fragment
	u.IncludeReceipt = v.QueryRecordOptions.IncludeReceipt
	return json.Marshal(&u)
}

func (v *SubmitRequest) MarshalJSON() ([]byte, error) {
	u := struct {
		Envelope *protocol.Envelope `json:"envelope,omitempty"`
	}{}
	u.Envelope = v.Envelope
	return json.Marshal(&u)
}

func (v *FaucetRequest) UnmarshalJSON(data []byte) error {
	u := struct {
		Account *url.URL `json:"account,omitempty"`
	}{}
	u.Account = v.Account
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	v.Account = u.Account
	return nil
}

func (v *QueryRangeRequest) UnmarshalJSON(data []byte) error {
	u := struct {
		Account  *url.URL                  `json:"account,omitempty"`
		Fragment encoding.JsonList[string] `json:"fragment,omitempty"`
		Start    uint64                    `json:"start,omitempty"`
		Count    *uint64                   `json:"count,omitempty"`
		Expand   bool                      `json:"expand,omitempty"`
	}{}
	u.Account = v.Account
	u.Fragment = v.Fragment
	u.Start = v.QueryRangeOptions.Start
	u.Count = v.QueryRangeOptions.Count
	u.Expand = v.QueryRangeOptions.Expand
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	v.Account = u.Account
	v.Fragment = u.Fragment
	v.QueryRangeOptions.Start = u.Start
	v.QueryRangeOptions.Count = u.Count
	v.QueryRangeOptions.Expand = u.Expand
	return nil
}

func (v *QueryRecordRequest) UnmarshalJSON(data []byte) error {
	u := struct {
		Account        *url.URL                  `json:"account,omitempty"`
		Fragment       encoding.JsonList[string] `json:"fragment,omitempty"`
		IncludeReceipt bool                      `json:"includeReceipt,omitempty"`
	}{}
	u.Account = v.Account
	u.Fragment = v.Fragment
	u.IncludeReceipt = v.QueryRecordOptions.IncludeReceipt
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	v.Account = u.Account
	v.Fragment = u.Fragment
	v.QueryRecordOptions.IncludeReceipt = u.IncludeReceipt
	return nil
}

func (v *SubmitRequest) UnmarshalJSON(data []byte) error {
	u := struct {
		Envelope *protocol.Envelope `json:"envelope,omitempty"`
	}{}
	u.Envelope = v.Envelope
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	v.Envelope = u.Envelope
	return nil
}
