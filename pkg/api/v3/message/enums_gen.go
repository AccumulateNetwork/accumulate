// Copyright 2022 The Accumulate Authors
//
// Use of this source code is governed by an MIT-style
// license that can be found in the LICENSE file or at
// https://opensource.org/licenses/MIT.

package message

// GENERATED BY go run ./tools/cmd/gen-enum. DO NOT EDIT.

import (
	"encoding/json"
	"fmt"
	"strings"
)

// TypeNodeStatusRequest .
const TypeNodeStatusRequest Type = 1

// TypeNetworkStatusRequest .
const TypeNetworkStatusRequest Type = 2

// TypeMetricsRequest .
const TypeMetricsRequest Type = 3

// TypeQueryRequest .
const TypeQueryRequest Type = 4

// TypeSubmitRequest .
const TypeSubmitRequest Type = 5

// TypeValidateRequest .
const TypeValidateRequest Type = 6

// TypeErrorResponse .
const TypeErrorResponse Type = 32

// TypeNodeStatusResponse .
const TypeNodeStatusResponse Type = 33

// TypeNetworkStatusResponse .
const TypeNetworkStatusResponse Type = 34

// TypeMetricsResponse .
const TypeMetricsResponse Type = 35

// TypeRecordResponse .
const TypeRecordResponse Type = 36

// TypeSubmitResponse .
const TypeSubmitResponse Type = 37

// TypeValidateResponse .
const TypeValidateResponse Type = 38

// TypePrivateSequenceRequest .
const TypePrivateSequenceRequest Type = 128

// TypePrivateSequenceResponse .
const TypePrivateSequenceResponse Type = 129

// TypeAddressed .
const TypeAddressed Type = 255

// GetEnumValue returns the value of the Type
func (v Type) GetEnumValue() uint64 { return uint64(v) }

// SetEnumValue sets the value. SetEnumValue returns false if the value is invalid.
func (v *Type) SetEnumValue(id uint64) bool {
	u := Type(id)
	switch u {
	case TypeNodeStatusRequest, TypeNetworkStatusRequest, TypeMetricsRequest, TypeQueryRequest, TypeSubmitRequest, TypeValidateRequest, TypeErrorResponse, TypeNodeStatusResponse, TypeNetworkStatusResponse, TypeMetricsResponse, TypeRecordResponse, TypeSubmitResponse, TypeValidateResponse, TypePrivateSequenceRequest, TypePrivateSequenceResponse, TypeAddressed:
		*v = u
		return true
	default:
		return false
	}
}

// String returns the name of the Type.
func (v Type) String() string {
	switch v {
	case TypeNodeStatusRequest:
		return "nodeStatusRequest"
	case TypeNetworkStatusRequest:
		return "networkStatusRequest"
	case TypeMetricsRequest:
		return "metricsRequest"
	case TypeQueryRequest:
		return "queryRequest"
	case TypeSubmitRequest:
		return "submitRequest"
	case TypeValidateRequest:
		return "validateRequest"
	case TypeErrorResponse:
		return "errorResponse"
	case TypeNodeStatusResponse:
		return "nodeStatusResponse"
	case TypeNetworkStatusResponse:
		return "networkStatusResponse"
	case TypeMetricsResponse:
		return "metricsResponse"
	case TypeRecordResponse:
		return "recordResponse"
	case TypeSubmitResponse:
		return "submitResponse"
	case TypeValidateResponse:
		return "validateResponse"
	case TypePrivateSequenceRequest:
		return "privateSequenceRequest"
	case TypePrivateSequenceResponse:
		return "privateSequenceResponse"
	case TypeAddressed:
		return "addressed"
	default:
		return fmt.Sprintf("Type:%d", v)
	}
}

// TypeByName returns the named Type.
func TypeByName(name string) (Type, bool) {
	switch strings.ToLower(name) {
	case "nodestatusrequest":
		return TypeNodeStatusRequest, true
	case "networkstatusrequest":
		return TypeNetworkStatusRequest, true
	case "metricsrequest":
		return TypeMetricsRequest, true
	case "queryrequest":
		return TypeQueryRequest, true
	case "submitrequest":
		return TypeSubmitRequest, true
	case "validaterequest":
		return TypeValidateRequest, true
	case "errorresponse":
		return TypeErrorResponse, true
	case "nodestatusresponse":
		return TypeNodeStatusResponse, true
	case "networkstatusresponse":
		return TypeNetworkStatusResponse, true
	case "metricsresponse":
		return TypeMetricsResponse, true
	case "recordresponse":
		return TypeRecordResponse, true
	case "submitresponse":
		return TypeSubmitResponse, true
	case "validateresponse":
		return TypeValidateResponse, true
	case "privatesequencerequest":
		return TypePrivateSequenceRequest, true
	case "privatesequenceresponse":
		return TypePrivateSequenceResponse, true
	case "addressed":
		return TypeAddressed, true
	default:
		return 0, false
	}
}

// MarshalJSON marshals the Type to JSON as a string.
func (v Type) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.String())
}

// UnmarshalJSON unmarshals the Type from JSON as a string.
func (v *Type) UnmarshalJSON(data []byte) error {
	var s string
	err := json.Unmarshal(data, &s)
	if err != nil {
		return err
	}

	var ok bool
	*v, ok = TypeByName(s)
	if !ok || strings.ContainsRune(v.String(), ':') {
		return fmt.Errorf("invalid Type %q", s)
	}
	return nil
}
