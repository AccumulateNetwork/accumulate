// Copyright 2022 The Accumulate Authors
//
// Use of this source code is governed by an MIT-style
// license that can be found in the LICENSE file or at
// https://opensource.org/licenses/MIT.

package message

// GENERATED BY go run ./tools/cmd/gen-types. DO NOT EDIT.

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"

	"gitlab.com/accumulatenetwork/accumulate/pkg/types/encoding"
)

// New creates a new Message for the specified Type.
func New(typ Type) (Message, error) {
	switch typ {
	case TypeAddressed:
		return new(Addressed), nil
	case TypeErrorResponse:
		return new(ErrorResponse), nil
	case TypeEvent:
		return new(EventMessage), nil
	case TypeFaucetRequest:
		return new(FaucetRequest), nil
	case TypeFaucetResponse:
		return new(FaucetResponse), nil
	case TypeMetricsRequest:
		return new(MetricsRequest), nil
	case TypeMetricsResponse:
		return new(MetricsResponse), nil
	case TypeNetworkStatusRequest:
		return new(NetworkStatusRequest), nil
	case TypeNetworkStatusResponse:
		return new(NetworkStatusResponse), nil
	case TypeNodeStatusRequest:
		return new(NodeStatusRequest), nil
	case TypeNodeStatusResponse:
		return new(NodeStatusResponse), nil
	case TypePrivateSequenceRequest:
		return new(PrivateSequenceRequest), nil
	case TypePrivateSequenceResponse:
		return new(PrivateSequenceResponse), nil
	case TypeQueryRequest:
		return new(QueryRequest), nil
	case TypeRecordResponse:
		return new(RecordResponse), nil
	case TypeSubmitRequest:
		return new(SubmitRequest), nil
	case TypeSubmitResponse:
		return new(SubmitResponse), nil
	case TypeSubscribeRequest:
		return new(SubscribeRequest), nil
	case TypeSubscribeResponse:
		return new(SubscribeResponse), nil
	case TypeValidateRequest:
		return new(ValidateRequest), nil
	case TypeValidateResponse:
		return new(ValidateResponse), nil
	default:
		return nil, fmt.Errorf("unknown message %v", typ)
	}
}

// Equal is used to compare the values of the union
func Equal(a, b Message) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	switch a := a.(type) {
	case *Addressed:
		b, ok := b.(*Addressed)
		return ok && a.Equal(b)
	case *ErrorResponse:
		b, ok := b.(*ErrorResponse)
		return ok && a.Equal(b)
	case *EventMessage:
		b, ok := b.(*EventMessage)
		return ok && a.Equal(b)
	case *FaucetRequest:
		b, ok := b.(*FaucetRequest)
		return ok && a.Equal(b)
	case *FaucetResponse:
		b, ok := b.(*FaucetResponse)
		return ok && a.Equal(b)
	case *MetricsRequest:
		b, ok := b.(*MetricsRequest)
		return ok && a.Equal(b)
	case *MetricsResponse:
		b, ok := b.(*MetricsResponse)
		return ok && a.Equal(b)
	case *NetworkStatusRequest:
		b, ok := b.(*NetworkStatusRequest)
		return ok && a.Equal(b)
	case *NetworkStatusResponse:
		b, ok := b.(*NetworkStatusResponse)
		return ok && a.Equal(b)
	case *NodeStatusRequest:
		b, ok := b.(*NodeStatusRequest)
		return ok && a.Equal(b)
	case *NodeStatusResponse:
		b, ok := b.(*NodeStatusResponse)
		return ok && a.Equal(b)
	case *PrivateSequenceRequest:
		b, ok := b.(*PrivateSequenceRequest)
		return ok && a.Equal(b)
	case *PrivateSequenceResponse:
		b, ok := b.(*PrivateSequenceResponse)
		return ok && a.Equal(b)
	case *QueryRequest:
		b, ok := b.(*QueryRequest)
		return ok && a.Equal(b)
	case *RecordResponse:
		b, ok := b.(*RecordResponse)
		return ok && a.Equal(b)
	case *SubmitRequest:
		b, ok := b.(*SubmitRequest)
		return ok && a.Equal(b)
	case *SubmitResponse:
		b, ok := b.(*SubmitResponse)
		return ok && a.Equal(b)
	case *SubscribeRequest:
		b, ok := b.(*SubscribeRequest)
		return ok && a.Equal(b)
	case *SubscribeResponse:
		b, ok := b.(*SubscribeResponse)
		return ok && a.Equal(b)
	case *ValidateRequest:
		b, ok := b.(*ValidateRequest)
		return ok && a.Equal(b)
	case *ValidateResponse:
		b, ok := b.(*ValidateResponse)
		return ok && a.Equal(b)
	default:
		return false
	}
}

// Copy copies a Message.
func Copy(v Message) Message {
	switch v := v.(type) {
	case *Addressed:
		return v.Copy()
	case *ErrorResponse:
		return v.Copy()
	case *EventMessage:
		return v.Copy()
	case *FaucetRequest:
		return v.Copy()
	case *FaucetResponse:
		return v.Copy()
	case *MetricsRequest:
		return v.Copy()
	case *MetricsResponse:
		return v.Copy()
	case *NetworkStatusRequest:
		return v.Copy()
	case *NetworkStatusResponse:
		return v.Copy()
	case *NodeStatusRequest:
		return v.Copy()
	case *NodeStatusResponse:
		return v.Copy()
	case *PrivateSequenceRequest:
		return v.Copy()
	case *PrivateSequenceResponse:
		return v.Copy()
	case *QueryRequest:
		return v.Copy()
	case *RecordResponse:
		return v.Copy()
	case *SubmitRequest:
		return v.Copy()
	case *SubmitResponse:
		return v.Copy()
	case *SubscribeRequest:
		return v.Copy()
	case *SubscribeResponse:
		return v.Copy()
	case *ValidateRequest:
		return v.Copy()
	case *ValidateResponse:
		return v.Copy()
	default:
		return v.CopyAsInterface().(Message)
	}
}

// Unmarshal unmarshals a Message.
func Unmarshal(data []byte) (Message, error) {
	return UnmarshalFrom(bytes.NewReader(data))
}

// UnmarshalFrom unmarshals a Message.
func UnmarshalFrom(rd io.Reader) (Message, error) {
	reader := encoding.NewReader(rd)

	// Read the type code
	var typ Type
	if !reader.ReadEnum(1, &typ) {
		return nil, fmt.Errorf("field Type: missing")
	}

	// Create a new message
	v, err := New(Type(typ))
	if err != nil {
		return nil, err
	}

	// Unmarshal the rest of the message
	err = v.UnmarshalFieldsFrom(reader)
	if err != nil {
		return nil, err
	}

	return v, nil
}

// UnmarshalJson unmarshals a Message.
func UnmarshalJSON(data []byte) (Message, error) {
	var typ *struct{ Type Type }
	err := json.Unmarshal(data, &typ)
	if err != nil {
		return nil, err
	}

	if typ == nil {
		return nil, nil
	}

	acnt, err := New(typ.Type)
	if err != nil {
		return nil, err
	}

	err = json.Unmarshal(data, acnt)
	if err != nil {
		return nil, err
	}

	return acnt, nil
}
