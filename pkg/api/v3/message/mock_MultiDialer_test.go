// Code generated by mockery v2.42.3. DO NOT EDIT.

package message

import (
	context "context"

	multiaddr "github.com/multiformats/go-multiaddr"
	mock "github.com/stretchr/testify/mock"
)

// MockMultiDialer is an autogenerated mock type for the MultiDialer type
type MockMultiDialer struct {
	mock.Mock
}

type MockMultiDialer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMultiDialer) EXPECT() *MockMultiDialer_Expecter {
	return &MockMultiDialer_Expecter{mock: &_m.Mock}
}

// BadDial provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockMultiDialer) BadDial(_a0 context.Context, _a1 multiaddr.Multiaddr, _a2 StreamOf[Message], _a3 error) bool {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	if len(ret) == 0 {
		panic("no return value specified for BadDial")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, multiaddr.Multiaddr, StreamOf[Message], error) bool); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockMultiDialer_BadDial_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BadDial'
type MockMultiDialer_BadDial_Call struct {
	*mock.Call
}

// BadDial is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 multiaddr.Multiaddr
//   - _a2 StreamOf[Message]
//   - _a3 error
func (_e *MockMultiDialer_Expecter) BadDial(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 interface{}) *MockMultiDialer_BadDial_Call {
	return &MockMultiDialer_BadDial_Call{Call: _e.mock.On("BadDial", _a0, _a1, _a2, _a3)}
}

func (_c *MockMultiDialer_BadDial_Call) Run(run func(_a0 context.Context, _a1 multiaddr.Multiaddr, _a2 StreamOf[Message], _a3 error)) *MockMultiDialer_BadDial_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(multiaddr.Multiaddr), args[2].(StreamOf[Message]), args[3].(error))
	})
	return _c
}

func (_c *MockMultiDialer_BadDial_Call) Return(_a0 bool) *MockMultiDialer_BadDial_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMultiDialer_BadDial_Call) RunAndReturn(run func(context.Context, multiaddr.Multiaddr, StreamOf[Message], error) bool) *MockMultiDialer_BadDial_Call {
	_c.Call.Return(run)
	return _c
}

// Dial provides a mock function with given fields: _a0, _a1
func (_m *MockMultiDialer) Dial(_a0 context.Context, _a1 multiaddr.Multiaddr) (StreamOf[Message], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Dial")
	}

	var r0 StreamOf[Message]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, multiaddr.Multiaddr) (StreamOf[Message], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, multiaddr.Multiaddr) StreamOf[Message]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(StreamOf[Message])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, multiaddr.Multiaddr) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMultiDialer_Dial_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Dial'
type MockMultiDialer_Dial_Call struct {
	*mock.Call
}

// Dial is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 multiaddr.Multiaddr
func (_e *MockMultiDialer_Expecter) Dial(_a0 interface{}, _a1 interface{}) *MockMultiDialer_Dial_Call {
	return &MockMultiDialer_Dial_Call{Call: _e.mock.On("Dial", _a0, _a1)}
}

func (_c *MockMultiDialer_Dial_Call) Run(run func(_a0 context.Context, _a1 multiaddr.Multiaddr)) *MockMultiDialer_Dial_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(multiaddr.Multiaddr))
	})
	return _c
}

func (_c *MockMultiDialer_Dial_Call) Return(_a0 StreamOf[Message], _a1 error) *MockMultiDialer_Dial_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMultiDialer_Dial_Call) RunAndReturn(run func(context.Context, multiaddr.Multiaddr) (StreamOf[Message], error)) *MockMultiDialer_Dial_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMultiDialer creates a new instance of MockMultiDialer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMultiDialer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMultiDialer {
	mock := &MockMultiDialer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
