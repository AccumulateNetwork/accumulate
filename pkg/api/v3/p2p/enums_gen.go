// Copyright 2023 The Accumulate Authors
//
// Use of this source code is governed by an MIT-style
// license that can be found in the LICENSE file or at
// https://opensource.org/licenses/MIT.

package p2p

// GENERATED BY go run ./tools/cmd/gen-enum. DO NOT EDIT.

import (
	"encoding/json"
	"fmt"
	"strings"
)

// eventTypeServiceRegistered .
const eventTypeServiceRegistered eventType = 1

// GetEnumValue returns the value of the event Type
func (v eventType) GetEnumValue() uint64 { return uint64(v) }

// SetEnumValue sets the value. SetEnumValue returns false if the value is invalid.
func (v *eventType) SetEnumValue(id uint64) bool {
	u := eventType(id)
	switch u {
	case eventTypeServiceRegistered:
		*v = u
		return true
	default:
		return false
	}
}

// String returns the name of the event Type.
func (v eventType) String() string {
	switch v {
	case eventTypeServiceRegistered:
		return "serviceRegistered"
	default:
		return fmt.Sprintf("eventType:%d", v)
	}
}

// eventTypeByName returns the named event Type.
func eventTypeByName(name string) (eventType, bool) {
	switch strings.ToLower(name) {
	case "serviceregistered":
		return eventTypeServiceRegistered, true
	default:
		return 0, false
	}
}

// MarshalJSON marshals the event Type to JSON as a string.
func (v eventType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.String())
}

// UnmarshalJSON unmarshals the event Type from JSON as a string.
func (v *eventType) UnmarshalJSON(data []byte) error {
	var s string
	err := json.Unmarshal(data, &s)
	if err != nil {
		return err
	}

	var ok bool
	*v, ok = eventTypeByName(s)
	if !ok || strings.ContainsRune(v.String(), ':') {
		return fmt.Errorf("invalid event Type %q", s)
	}
	return nil
}
