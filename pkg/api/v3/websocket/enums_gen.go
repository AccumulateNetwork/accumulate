// Copyright 2022 The Accumulate Authors
//
// Use of this source code is governed by an MIT-style
// license that can be found in the LICENSE file or at
// https://opensource.org/licenses/MIT.

package websocket

// GENERATED BY go run ./tools/cmd/gen-enum. DO NOT EDIT.

import (
	"encoding/json"
	"fmt"
	"strings"
)

// StreamStatusOpen .
const StreamStatusOpen StreamStatus = 1

// StreamStatusClosed .
const StreamStatusClosed StreamStatus = 2

// GetEnumValue returns the value of the Stream Status
func (v StreamStatus) GetEnumValue() uint64 { return uint64(v) }

// SetEnumValue sets the value. SetEnumValue returns false if the value is invalid.
func (v *StreamStatus) SetEnumValue(id uint64) bool {
	u := StreamStatus(id)
	switch u {
	case StreamStatusOpen, StreamStatusClosed:
		*v = u
		return true
	default:
		return false
	}
}

// String returns the name of the Stream Status.
func (v StreamStatus) String() string {
	switch v {
	case StreamStatusOpen:
		return "open"
	case StreamStatusClosed:
		return "closed"
	default:
		return fmt.Sprintf("StreamStatus:%d", v)
	}
}

// StreamStatusByName returns the named Stream Status.
func StreamStatusByName(name string) (StreamStatus, bool) {
	switch strings.ToLower(name) {
	case "open":
		return StreamStatusOpen, true
	case "closed":
		return StreamStatusClosed, true
	default:
		return 0, false
	}
}

// MarshalJSON marshals the Stream Status to JSON as a string.
func (v StreamStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.String())
}

// UnmarshalJSON unmarshals the Stream Status from JSON as a string.
func (v *StreamStatus) UnmarshalJSON(data []byte) error {
	var s string
	err := json.Unmarshal(data, &s)
	if err != nil {
		return err
	}

	var ok bool
	*v, ok = StreamStatusByName(s)
	if !ok || strings.ContainsRune(v.String(), ':') {
		return fmt.Errorf("invalid Stream Status %q", s)
	}
	return nil
}
