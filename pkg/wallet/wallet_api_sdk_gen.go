package wallet

// GENERATED BY go run ./tools/cmd/gen-sdk. DO NOT EDIT.

import (
	"context"

	"gitlab.com/accumulatenetwork/cmd/accumulate/walletd/api"
)

// DecodeTransaction unmarshal a binary transaction body and return the json transaction body.
func (c *Client) DecodeTransaction(ctx context.Context, req *api.DecodeTransactionRequest) (*api.DecodeTransactionResponse, error) {
	var resp api.DecodeTransactionResponse

	err := c.RequestAPIv2(ctx, "decode-transaction", req, &resp)
	if err != nil {
		return nil, err
	}

	return &resp, nil
}

// EncodeTransaction binary marshal a json transaction body and return encoded hex.
func (c *Client) EncodeTransaction(ctx context.Context, req *api.EncodeTransactionRequest) (*api.EncodeTransactionResponse, error) {
	var resp api.EncodeTransactionResponse

	err := c.RequestAPIv2(ctx, "encode-transaction", req, &resp)
	if err != nil {
		return nil, err
	}

	return &resp, nil
}

// KeyList returns a list of available keys in the wallet.
func (c *Client) KeyList(ctx context.Context, req *api.KeyListRequest) (interface{}, error) {
	var resp interface{}

	err := c.RequestAPIv2(ctx, "key-list", req, &resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

// Sign sign a transaction.
func (c *Client) Sign(ctx context.Context, req *api.SignRequest) (interface{}, error) {
	var resp interface{}

	err := c.RequestAPIv2(ctx, "sign", req, &resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

// Version returns the version of the wallet daemon.
func (c *Client) Version(ctx context.Context) (*api.VersionResponse, error) {
	var req struct{}
	var resp api.VersionResponse

	err := c.RequestAPIv2(ctx, "version", req, &resp)
	if err != nil {
		return nil, err
	}

	return &resp, nil
}
