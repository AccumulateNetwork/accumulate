// Copyright 2022 The Accumulate Authors
//
// Use of this source code is governed by an MIT-style
// license that can be found in the LICENSE file or at
// https://opensource.org/licenses/MIT.

package bpt

// GENERATED BY go run ./tools/cmd/gen-model. DO NOT EDIT.

//lint:file-ignore S1008,U1000 generated code

import (
	"gitlab.com/accumulatenetwork/accumulate/internal/logging"
	record "gitlab.com/accumulatenetwork/accumulate/pkg/database"
	"gitlab.com/accumulatenetwork/accumulate/pkg/database/values"
	"gitlab.com/accumulatenetwork/accumulate/pkg/errors"
)

type bpt struct {
	logger  logging.OptionalLogger
	store   record.Store
	key     *record.Key
	label   string
	pending map[[32]byte][32]byte

	state values.Value[*parameters]
	root  *rootRecord
}

func (c *bpt) Key() *record.Key { return c.key }

func (c *bpt) baseIsDirty() bool {
	if c == nil {
		return false
	}

	if values.IsDirty(c.state) {
		return true
	}
	if values.IsDirty(c.root) {
		return true
	}

	return false
}

func (c *bpt) baseWalk(opts record.WalkOptions, fn record.WalkFunc) error {
	if c == nil {
		return nil
	}

	skip, err := values.WalkComposite(c, opts, fn)
	if skip || err != nil {
		return errors.UnknownError.Wrap(err)
	}
	values.Walk(&err, c.state, opts, fn)
	values.Walk(&err, c.root, opts, fn)
	return err
}

func (c *bpt) baseCommit() error {
	if c == nil {
		return nil
	}

	var err error
	values.Commit(&err, c.state)
	values.Commit(&err, c.root)

	return err
}
