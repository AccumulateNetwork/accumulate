// Copyright 2023 The Accumulate Authors
//
// Use of this source code is governed by an MIT-style
// license that can be found in the LICENSE file or at
// https://opensource.org/licenses/MIT.

package block

// GENERATED BY go run ./tools/cmd/gen-enum. DO NOT EDIT.

import (
	"encoding/json"
	"fmt"
	"strings"
)

// entryTypeStartBlock .
const entryTypeStartBlock entryType = 1

// entryTypeRecord .
const entryTypeRecord entryType = 2

// entryTypeEndBlock .
const entryTypeEndBlock entryType = 3

// GetEnumValue returns the value of the entry Type
func (v entryType) GetEnumValue() uint64 { return uint64(v) }

// SetEnumValue sets the value. SetEnumValue returns false if the value is invalid.
func (v *entryType) SetEnumValue(id uint64) bool {
	u := entryType(id)
	switch u {
	case entryTypeStartBlock, entryTypeRecord, entryTypeEndBlock:
		*v = u
		return true
	}
	return false
}

// String returns the name of the entry Type.
func (v entryType) String() string {
	switch v {
	case entryTypeStartBlock:
		return "startBlock"
	case entryTypeRecord:
		return "record"
	case entryTypeEndBlock:
		return "endBlock"
	}
	return fmt.Sprintf("entryType:%d", v)
}

// entryTypeByName returns the named entry Type.
func entryTypeByName(name string) (entryType, bool) {
	switch strings.ToLower(name) {
	case "startblock":
		return entryTypeStartBlock, true
	case "record":
		return entryTypeRecord, true
	case "endblock":
		return entryTypeEndBlock, true
	}
	return 0, false
}

// MarshalJSON marshals the entry Type to JSON as a string.
func (v entryType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.String())
}

// UnmarshalJSON unmarshals the entry Type from JSON as a string.
func (v *entryType) UnmarshalJSON(data []byte) error {
	var s string
	err := json.Unmarshal(data, &s)
	if err != nil {
		return err
	}

	var ok bool
	*v, ok = entryTypeByName(s)
	if !ok || strings.ContainsRune(v.String(), ':') {
		return fmt.Errorf("invalid entry Type %q", s)
	}
	return nil
}
