// Copyright 2022 The Accumulate Authors
//
// Use of this source code is governed by an MIT-style
// license that can be found in the LICENSE file or at
// https://opensource.org/licenses/MIT.

package block

// GENERATED BY go run ./tools/cmd/gen-types. DO NOT EDIT.

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"

	"gitlab.com/accumulatenetwork/accumulate/pkg/types/encoding"
)

// newEntry creates a new entry for the specified entryType.
func newEntry(typ entryType) (entry, error) {
	switch typ {
	case entryTypeEndBlock:
		return new(endBlockEntry), nil
	case entryTypeRecord:
		return new(recordEntry), nil
	case entryTypeStartBlock:
		return new(startBlockEntry), nil
	}
	return nil, fmt.Errorf("unknown entry %v", typ)
}

// equalEntry is used to compare the values of the union
func equalEntry(a, b entry) bool {
	if a == b {
		return true
	}
	switch a := a.(type) {
	case *endBlockEntry:
		if a == nil {
			return b == nil
		}
		b, ok := b.(*endBlockEntry)
		return ok && a.Equal(b)
	case *recordEntry:
		if a == nil {
			return b == nil
		}
		b, ok := b.(*recordEntry)
		return ok && a.Equal(b)
	case *startBlockEntry:
		if a == nil {
			return b == nil
		}
		b, ok := b.(*startBlockEntry)
		return ok && a.Equal(b)
	}
	return false
}

// copyEntry copies a entry.
func copyEntry(v entry) entry {
	switch v := v.(type) {
	case *endBlockEntry:
		return v.Copy()
	case *recordEntry:
		return v.Copy()
	case *startBlockEntry:
		return v.Copy()
	default:
		return v.CopyAsInterface().(entry)
	}
}

// unmarshalEntry unmarshals a entry.
func unmarshalEntry(data []byte) (entry, error) {
	return unmarshalEntryFrom(bytes.NewReader(data))
}

// unmarshalEntryFrom unmarshals a entry.
func unmarshalEntryFrom(rd io.Reader) (entry, error) {
	reader := encoding.NewReader(rd)

	// Read the type code
	var typ entryType
	if !reader.ReadEnum(1, &typ) {
		if reader.IsEmpty() {
			return nil, nil
		}
		return nil, fmt.Errorf("field Type: missing")
	}

	// Create a new entry
	v, err := newEntry(entryType(typ))
	if err != nil {
		return nil, err
	}

	// Unmarshal the rest of the entry
	err = v.UnmarshalFieldsFrom(reader)
	if err != nil {
		return nil, err
	}

	return v, nil
}

// unmarshalEntryJson unmarshals a entry.
func unmarshalEntryJSON(data []byte) (entry, error) {
	var typ *struct{ Type entryType }
	err := json.Unmarshal(data, &typ)
	if err != nil {
		return nil, err
	}

	if typ == nil {
		return nil, nil
	}

	acnt, err := newEntry(typ.Type)
	if err != nil {
		return nil, err
	}

	err = json.Unmarshal(data, acnt)
	if err != nil {
		return nil, err
	}

	return acnt, nil
}
