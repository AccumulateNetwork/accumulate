// Code generated by gitlab.com/accumulatenetwork/core/schema. DO NOT EDIT.

package indexing

import (
	record "gitlab.com/accumulatenetwork/accumulate/pkg/types/record"
	"gitlab.com/accumulatenetwork/core/schema/pkg/binary"
	"gitlab.com/accumulatenetwork/core/schema/pkg/widget"
)

type Block[V any] struct {
	Level   uint64
	Index   uint64
	Entries []*Entry[V]
}

func wBlock[V any]() *widget.Composite[*Block[V], Block[V]] {
	return widget.ForComposite(widget.Fields[Block[V]]{
		{Name: "level", ID: 1, Widget: widget.ForUint(func(v *Block[V]) *uint64 { return &v.Level })},
		{Name: "index", ID: 2, Widget: widget.ForUint(func(v *Block[V]) *uint64 { return &v.Index })},
		{Name: "entries", ID: 3, Widget: widget.ForArray(widget.ForCompositePtr(wEntry[V]().Fields, widget.GetElem[[]*Entry[V]]), func(v *Block[V]) *[]*Entry[V] { return &v.Entries })},
	}, widget.Identity[*Block[V]])
}

// Copy returns a copy of the Block.
func (v *Block[V]) Copy() *Block[V] {
	if v == nil {
		return nil
	}
	var u = new(Block[V])
	wBlock[V]().CopyTo(u, v)
	return u
}

// EqualBlock returns true if V is equal to U.
func (v *Block[V]) Equal(u *Block[V]) bool {
	return wBlock[V]().Equal(v, u)
}

// MarshalBinary marshals the Block to JSON.
func (v *Block[V]) MarshalJSON() ([]byte, error) {
	return widget.MarshalJSON(v, wBlock[V]())
}

// UnmarshalJSON unmarshals the Block from JSON.
func (v *Block[V]) UnmarshalJSON(b []byte) error {
	return widget.UnmarshalJSON(v, wBlock[V](), b)
}

// MarshalBinary marshals the Block to bytes using [binary].
func (v *Block[V]) MarshalBinary() ([]byte, error) {
	return widget.MarshalBinary(v, wBlock[V]())
}

// MarshalBinary marshals the Block to a [binary.Encoder].
func (v *Block[V]) MarshalBinaryV2(enc *binary.Encoder) error {
	return wBlock[V]().MarshalBinary(enc, v)
}

// UnmarshalBinary unmarshals the Block from bytes using [binary].
func (v *Block[V]) UnmarshalBinary(b []byte) error {
	return widget.UnmarshalBinary(v, wBlock[V](), b)
}

// UnmarshalBinary unmarshals the Block from a [binary.Decoder].
func (v *Block[V]) UnmarshalBinaryV2(dec *binary.Decoder) error {
	return wBlock[V]().UnmarshalBinary(dec, v)
}

type Entry[V any] struct {
	// Index is used internally for multi-level indices.
	Index uint64
	// Key is the key being indexed.
	Key *record.Key
	// Value is the value being indexed.
	Value *Value[V]
}

func wEntry[V any]() *widget.Composite[*Entry[V], Entry[V]] {
	return widget.ForComposite(widget.Fields[Entry[V]]{
		{Name: "index", ID: 1, Widget: widget.ForUint(func(v *Entry[V]) *uint64 { return &v.Index })},
		{Name: "key", ID: 2, Widget: widget.ForValue(func(v *Entry[V]) **record.Key { return &v.Key })},
		{Name: "value", ID: 3, Widget: widget.ForPtr(wValue, func(v *Entry[V]) **Value[V] { return &v.Value })},
	}, widget.Identity[*Entry[V]])
}

// Copy returns a copy of the Entry.
func (v *Entry[V]) Copy() *Entry[V] {
	if v == nil {
		return nil
	}
	var u = new(Entry[V])
	wEntry[V]().CopyTo(u, v)
	return u
}

// EqualEntry returns true if V is equal to U.
func (v *Entry[V]) Equal(u *Entry[V]) bool {
	return wEntry[V]().Equal(v, u)
}

// MarshalBinary marshals the Entry to JSON.
func (v *Entry[V]) MarshalJSON() ([]byte, error) {
	return widget.MarshalJSON(v, wEntry[V]())
}

// UnmarshalJSON unmarshals the Entry from JSON.
func (v *Entry[V]) UnmarshalJSON(b []byte) error {
	return widget.UnmarshalJSON(v, wEntry[V](), b)
}

// MarshalBinary marshals the Entry to bytes using [binary].
func (v *Entry[V]) MarshalBinary() ([]byte, error) {
	return widget.MarshalBinary(v, wEntry[V]())
}

// MarshalBinary marshals the Entry to a [binary.Encoder].
func (v *Entry[V]) MarshalBinaryV2(enc *binary.Encoder) error {
	return wEntry[V]().MarshalBinary(enc, v)
}

// UnmarshalBinary unmarshals the Entry from bytes using [binary].
func (v *Entry[V]) UnmarshalBinary(b []byte) error {
	return widget.UnmarshalBinary(v, wEntry[V](), b)
}

// UnmarshalBinary unmarshals the Entry from a [binary.Decoder].
func (v *Entry[V]) UnmarshalBinaryV2(dec *binary.Decoder) error {
	return wEntry[V]().UnmarshalBinary(dec, v)
}

type Range struct {
	Start uint64
	End   uint64
}

var wRange = widget.ForComposite(widget.Fields[Range]{
	{Name: "start", ID: 1, Widget: widget.ForUint(func(v *Range) *uint64 { return &v.Start })},
	{Name: "end", ID: 2, Widget: widget.ForUint(func(v *Range) *uint64 { return &v.End })},
}, widget.Identity[*Range])

// Copy returns a copy of the Range.
func (v *Range) Copy() *Range {
	if v == nil {
		return nil
	}
	var u = new(Range)
	wRange.CopyTo(u, v)
	return u
}

// EqualRange returns true if V is equal to U.
func (v *Range) Equal(u *Range) bool {
	return wRange.Equal(v, u)
}

// MarshalBinary marshals the Range to JSON.
func (v *Range) MarshalJSON() ([]byte, error) {
	return widget.MarshalJSON(v, wRange)
}

// UnmarshalJSON unmarshals the Range from JSON.
func (v *Range) UnmarshalJSON(b []byte) error {
	return widget.UnmarshalJSON(v, wRange, b)
}

// MarshalBinary marshals the Range to bytes using [binary].
func (v *Range) MarshalBinary() ([]byte, error) {
	return widget.MarshalBinary(v, wRange)
}

// MarshalBinary marshals the Range to a [binary.Encoder].
func (v *Range) MarshalBinaryV2(enc *binary.Encoder) error {
	return wRange.MarshalBinary(enc, v)
}

// UnmarshalBinary unmarshals the Range from bytes using [binary].
func (v *Range) UnmarshalBinary(b []byte) error {
	return widget.UnmarshalBinary(v, wRange, b)
}

// UnmarshalBinary unmarshals the Range from a [binary.Decoder].
func (v *Range) UnmarshalBinaryV2(dec *binary.Decoder) error {
	return wRange.UnmarshalBinary(dec, v)
}

type RangeSet []Range

var wRangeSet = widget.ForArray(widget.ForComposite(wRange.Fields, widget.GetElem[RangeSet]), widget.Identity[*RangeSet])

// Copy returns a copy of the RangeSet.
func (v RangeSet) Copy() RangeSet {
	var u RangeSet
	wRangeSet.CopyTo(&u, &v)
	return u
}

// EqualRangeSet returns true if V is equal to U.
func (v RangeSet) Equal(u RangeSet) bool {
	return wRangeSet.Equal(&v, &u)
}

// MarshalBinary marshals the RangeSet to JSON.
func (v RangeSet) MarshalJSON() ([]byte, error) {
	return widget.MarshalJSON(&v, wRangeSet)
}

// UnmarshalJSON unmarshals the RangeSet from JSON.
func (v *RangeSet) UnmarshalJSON(b []byte) error {
	return widget.UnmarshalJSON(v, wRangeSet, b)
}

// MarshalBinary marshals the RangeSet to bytes using [binary].
func (v RangeSet) MarshalBinary() ([]byte, error) {
	return widget.MarshalBinary(&v, wRangeSet)
}

// MarshalBinary marshals the RangeSet to a [binary.Encoder].
func (v RangeSet) MarshalBinaryV2(enc *binary.Encoder) error {
	return wRangeSet.MarshalBinary(enc, &v)
}

// UnmarshalBinary unmarshals the RangeSet from bytes using [binary].
func (v *RangeSet) UnmarshalBinary(b []byte) error {
	return widget.UnmarshalBinary(v, wRangeSet, b)
}

// UnmarshalBinary unmarshals the RangeSet from a [binary.Decoder].
func (v *RangeSet) UnmarshalBinaryV2(dec *binary.Decoder) error {
	return wRangeSet.UnmarshalBinary(dec, v)
}

type Value[V any] struct {
	data    []byte
	dataOk  bool
	value   V
	valueOk bool
}

// Copy returns a copy of the Value.
func (v *Value[V]) Copy() *Value[V] {
	return sValue.Copy(v).(*Value[V])
}

// EqualValue returns true if V is equal to U.
func (v *Value[V]) Equal(u *Value[V]) bool {
	return sValue.Equal(v, u)
}
