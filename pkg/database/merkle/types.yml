State:
  non-binary: true
  custom-equal: true
  fields:
    - name: Count
      description: is the count of hashes added to the tree
      type: int
    - name: Pending
      description: is the hashes that represent the left edge of the tree
      type: bytes
      repeatable: true
    - name: HashList
      description: is the hashes added to the tree
      type: bytes
      repeatable: true

Receipt:
  fields:
    - name: Start
      description: is the entry for which we want a proof
      type: bytes
    - name: StartIndex
      type: int
    - name: End
      description: is the entry at the index where the anchor was created
      type: bytes
    - name: EndIndex
      type: int
    - name: Anchor
      description: is the root expected once all nodes are applied
      type: bytes
    - name: Entries
      description: is the list of hashes to apply to create an anchor
      repeatable: true
      pointer: true
      type: ReceiptEntry
      marshal-as: reference

ReceiptEntry:
  fields:
    - name: Right
      type: bool
    - name: Hash
      type: bytes

ReceiptList:
  fields:
    - name: MerkleState
      description: merkle.State at the beginning of the list
      type: State
      marshal-as: reference
      pointer: true
    - name: Elements
      type: bytes
      repeatable: true
    - name: Receipt
      type: Receipt
      marshal-as: reference
      pointer: true
    - name: ContinuedReceipt
      type: Receipt
      marshal-as: reference
      pointer: true

chainIndexBlock:
  fields:
    - name: Level
      type: uint
    - name: Index
      type: uint
    - name: Entries
      type: chainIndexEntry
      marshal-as: reference
      pointer: true
      repeatable: true

chainIndexEntry:
  fields:
    - name: Index
      description: is the index of the chain entry, or the next block
      type: uint
    - name: Key
      description: is the key being indexed
      type: record.Key
      marshal-as: reference
      pointer: true
