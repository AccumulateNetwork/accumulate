// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	api "gitlab.com/accumulatenetwork/accumulate/pkg/api/v3"
)

// NodeService is an autogenerated mock type for the NodeService type
type NodeService struct {
	mock.Mock
}

type NodeService_Expecter struct {
	mock *mock.Mock
}

func (_m *NodeService) EXPECT() *NodeService_Expecter {
	return &NodeService_Expecter{mock: &_m.Mock}
}

// FindService provides a mock function with given fields: ctx, opts
func (_m *NodeService) FindService(ctx context.Context, opts api.FindServiceOptions) ([]*api.FindServiceResult, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for FindService")
	}

	var r0 []*api.FindServiceResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, api.FindServiceOptions) ([]*api.FindServiceResult, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, api.FindServiceOptions) []*api.FindServiceResult); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*api.FindServiceResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, api.FindServiceOptions) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NodeService_FindService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindService'
type NodeService_FindService_Call struct {
	*mock.Call
}

// FindService is a helper method to define mock.On call
//   - ctx context.Context
//   - opts api.FindServiceOptions
func (_e *NodeService_Expecter) FindService(ctx interface{}, opts interface{}) *NodeService_FindService_Call {
	return &NodeService_FindService_Call{Call: _e.mock.On("FindService", ctx, opts)}
}

func (_c *NodeService_FindService_Call) Run(run func(ctx context.Context, opts api.FindServiceOptions)) *NodeService_FindService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(api.FindServiceOptions))
	})
	return _c
}

func (_c *NodeService_FindService_Call) Return(_a0 []*api.FindServiceResult, _a1 error) *NodeService_FindService_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NodeService_FindService_Call) RunAndReturn(run func(context.Context, api.FindServiceOptions) ([]*api.FindServiceResult, error)) *NodeService_FindService_Call {
	_c.Call.Return(run)
	return _c
}

// NodeInfo provides a mock function with given fields: ctx, opts
func (_m *NodeService) NodeInfo(ctx context.Context, opts api.NodeInfoOptions) (*api.NodeInfo, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for NodeInfo")
	}

	var r0 *api.NodeInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, api.NodeInfoOptions) (*api.NodeInfo, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, api.NodeInfoOptions) *api.NodeInfo); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.NodeInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, api.NodeInfoOptions) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NodeService_NodeInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NodeInfo'
type NodeService_NodeInfo_Call struct {
	*mock.Call
}

// NodeInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - opts api.NodeInfoOptions
func (_e *NodeService_Expecter) NodeInfo(ctx interface{}, opts interface{}) *NodeService_NodeInfo_Call {
	return &NodeService_NodeInfo_Call{Call: _e.mock.On("NodeInfo", ctx, opts)}
}

func (_c *NodeService_NodeInfo_Call) Run(run func(ctx context.Context, opts api.NodeInfoOptions)) *NodeService_NodeInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(api.NodeInfoOptions))
	})
	return _c
}

func (_c *NodeService_NodeInfo_Call) Return(_a0 *api.NodeInfo, _a1 error) *NodeService_NodeInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NodeService_NodeInfo_Call) RunAndReturn(run func(context.Context, api.NodeInfoOptions) (*api.NodeInfo, error)) *NodeService_NodeInfo_Call {
	_c.Call.Return(run)
	return _c
}

// NewNodeService creates a new instance of NodeService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNodeService(t interface {
	mock.TestingT
	Cleanup(func())
}) *NodeService {
	mock := &NodeService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
