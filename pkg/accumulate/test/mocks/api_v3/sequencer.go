// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	private "gitlab.com/accumulatenetwork/accumulate/internal/api/private"
	api "gitlab.com/accumulatenetwork/accumulate/pkg/api/v3"
	messaging "gitlab.com/accumulatenetwork/accumulate/pkg/types/messaging"
	url "gitlab.com/accumulatenetwork/accumulate/pkg/url"
)

// Sequencer is an autogenerated mock type for the Sequencer type
type Sequencer struct {
	mock.Mock
}

type Sequencer_Expecter struct {
	mock *mock.Mock
}

func (_m *Sequencer) EXPECT() *Sequencer_Expecter {
	return &Sequencer_Expecter{mock: &_m.Mock}
}

// Sequence provides a mock function with given fields: ctx, src, dst, num, opts
func (_m *Sequencer) Sequence(ctx context.Context, src *url.URL, dst *url.URL, num uint64, opts private.SequenceOptions) (*api.MessageRecord[messaging.Message], error) {
	ret := _m.Called(ctx, src, dst, num, opts)

	if len(ret) == 0 {
		panic("no return value specified for Sequence")
	}

	var r0 *api.MessageRecord[messaging.Message]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *url.URL, *url.URL, uint64, private.SequenceOptions) (*api.MessageRecord[messaging.Message], error)); ok {
		return rf(ctx, src, dst, num, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *url.URL, *url.URL, uint64, private.SequenceOptions) *api.MessageRecord[messaging.Message]); ok {
		r0 = rf(ctx, src, dst, num, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.MessageRecord[messaging.Message])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *url.URL, *url.URL, uint64, private.SequenceOptions) error); ok {
		r1 = rf(ctx, src, dst, num, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Sequencer_Sequence_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sequence'
type Sequencer_Sequence_Call struct {
	*mock.Call
}

// Sequence is a helper method to define mock.On call
//   - ctx context.Context
//   - src *url.URL
//   - dst *url.URL
//   - num uint64
//   - opts private.SequenceOptions
func (_e *Sequencer_Expecter) Sequence(ctx interface{}, src interface{}, dst interface{}, num interface{}, opts interface{}) *Sequencer_Sequence_Call {
	return &Sequencer_Sequence_Call{Call: _e.mock.On("Sequence", ctx, src, dst, num, opts)}
}

func (_c *Sequencer_Sequence_Call) Run(run func(ctx context.Context, src *url.URL, dst *url.URL, num uint64, opts private.SequenceOptions)) *Sequencer_Sequence_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*url.URL), args[2].(*url.URL), args[3].(uint64), args[4].(private.SequenceOptions))
	})
	return _c
}

func (_c *Sequencer_Sequence_Call) Return(_a0 *api.MessageRecord[messaging.Message], _a1 error) *Sequencer_Sequence_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Sequencer_Sequence_Call) RunAndReturn(run func(context.Context, *url.URL, *url.URL, uint64, private.SequenceOptions) (*api.MessageRecord[messaging.Message], error)) *Sequencer_Sequence_Call {
	_c.Call.Return(run)
	return _c
}

// NewSequencer creates a new instance of Sequencer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSequencer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Sequencer {
	mock := &Sequencer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
