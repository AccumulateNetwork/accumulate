package proxy

// GENERATED BY go run ./tools/cmd/gen-types. DO NOT EDIT.

import (
	"bytes"
	"encoding/json"
	"errors"
	"io"
	"strings"

	"gitlab.com/accumulatenetwork/accumulate/internal/encoding"
)

type SeedCountRequest struct {
	fieldsSet []bool
	Network   string `json:"network,omitempty" form:"network" query:"network" validate:"required"`
	extraData []byte
}

type SeedCountResponse struct {
	fieldsSet []bool
	Count     int64 `json:"count,omitempty" form:"count" query:"count" validate:"required"`
	extraData []byte
}

type SeedListRequest struct {
	fieldsSet []bool
	Network   string `json:"network,omitempty" form:"network" query:"network" validate:"required"`
	count     int64  `json:"count,omitempty" form:"count" query:"count" validate:"required"`
	extraData []byte
}

type SeedListResponse struct {
	fieldsSet []bool
	Network   string   `json:"network,omitempty" form:"network" query:"network" validate:"required"`
	addresses []string `json:"addresses,omitempty" form:"addresses" query:"addresses" validate:"required"`
	extraData []byte
}

func (v *SeedCountRequest) Copy() *SeedCountRequest {
	u := new(SeedCountRequest)

	u.Network = v.Network

	return u
}

func (v *SeedCountRequest) CopyAsInterface() interface{} { return v.Copy() }

func (v *SeedCountResponse) Copy() *SeedCountResponse {
	u := new(SeedCountResponse)

	u.Count = v.Count

	return u
}

func (v *SeedCountResponse) CopyAsInterface() interface{} { return v.Copy() }

func (v *SeedListRequest) Copy() *SeedListRequest {
	u := new(SeedListRequest)

	u.Network = v.Network
	u.count = v.count

	return u
}

func (v *SeedListRequest) CopyAsInterface() interface{} { return v.Copy() }

func (v *SeedListResponse) Copy() *SeedListResponse {
	u := new(SeedListResponse)

	u.Network = v.Network
	u.addresses = make([]string, len(v.addresses))
	for i, v := range v.addresses {
		u.addresses[i] = v
	}

	return u
}

func (v *SeedListResponse) CopyAsInterface() interface{} { return v.Copy() }

func (v *SeedCountRequest) Equal(u *SeedCountRequest) bool {
	if !(v.Network == u.Network) {
		return false
	}

	return true
}

func (v *SeedCountResponse) Equal(u *SeedCountResponse) bool {
	if !(v.Count == u.Count) {
		return false
	}

	return true
}

func (v *SeedListRequest) Equal(u *SeedListRequest) bool {
	if !(v.Network == u.Network) {
		return false
	}
	if !(v.count == u.count) {
		return false
	}

	return true
}

func (v *SeedListResponse) Equal(u *SeedListResponse) bool {
	if !(v.Network == u.Network) {
		return false
	}
	if len(v.addresses) != len(u.addresses) {
		return false
	}
	for i := range v.addresses {
		if !(v.addresses[i] == u.addresses[i]) {
			return false
		}
	}

	return true
}

var fieldNames_SeedCountRequest = []string{
	1: "Network",
}

func (v *SeedCountRequest) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	if !(len(v.Network) == 0) {
		writer.WriteString(1, v.Network)
	}

	_, _, err := writer.Reset(fieldNames_SeedCountRequest)
	if err != nil {
		return nil, err
	}
	buffer.Write(v.extraData)
	return buffer.Bytes(), err
}

func (v *SeedCountRequest) IsValid() error {
	var errs []string

	if len(v.fieldsSet) > 1 && !v.fieldsSet[1] {
		errs = append(errs, "field Network is missing")
	} else if len(v.Network) == 0 {
		errs = append(errs, "field Network is not set")
	}

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

var fieldNames_SeedCountResponse = []string{
	1: "Count",
}

func (v *SeedCountResponse) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	if !(v.Count == 0) {
		writer.WriteInt(1, v.Count)
	}

	_, _, err := writer.Reset(fieldNames_SeedCountResponse)
	if err != nil {
		return nil, err
	}
	buffer.Write(v.extraData)
	return buffer.Bytes(), err
}

func (v *SeedCountResponse) IsValid() error {
	var errs []string

	if len(v.fieldsSet) > 1 && !v.fieldsSet[1] {
		errs = append(errs, "field Count is missing")
	} else if v.Count == 0 {
		errs = append(errs, "field Count is not set")
	}

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

var fieldNames_SeedListRequest = []string{
	1: "Network",
	2: "count",
}

func (v *SeedListRequest) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	if !(len(v.Network) == 0) {
		writer.WriteString(1, v.Network)
	}
	if !(v.count == 0) {
		writer.WriteInt(2, v.count)
	}

	_, _, err := writer.Reset(fieldNames_SeedListRequest)
	if err != nil {
		return nil, err
	}
	buffer.Write(v.extraData)
	return buffer.Bytes(), err
}

func (v *SeedListRequest) IsValid() error {
	var errs []string

	if len(v.fieldsSet) > 1 && !v.fieldsSet[1] {
		errs = append(errs, "field Network is missing")
	} else if len(v.Network) == 0 {
		errs = append(errs, "field Network is not set")
	}
	if len(v.fieldsSet) > 2 && !v.fieldsSet[2] {
		errs = append(errs, "field count is missing")
	} else if v.count == 0 {
		errs = append(errs, "field count is not set")
	}

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

var fieldNames_SeedListResponse = []string{
	1: "Network",
	2: "addresses",
}

func (v *SeedListResponse) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	if !(len(v.Network) == 0) {
		writer.WriteString(1, v.Network)
	}
	if !(len(v.addresses) == 0) {
		for _, v := range v.addresses {
			writer.WriteString(2, v)
		}
	}

	_, _, err := writer.Reset(fieldNames_SeedListResponse)
	if err != nil {
		return nil, err
	}
	buffer.Write(v.extraData)
	return buffer.Bytes(), err
}

func (v *SeedListResponse) IsValid() error {
	var errs []string

	if len(v.fieldsSet) > 1 && !v.fieldsSet[1] {
		errs = append(errs, "field Network is missing")
	} else if len(v.Network) == 0 {
		errs = append(errs, "field Network is not set")
	}
	if len(v.fieldsSet) > 2 && !v.fieldsSet[2] {
		errs = append(errs, "field addresses is missing")
	} else if len(v.addresses) == 0 {
		errs = append(errs, "field addresses is not set")
	}

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

func (v *SeedCountRequest) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *SeedCountRequest) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	if x, ok := reader.ReadString(1); ok {
		v.Network = x
	}

	seen, err := reader.Reset(fieldNames_SeedCountRequest)
	if err != nil {
		return err
	}
	v.fieldsSet = seen
	v.extraData, err = reader.ReadAll()
	return err
}

func (v *SeedCountResponse) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *SeedCountResponse) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	if x, ok := reader.ReadInt(1); ok {
		v.Count = x
	}

	seen, err := reader.Reset(fieldNames_SeedCountResponse)
	if err != nil {
		return err
	}
	v.fieldsSet = seen
	v.extraData, err = reader.ReadAll()
	return err
}

func (v *SeedListRequest) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *SeedListRequest) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	if x, ok := reader.ReadString(1); ok {
		v.Network = x
	}
	if x, ok := reader.ReadInt(2); ok {
		v.count = x
	}

	seen, err := reader.Reset(fieldNames_SeedListRequest)
	if err != nil {
		return err
	}
	v.fieldsSet = seen
	v.extraData, err = reader.ReadAll()
	return err
}

func (v *SeedListResponse) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *SeedListResponse) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	if x, ok := reader.ReadString(1); ok {
		v.Network = x
	}
	for {
		if x, ok := reader.ReadString(2); ok {
			v.addresses = append(v.addresses, x)
		} else {
			break
		}
	}

	seen, err := reader.Reset(fieldNames_SeedListResponse)
	if err != nil {
		return err
	}
	v.fieldsSet = seen
	v.extraData, err = reader.ReadAll()
	return err
}

func (v *SeedListResponse) MarshalJSON() ([]byte, error) {
	u := struct {
		Network   string                    `json:"network,omitempty"`
		addresses encoding.JsonList[string] `json:"addresses,omitempty"`
	}{}
	u.Network = v.Network
	u.addresses = v.addresses
	return json.Marshal(&u)
}

func (v *SeedListResponse) UnmarshalJSON(data []byte) error {
	u := struct {
		Network   string                    `json:"network,omitempty"`
		addresses encoding.JsonList[string] `json:"addresses,omitempty"`
	}{}
	u.Network = v.Network
	u.addresses = v.addresses
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	v.Network = u.Network
	v.addresses = u.addresses
	return nil
}
