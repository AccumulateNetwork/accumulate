stages:
  - test
  - build
  - deploy
  - validate

variables:
  BOLD_RED: '\e[1;31m'
  NO_COLOR: '\e[0m'
  SECTION: '\e[0K'

.go:
  image: golang:1.17
  cache:
    key: go-mod-cache
    paths:
      - .go-mod-cache
  variables:
    GOMODCACHE: ${CI_PROJECT_DIR}/.go-mod-cache
  before_script:
  - |
    function build-daemon {
      export GOOS=$1
      export GOARCH=$2
      BIN=accumulated
      [ -z "$GOOS" ] || BIN=${BIN}-${GOOS}
      [ -z "$GOARCH" ] || BIN=${BIN}-${GOARCH}
      [[ $GOOS == windows ]] && BIN=${BIN}.exe
      export BUILDFLAGS="-o ${BIN}"
      echo -e "${SECTION}section_start:`date +%s`:build_${GOOS}_${GOARCH}\r${SECTION}Build accumulated for $GOOS $GOARCH"
      make GIT_COMMIT=${CI_COMMIT_SHA} GIT_DESCRIBE=${GIT_DESCRIBE}
      echo -e "${SECTION}section_end:`date +%s`:build_${GOOS}_${GOARCH}\r${SECTION}";
    }

test:
  stage: test
  extends: .go
  needs: []
  artifacts:
    when: always
    reports:
      junit: report.xml
  script:
  - go build -v ./...
  - go run gotest.tools/gotestsum --junitfile report.xml --format testname

git describe:
  stage: build
  needs: []
  script:
  - git fetch --unshallow
  - echo "GIT_DESCRIBE=$(git describe --dirty)" >> git.env
  artifacts:
    reports:
      dotenv: git.env

docker buildx:
  image: docker:20-git
  stage: build
  needs: []
  variables:
    GIT_STRATEGY: none
  artifacts:
    paths:
      - buildx
    expire_in: 1 day
  services: [ 'docker:20-dind' ]
  script:
    - export DOCKER_BUILDKIT=1
    - git clone git://github.com/docker/buildx ./docker-buildx
    - docker build --platform=local -o . ./docker-buildx

build images:
  stage: build
  needs: [ 'docker buildx' ]
  image: docker:20
  services:
    - name: docker:20-dind
      command: [ --experimental ] # Do we need this?
  before_script:
    - mkdir -p ~/.docker/cli-plugins
    - mv buildx ~/.docker/cli-plugins/docker-buildx
    - docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
  script:
    - docker buildx create --use
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker buildx build --platform linux/amd64,linux/arm64 --push -t ${CI_REGISTRY_IMAGE}/accumulated:${CI_COMMIT_REF_SLUG} .
    - docker buildx build --platform linux/amd64,linux/arm64 --push -t ${CI_REGISTRY_IMAGE}/cli:${CI_COMMIT_REF_SLUG} -f Dockerfile.cli .

lint:
  stage: build
  extends: .go
  needs: [ ]
  script:
    - function die { echo -e "${BOLD_RED}${1}${NO_COLOR}"; false; }

    - echo -e "${SECTION}section_start:`date +%s`:vet\r${SECTION}Vet"
    - go vet ./...
    - echo -e "${SECTION}section_end:`date +%s`:vet\r${SECTION}"

    - echo -e "${SECTION}section_start:`date +%s`:tidy\r${SECTION}Verify go.mod is tidy"
    - go mod tidy
    - git diff --quiet go.mod go.sum || die "Go mod files are not tidy. Please run \`go mod tidy\`."
    - echo -e "${SECTION}section_end:`date +%s`:tidy\r${SECTION}"

    - echo -e "${SECTION}section_start:`date +%s`:generate\r${SECTION}Verify generated files are up to date"
    - go generate -x ./...
    - git diff --quiet || die "Generated files are not up to date. Please run \`go generate ./...\`."
    - echo -e "${SECTION}section_end:`date +%s`:generate\r${SECTION}"

    - echo -e "${SECTION}section_start:`date +%s`:imports\r${SECTION}Verify code is correctly formatted"
    - go run github.com/rinchsan/gosimports/cmd/gosimports -l */ | tee fmt.log
    - test -s fmt.log && die "Code is incorrectly formatted. Please run \`gosimports -w .\` (or \`./scripts/imports.sh\`)."
    - echo -e "${SECTION}section_end:`date +%s`:imports\r${SECTION}"

build:
  stage: build
  extends: .go
  needs: [ git describe ]
  script:
    - build-daemon linux amd64
    - build-daemon linux arm64
    - build-daemon windows amd64
    - build-daemon windows arm64
    - build-daemon darwin amd64
    - build-daemon darwin arm64
  artifacts:
    paths:
      - accumulated-*

configure:
  stage: build
  extends: .go
  needs: [git describe]
  script:
  - |
    function init {
      ./accumulated init -w config-$1 "${@:2}" -n $1
      (cd config-$1 && tar czf ../config-$1.tar.gz *)
    }
  - build-daemon
  - build-daemon linux arm64
  - init DevNet.Directory --no-empty-blocks --no-website
  - init DevNet.Zion --no-empty-blocks
  - init DevNet.Yellowstone --no-empty-blocks
  artifacts:
    paths:
    - config-*.tar.gz
    - accumulated-*

.deploy:
  stage: deploy
  only: [develop] # only run on the main branch
  needs: [configure, test]
  tags:
  - linux
  - docker
  - accumulate
  image: ubuntu
  script:
  - apt-get -y update && apt-get -y install ssh
  - mkdir ~/.ssh
  - cp ${SSH_KNOWN_HOSTS} ~/.ssh/known_hosts
  - cp ${SSH_PRIV_KEY} ~/.ssh/id_rsa
  - cp ${SSH_PUB_KEY} ~/.ssh/id_rsa.pub
  - chmod -R 600 ~/.ssh
  - ./scripts/ci/devnet-deploy.sh

deploy 1/4:
  extends: .deploy
  variables:   { HOST: 172.31.4.106,  NETWORK: Zion,         NODE: 0, DN_NODE: 0, BIN: accumulated-linux-arm64 }
  environment: { url: 'http://172.31.4.106:8080',  name: Zion/0 }

deploy 2/4:
  extends: .deploy
  variables:   { HOST: 172.31.11.185, NETWORK: Zion,         NODE: 1, DN_NODE: 1, BIN: accumulated-linux-arm64 }
  environment: { url: 'http://172.31.11.185:8080', name: Zion/1 }

deploy 3/4:
  extends: .deploy
  variables:   { HOST: 172.31.11.104, NETWORK: Yellowstone,  NODE: 0, DN_NODE: 2, BIN: accumulated-linux-arm64 }
  environment: { url: 'http://172.31.11.104:8080', name: Yellowstone/0 }

deploy 4/4:
  extends: .deploy
  variables:   { HOST: 172.31.13.8,   NETWORK: Yellowstone,  NODE: 1, DN_NODE: 3, BIN: accumulated-linux-arm64 }
  environment: { url: 'http://172.31.13.8:8080',   name: Yellowstone/1 }

.validate:
  stage: validate
  extends: .go
  only: [develop] # only run on the main branch
  needs: [deploy 1/4, deploy 2/4, deploy 3/4, deploy 4/4]
  variables:
    ACC_API: https://devnet.accumulatenetwork.io/v2
    # set mnemonic for predictable addresses
    MNEMONIC: yellow yellow yellow yellow yellow yellow yellow yellow yellow yellow yellow yellow

validate docker:
  stage: validate
  needs: ['build images']
  image: docker
  services: ['docker:dind']
  variables:
    # set mnemonic for predictable addresses
    MNEMONIC: yellow yellow yellow yellow yellow yellow yellow yellow yellow yellow yellow yellow
  script:
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  - docker run --rm -v ${PWD}/nodes:/nodes ${CI_REGISTRY_IMAGE}/accumulated:${CI_COMMIT_REF_SLUG} init devnet -w /nodes --docker --tag ${CI_COMMIT_REF_SLUG} --compose -b 3 -v 3
  - cd nodes
  - apk add --no-cache docker-compose
  - docker-compose up -d
  - docker-compose run -e MNEMONIC="${MNEMONIC}" --rm tools /scripts/ci/validate.sh
  - docker-compose down

validate:
  extends: .validate
  script:
  - apt-get -y update && apt-get -y install jq xxd
  - ./scripts/ci/validate.sh

.validate matrix 1/6:
   extends: .validate
   script:
   - ./scripts/matrix/test_case_1.1.sh

.validate matrix 2/6:
   extends: .validate
   script:
   - ./scripts/matrix/test_case_2.1.sh
   - ./scripts/matrix/test_case_2.2.sh
   - ./scripts/matrix/test_case_2.3.sh
   - ./scripts/matrix/test_case_2.4.sh
   - ./scripts/matrix/test_case_2.5.sh
   - ./scripts/matrix/test_case_2.6.sh
   - ./scripts/matrix/test_case_2.7.sh

.validate matrix 3/6:
   extends: .validate
   script:
   - ./scripts/matrix/test_case_3.1.sh
   - ./scripts/matrix/test_case_3.2.sh
   - ./scripts/matrix/test_case_3.3.sh
   - ./scripts/matrix/test_case_3.4.sh

.validate matrix 4/6:
   extends: .validate
   script:
   - ./scripts/matrix/test_case_4.1.sh
   - ./scripts/matrix/test_case_4.2.sh
   - ./scripts/matrix/test_case_4.3.sh
   - ./scripts/matrix/test_case_4.4.sh
   - ./scripts/matrix/test_case_4.5.sh
   - ./scripts/matrix/test_case_4.6.sh
   - ./scripts/matrix/test_case_4.7.sh
   - ./scripts/matrix/test_case_4.8.sh

.validate matrix 5/6:
   extends: .validate
   script:
   - ./scripts/matrix/test_case_5.1.sh
   - ./scripts/matrix/test_case_5.2.sh

.validate matrix 6/6:
   extends: .validate
   script:
   - ./scripts/matrix/test_case_6.1.sh
   - ./scripts/matrix/test_case_6.2.sh
   - ./scripts/matrix/test_case_6.3.sh
   - ./scripts/matrix/test_case_6.4.sh
   - ./scripts/matrix/test_case_6.5.sh
   - ./scripts/matrix/test_case_6.6.sh
   - ./scripts/matrix/test_case_6.7.sh
