stages:
- test
- build
- deploy
- validate

variables:
  GOMODCACHE: ${CI_PROJECT_DIR}/.go-mod-cache

default:
  cache:
    key: go-mod-cache
    paths:
    - .go-mod-cache
  before_script:
  - |
    function build-daemon {
      export GOOS=$1
      export GOARCH=$2
      BIN=accumulated
      [ -z "$GOOS" ] || BIN=${BIN}-${GOOS}
      [ -z "$GOARCH" ] || BIN=${BIN}-${GOARCH}
      [[ $GOOS == windows ]] && BIN=${BIN}.exe
      export BUILDFLAGS="-o ${BIN}"
      echo Build $BIN
      make GIT_COMMIT=${CI_COMMIT_SHA} GIT_DESCRIBE=${GIT_DESCRIBE}
    }

.test:
  stage: test
  needs: []
  tags: [docker, linux]
  script:
  - go build -v ./...
  - go test -v -cpu=4 -count=1 ./...

test 1/2:
  extends: .test
  image: golang:1.16

test 2/2:
  extends: .test
  image: golang:1.17

git describe:
  stage: build
  needs: []
  tags: [docker, linux]
  script:
  - git fetch --unshallow
  - echo "GIT_DESCRIBE=$(git describe --dirty)" >> git.env
  artifacts:
    reports:
      dotenv: git.env

build:
  stage: build
  needs: [git describe]
  tags: [docker, linux]
  image: golang:1.17
  script:
  - build-daemon linux amd64
  - build-daemon linux arm64
  - build-daemon windows amd64
  - build-daemon windows arm64
  - build-daemon darwin amd64
  - build-daemon darwin arm64
  artifacts:
    paths:
    - accumulated-*

configure:
  stage: build
  needs: [git describe]
  tags: [docker, linux]
  image: golang:1.17
  script:
  - |
    function init {
      ./accumulated init -w config-$1 "${@:2}" -n $1
      (cd config-$1 && tar czf ../config-$1.tar.gz *)
    }
  - build-daemon
  - build-daemon linux arm64
  - init DevNet.Directory --no-empty-blocks --no-website
  - init DevNet.Zion --no-empty-blocks
  - init DevNet.Yellowstone --no-empty-blocks
  artifacts:
    paths:
    - config-*.tar.gz
    - accumulated-*

.deploy:
  stage: deploy
  only: [develop] # only run on the main branch
  needs: [configure, test 1/2, test 2/2]
  tags:
  - linux
  - docker
  - accumulate
  image: ubuntu
  script:
  - apt-get -y update && apt-get -y install ssh
  - mkdir ~/.ssh
  - cp ${SSH_KNOWN_HOSTS} ~/.ssh/known_hosts
  - cp ${SSH_PRIV_KEY} ~/.ssh/id_rsa
  - cp ${SSH_PUB_KEY} ~/.ssh/id_rsa.pub
  - chmod -R 600 ~/.ssh
  - ./scripts/ci/devnet-deploy.sh

deploy 1/4:
  extends: .deploy
  variables:   { HOST: 172.31.4.106,  NETWORK: Zion,         NODE: 0, DN_NODE: 0, BIN: accumulated-linux-arm64 }
  environment: { url: 'http://172.31.4.106:8080',  name: Zion/0 }

deploy 2/4:
  extends: .deploy
  variables:   { HOST: 172.31.11.185, NETWORK: Zion,         NODE: 1, DN_NODE: 1, BIN: accumulated-linux-arm64 }
  environment: { url: 'http://172.31.11.185:8080', name: Zion/1 }

deploy 3/4:
  extends: .deploy
  variables:   { HOST: 172.31.11.104, NETWORK: Yellowstone,  NODE: 0, DN_NODE: 2, BIN: accumulated-linux-arm64 }
  environment: { url: 'http://172.31.11.104:8080', name: Yellowstone/0 }

deploy 4/4:
  extends: .deploy
  variables:   { HOST: 172.31.13.8,   NETWORK: Yellowstone,  NODE: 1, DN_NODE: 3, BIN: accumulated-linux-arm64 }
  environment: { url: 'http://172.31.13.8:8080',   name: Yellowstone/1 }

.validate:
  stage: validate
  only: [develop] # only run on the main branch
  needs: [deploy 1/4, deploy 2/4, deploy 3/4, deploy 4/4]
  tags: [docker, linux]
  image: golang:1.17
  variables:
    ACC_API: https://devnet.accumulatenetwork.io/v1
    # set mnemonic for predictable addresses
    MNEMONIC: yellow yellow yellow yellow yellow yellow yellow yellow yellow yellow yellow yellow

validate:
  extends: .validate
  script:
  - apt-get -y update && apt-get -y install jq
  - ./scripts/validate.sh
