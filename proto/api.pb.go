// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	api.proto

It has these top-level messages:
	DBVCInstructionHeader
	BVCEntry
	Submission
	BVCEntryResponse
	ValRequest
	ValReponse
	Entry
	Height
	EntryBytes
	Account
	Group
	AccountAdd
	GasAllowanceUpdate
	Reply
	KeyValue
	Key
	NodeInfo
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/golang/protobuf/ptypes/empty"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type DBVCInstructionHeaderInsType int32

const (
	DBVCInstructionHeader_Unknown             DBVCInstructionHeaderInsType = 0
	DBVCInstructionHeader_EntrySubmit         DBVCInstructionHeaderInsType = 1
	DBVCInstructionHeader_EntryReveal         DBVCInstructionHeaderInsType = 2
	DBVCInstructionHeader_AddChain            DBVCInstructionHeaderInsType = 3
	DBVCInstructionHeader_RemoveChain         DBVCInstructionHeaderInsType = 4
	DBVCInstructionHeader_RegisterMasterChain DBVCInstructionHeaderInsType = 5
	DBVCInstructionHeader_RemoveMasterChain   DBVCInstructionHeaderInsType = 6
	DBVCInstructionHeader_RegisterADI         DBVCInstructionHeaderInsType = 7
)

var DBVCInstructionHeaderInsType_name = map[int32]string{
	0: "Unknown",
	1: "EntrySubmit",
	2: "EntryReveal",
	3: "AddChain",
	4: "RemoveChain",
	5: "RegisterMasterChain",
	6: "RemoveMasterChain",
	7: "RegisterADI",
}
var DBVCInstructionHeaderInsType_value = map[string]int32{
	"Unknown":             0,
	"EntrySubmit":         1,
	"EntryReveal":         2,
	"AddChain":            3,
	"RemoveChain":         4,
	"RegisterMasterChain": 5,
	"RemoveMasterChain":   6,
	"RegisterADI":         7,
}

func (x DBVCInstructionHeaderInsType) String() string {
	return proto1.EnumName(DBVCInstructionHeaderInsType_name, int32(x))
}
func (DBVCInstructionHeaderInsType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{0, 0}
}

type Submission_Type int32

const (
	Submission_Unknown      Submission_Type = 0
	Submission_Entry_Commit Submission_Type = 1
	Submission_Entry_Reveal Submission_Type = 2
	Submission_Chain_Commit Submission_Type = 3
	Submission_Transaction  Submission_Type = 4
	Submission_Admin        Submission_Type = 5
	Submission_ADI_Commit   Submission_Type = 6
)

var Submission_Type_name = map[int32]string{
	0: "Unknown",
	1: "Entry_Commit",
	2: "Entry_Reveal",
	3: "Chain_Commit",
	4: "Transaction",
	5: "Admin",
	6: "ADI_Commit",
}
var Submission_Type_value = map[string]int32{
	"Unknown":      0,
	"Entry_Commit": 1,
	"Entry_Reveal": 2,
	"Chain_Commit": 3,
	"Transaction":  4,
	"Admin":        5,
	"ADI_Commit":   6,
}

func (x Submission_Type) String() string {
	return proto1.EnumName(Submission_Type_name, int32(x))
}
func (Submission_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

type EntryMsgType int32

const (
	Entry_WriteEntryBytes    EntryMsgType = 0
	Entry_WriteKeyValue      EntryMsgType = 1
	Entry_ReadKeyValue       EntryMsgType = 2
	Entry_AccountWrite       EntryMsgType = 100
	Entry_AccountRead        EntryMsgType = 101
	Entry_GasAllowanceUpdate EntryMsgType = 105
)

var EntryMsgType_name = map[int32]string{
	0:   "WriteEntryBytes",
	1:   "WriteKeyValue",
	2:   "ReadKeyValue",
	100: "AccountWrite",
	101: "AccountRead",
	105: "GasAllowanceUpdate",
}
var EntryMsgType_value = map[string]int32{
	"WriteEntryBytes":    0,
	"WriteKeyValue":      1,
	"ReadKeyValue":       2,
	"AccountWrite":       100,
	"AccountRead":        101,
	"GasAllowanceUpdate": 105,
}

func (x EntryMsgType) String() string {
	return proto1.EnumName(EntryMsgType_name, int32(x))
}
func (EntryMsgType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{6, 0} }

// Directory Block Validation Chain (DBVC) Instruction Header
// maybe rethink into instruction and subcommand.  for example entry has several froms as does chain, adi etc.
// the chain address routes the thing anyway so maybe instruction really needs to be address
type DBVCInstructionHeader struct {
	Instruction        DBVCInstructionHeaderInsType `protobuf:"varint,1,opt,name=instruction,enum=apiProto.DBVCInstructionHeaderInsType" json:"instruction,omitempty"`
	Version            uint32                       `protobuf:"varint,2,opt,name=version" json:"version,omitempty"`
	BvcMasterChainDDII []byte                       `protobuf:"bytes,3,opt,name=bvcMasterChainDDII,proto3" json:"bvcMasterChainDDII,omitempty"`
	BvcValidatorDDII   []byte                       `protobuf:"bytes,4,opt,name=bvcValidatorDDII,proto3" json:"bvcValidatorDDII,omitempty"`
}

func (m *DBVCInstructionHeader) Reset()                    { *m = DBVCInstructionHeader{} }
func (m *DBVCInstructionHeader) String() string            { return proto1.CompactTextString(m) }
func (*DBVCInstructionHeader) ProtoMessage()               {}
func (*DBVCInstructionHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *DBVCInstructionHeader) GetInstruction() DBVCInstructionHeaderInsType {
	if m != nil {
		return m.Instruction
	}
	return DBVCInstructionHeader_Unknown
}

func (m *DBVCInstructionHeader) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *DBVCInstructionHeader) GetBvcMasterChainDDII() []byte {
	if m != nil {
		return m.BvcMasterChainDDII
	}
	return nil
}

func (m *DBVCInstructionHeader) GetBvcValidatorDDII() []byte {
	if m != nil {
		return m.BvcValidatorDDII
	}
	return nil
}

type BVCEntry struct {
	Header *DBVCInstructionHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Entry  []byte                 `protobuf:"bytes,2,opt,name=entry,proto3" json:"entry,omitempty"`
	//  header := [ version (1byte) | varintf ddiilen | ddii (up to 32 bytes) ]
	//  body :=   [  bvc bigendian blockheight (4 bytes) |
	//               unix timestamp (4 bytes) |
	//               Merkel DAG Root hash (32 Bytes)]
	Signature []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *BVCEntry) Reset()                    { *m = BVCEntry{} }
func (m *BVCEntry) String() string            { return proto1.CompactTextString(m) }
func (*BVCEntry) ProtoMessage()               {}
func (*BVCEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *BVCEntry) GetHeader() *DBVCInstructionHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *BVCEntry) GetEntry() []byte {
	if m != nil {
		return m.Entry
	}
	return nil
}

func (m *BVCEntry) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type Submission struct {
	Address     uint64          `protobuf:"varint,1,opt,name=address" json:"address,omitempty"`
	Class       Submission_Type `protobuf:"varint,2,opt,name=class,enum=apiProto.Submission_Type" json:"class,omitempty"`
	Instruction uint32          `protobuf:"varint,3,opt,name=instruction" json:"instruction,omitempty"`
	Param1      uint64          `protobuf:"varint,4,opt,name=param1" json:"param1,omitempty"`
	Param2      uint64          `protobuf:"varint,5,opt,name=param2" json:"param2,omitempty"`
	Data        []byte          `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Submission) Reset()                    { *m = Submission{} }
func (m *Submission) String() string            { return proto1.CompactTextString(m) }
func (*Submission) ProtoMessage()               {}
func (*Submission) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Submission) GetAddress() uint64 {
	if m != nil {
		return m.Address
	}
	return 0
}

func (m *Submission) GetClass() Submission_Type {
	if m != nil {
		return m.Class
	}
	return Submission_Unknown
}

func (m *Submission) GetInstruction() uint32 {
	if m != nil {
		return m.Instruction
	}
	return 0
}

func (m *Submission) GetParam1() uint64 {
	if m != nil {
		return m.Param1
	}
	return 0
}

func (m *Submission) GetParam2() uint64 {
	if m != nil {
		return m.Param2
	}
	return 0
}

func (m *Submission) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type BVCEntryResponse struct {
	ResponseData []byte `protobuf:"bytes,1,opt,name=responseData,proto3" json:"responseData,omitempty"`
	ErrorCode    uint64 `protobuf:"varint,2,opt,name=errorCode" json:"errorCode,omitempty"`
}

func (m *BVCEntryResponse) Reset()                    { *m = BVCEntryResponse{} }
func (m *BVCEntryResponse) String() string            { return proto1.CompactTextString(m) }
func (*BVCEntryResponse) ProtoMessage()               {}
func (*BVCEntryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *BVCEntryResponse) GetResponseData() []byte {
	if m != nil {
		return m.ResponseData
	}
	return nil
}

func (m *BVCEntryResponse) GetErrorCode() uint64 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

type ValRequest struct {
	ValidatorAddr uint64 `protobuf:"varint,1,opt,name=validatorAddr" json:"validatorAddr,omitempty"`
	Instruction   uint32 `protobuf:"varint,2,opt,name=instruction" json:"instruction,omitempty"`
	Parameter1    uint32 `protobuf:"varint,3,opt,name=parameter1" json:"parameter1,omitempty"`
	Parameter2    uint32 `protobuf:"varint,4,opt,name=parameter2" json:"parameter2,omitempty"`
	Nonce         uint64 `protobuf:"varint,5,opt,name=nonce" json:"nonce,omitempty"`
	Data          []byte `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	Signed        []byte `protobuf:"bytes,7,opt,name=signed,proto3" json:"signed,omitempty"`
}

func (m *ValRequest) Reset()                    { *m = ValRequest{} }
func (m *ValRequest) String() string            { return proto1.CompactTextString(m) }
func (*ValRequest) ProtoMessage()               {}
func (*ValRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ValRequest) GetValidatorAddr() uint64 {
	if m != nil {
		return m.ValidatorAddr
	}
	return 0
}

func (m *ValRequest) GetInstruction() uint32 {
	if m != nil {
		return m.Instruction
	}
	return 0
}

func (m *ValRequest) GetParameter1() uint32 {
	if m != nil {
		return m.Parameter1
	}
	return 0
}

func (m *ValRequest) GetParameter2() uint32 {
	if m != nil {
		return m.Parameter2
	}
	return 0
}

func (m *ValRequest) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *ValRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ValRequest) GetSigned() []byte {
	if m != nil {
		return m.Signed
	}
	return nil
}

type ValReponse struct {
	ResponseData []byte `protobuf:"bytes,1,opt,name=responseData,proto3" json:"responseData,omitempty"`
	ErrorCode    uint64 `protobuf:"varint,2,opt,name=errorCode" json:"errorCode,omitempty"`
}

func (m *ValReponse) Reset()                    { *m = ValReponse{} }
func (m *ValReponse) String() string            { return proto1.CompactTextString(m) }
func (*ValReponse) ProtoMessage()               {}
func (*ValReponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ValReponse) GetResponseData() []byte {
	if m != nil {
		return m.ResponseData
	}
	return nil
}

func (m *ValReponse) GetErrorCode() uint64 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

type Entry struct {
	Key         []byte       `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	MessageType EntryMsgType `protobuf:"varint,2,opt,name=messageType,enum=apiProto.EntryMsgType" json:"messageType,omitempty"`
	Nonce       uint64       `protobuf:"varint,3,opt,name=nonce" json:"nonce,omitempty"`
	Data        []byte       `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	Signed      []byte       `protobuf:"bytes,5,opt,name=signed,proto3" json:"signed,omitempty"`
}

func (m *Entry) Reset()                    { *m = Entry{} }
func (m *Entry) String() string            { return proto1.CompactTextString(m) }
func (*Entry) ProtoMessage()               {}
func (*Entry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Entry) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *Entry) GetMessageType() EntryMsgType {
	if m != nil {
		return m.MessageType
	}
	return Entry_WriteEntryBytes
}

func (m *Entry) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *Entry) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Entry) GetSigned() []byte {
	if m != nil {
		return m.Signed
	}
	return nil
}

type Height struct {
	Height uint64 `protobuf:"varint,1,opt,name=height" json:"height,omitempty"`
}

func (m *Height) Reset()                    { *m = Height{} }
func (m *Height) String() string            { return proto1.CompactTextString(m) }
func (*Height) ProtoMessage()               {}
func (*Height) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Height) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type EntryBytes struct {
	Data []byte `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *EntryBytes) Reset()                    { *m = EntryBytes{} }
func (m *EntryBytes) String() string            { return proto1.CompactTextString(m) }
func (*EntryBytes) ProtoMessage()               {}
func (*EntryBytes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *EntryBytes) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type Account struct {
	Name             string           `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Owner            string           `protobuf:"bytes,2,opt,name=owner" json:"owner,omitempty"`
	MessageAllowance int32            `protobuf:"varint,3,opt,name=messageAllowance" json:"messageAllowance,omitempty"`
	Groups           []*Account_Group `protobuf:"bytes,4,rep,name=groups" json:"groups,omitempty"`
	AllowAddAccounts bool             `protobuf:"varint,5,opt,name=allowAddAccounts" json:"allowAddAccounts,omitempty"`
	AllowAddGroups   bool             `protobuf:"varint,6,opt,name=allowAddGroups" json:"allowAddGroups,omitempty"`
}

func (m *Account) Reset()                    { *m = Account{} }
func (m *Account) String() string            { return proto1.CompactTextString(m) }
func (*Account) ProtoMessage()               {}
func (*Account) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Account) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Account) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Account) GetMessageAllowance() int32 {
	if m != nil {
		return m.MessageAllowance
	}
	return 0
}

func (m *Account) GetGroups() []*Account_Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *Account) GetAllowAddAccounts() bool {
	if m != nil {
		return m.AllowAddAccounts
	}
	return false
}

func (m *Account) GetAllowAddGroups() bool {
	if m != nil {
		return m.AllowAddGroups
	}
	return false
}

type Account_Group struct {
	Name        string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	AdminRights bool   `protobuf:"varint,2,opt,name=adminRights" json:"adminRights,omitempty"`
}

func (m *Account_Group) Reset()                    { *m = Account_Group{} }
func (m *Account_Group) String() string            { return proto1.CompactTextString(m) }
func (*Account_Group) ProtoMessage()               {}
func (*Account_Group) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9, 0} }

func (m *Account_Group) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Account_Group) GetAdminRights() bool {
	if m != nil {
		return m.AdminRights
	}
	return false
}

type Group struct {
	Name        string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
}

func (m *Group) Reset()                    { *m = Group{} }
func (m *Group) String() string            { return proto1.CompactTextString(m) }
func (*Group) ProtoMessage()               {}
func (*Group) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *Group) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Group) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type AccountAdd struct {
	PublicKey []byte   `protobuf:"bytes,1,opt,name=publicKey,proto3" json:"publicKey,omitempty"`
	Account   *Account `protobuf:"bytes,2,opt,name=account" json:"account,omitempty"`
}

func (m *AccountAdd) Reset()                    { *m = AccountAdd{} }
func (m *AccountAdd) String() string            { return proto1.CompactTextString(m) }
func (*AccountAdd) ProtoMessage()               {}
func (*AccountAdd) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *AccountAdd) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *AccountAdd) GetAccount() *Account {
	if m != nil {
		return m.Account
	}
	return nil
}

type GasAllowanceUpdate struct {
	AccountKey   []byte `protobuf:"bytes,1,opt,name=accountKey,proto3" json:"accountKey,omitempty"`
	GasAllowance int32  `protobuf:"varint,2,opt,name=gasAllowance" json:"gasAllowance,omitempty"`
}

func (m *GasAllowanceUpdate) Reset()                    { *m = GasAllowanceUpdate{} }
func (m *GasAllowanceUpdate) String() string            { return proto1.CompactTextString(m) }
func (*GasAllowanceUpdate) ProtoMessage()               {}
func (*GasAllowanceUpdate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *GasAllowanceUpdate) GetAccountKey() []byte {
	if m != nil {
		return m.AccountKey
	}
	return nil
}

func (m *GasAllowanceUpdate) GetGasAllowance() int32 {
	if m != nil {
		return m.GasAllowance
	}
	return 0
}

type Reply struct {
	Hash   []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Height uint64 `protobuf:"varint,2,opt,name=height" json:"height,omitempty"`
	Error  string `protobuf:"bytes,3,opt,name=error" json:"error,omitempty"`
}

func (m *Reply) Reset()                    { *m = Reply{} }
func (m *Reply) String() string            { return proto1.CompactTextString(m) }
func (*Reply) ProtoMessage()               {}
func (*Reply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *Reply) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *Reply) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Reply) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type KeyValue struct {
	Key    []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value  []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Height uint64 `protobuf:"varint,3,opt,name=height" json:"height,omitempty"`
}

func (m *KeyValue) Reset()                    { *m = KeyValue{} }
func (m *KeyValue) String() string            { return proto1.CompactTextString(m) }
func (*KeyValue) ProtoMessage()               {}
func (*KeyValue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *KeyValue) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *KeyValue) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *KeyValue) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type Key struct {
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *Key) Reset()                    { *m = Key{} }
func (m *Key) String() string            { return proto1.CompactTextString(m) }
func (*Key) ProtoMessage()               {}
func (*Key) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *Key) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

type NodeInfo struct {
	Version string `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
}

func (m *NodeInfo) Reset()                    { *m = NodeInfo{} }
func (m *NodeInfo) String() string            { return proto1.CompactTextString(m) }
func (*NodeInfo) ProtoMessage()               {}
func (*NodeInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *NodeInfo) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func init() {
	proto1.RegisterType((*DBVCInstructionHeader)(nil), "apiProto.DBVCInstructionHeader")
	proto1.RegisterType((*BVCEntry)(nil), "apiProto.BVCEntry")
	proto1.RegisterType((*Submission)(nil), "apiProto.Submission")
	proto1.RegisterType((*BVCEntryResponse)(nil), "apiProto.BVCEntryResponse")
	proto1.RegisterType((*ValRequest)(nil), "apiProto.ValRequest")
	proto1.RegisterType((*ValReponse)(nil), "apiProto.ValReponse")
	proto1.RegisterType((*Entry)(nil), "apiProto.Entry")
	proto1.RegisterType((*Height)(nil), "apiProto.Height")
	proto1.RegisterType((*EntryBytes)(nil), "apiProto.EntryBytes")
	proto1.RegisterType((*Account)(nil), "apiProto.Account")
	proto1.RegisterType((*Account_Group)(nil), "apiProto.Account.Group")
	proto1.RegisterType((*Group)(nil), "apiProto.Group")
	proto1.RegisterType((*AccountAdd)(nil), "apiProto.AccountAdd")
	proto1.RegisterType((*GasAllowanceUpdate)(nil), "apiProto.GasAllowanceUpdate")
	proto1.RegisterType((*Reply)(nil), "apiProto.Reply")
	proto1.RegisterType((*KeyValue)(nil), "apiProto.KeyValue")
	proto1.RegisterType((*Key)(nil), "apiProto.Key")
	proto1.RegisterType((*NodeInfo)(nil), "apiProto.NodeInfo")
	proto1.RegisterEnum("apiProto.DBVCInstructionHeaderInsType", DBVCInstructionHeaderInsType_name, DBVCInstructionHeaderInsType_value)
	proto1.RegisterEnum("apiProto.Submission_Type", Submission_Type_name, Submission_Type_value)
	proto1.RegisterEnum("apiProto.EntryMsgType", EntryMsgType_name, EntryMsgType_value)
}

func init() { proto1.RegisterFile("api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1118 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xdd, 0x6e, 0x1b, 0x37,
	0x13, 0xd5, 0xdf, 0xea, 0x67, 0x24, 0xdb, 0x6b, 0xc6, 0x89, 0xf5, 0xf9, 0x2b, 0x5a, 0x81, 0x08,
	0x5a, 0xa3, 0x05, 0xd6, 0x88, 0x12, 0x20, 0x28, 0x8a, 0x5e, 0xc8, 0x56, 0xe0, 0xa8, 0x46, 0x83,
	0x80, 0x71, 0x9c, 0xa2, 0x37, 0x05, 0xad, 0x9d, 0x48, 0x8b, 0x48, 0xbb, 0x5b, 0x72, 0x25, 0x43,
	0x37, 0x7d, 0x8c, 0xa2, 0xf7, 0x79, 0x85, 0x3e, 0x4b, 0x5f, 0xa4, 0x2f, 0x50, 0x70, 0x96, 0xab,
	0x5d, 0x59, 0x2a, 0x72, 0xd3, 0x2b, 0x71, 0x0e, 0x0f, 0xc9, 0xe1, 0x9c, 0x33, 0xd4, 0x42, 0x4b,
	0xc6, 0x81, 0x17, 0xab, 0x28, 0x89, 0x58, 0x53, 0xc6, 0xc1, 0x6b, 0x33, 0x3a, 0xf9, 0xff, 0x24,
	0x8a, 0x26, 0x33, 0x3c, 0x23, 0xfc, 0x76, 0xf1, 0xfe, 0x0c, 0xe7, 0x71, 0xb2, 0x4a, 0x69, 0xfc,
	0xef, 0x0a, 0x3c, 0x1c, 0x9e, 0xdf, 0x5c, 0x8c, 0x42, 0x9d, 0xa8, 0xc5, 0x38, 0x09, 0xa2, 0xf0,
	0x25, 0x4a, 0x1f, 0x15, 0x1b, 0x41, 0x3b, 0xc8, 0xc1, 0x6e, 0xb9, 0x57, 0x3e, 0xdd, 0xef, 0x7f,
	0xe5, 0x65, 0xdb, 0x7a, 0x3b, 0x57, 0x79, 0x41, 0xa8, 0xaf, 0x57, 0x31, 0x8a, 0xe2, 0x5a, 0xd6,
	0x85, 0xc6, 0x12, 0x95, 0x36, 0xdb, 0x54, 0x7a, 0xe5, 0xd3, 0x3d, 0x91, 0x85, 0xcc, 0x03, 0x76,
	0xbb, 0x1c, 0xff, 0x28, 0x75, 0x82, 0xea, 0x62, 0x2a, 0x83, 0x70, 0x38, 0x1c, 0x8d, 0xba, 0xd5,
	0x5e, 0xf9, 0xb4, 0x23, 0x76, 0xcc, 0xb0, 0xaf, 0xc1, 0xbd, 0x5d, 0x8e, 0x6f, 0xe4, 0x2c, 0xf0,
	0x65, 0x12, 0x29, 0x62, 0xd7, 0x88, 0xbd, 0x85, 0xf3, 0x3f, 0xca, 0xd0, 0xb0, 0xe9, 0xb0, 0x36,
	0x34, 0xde, 0x86, 0x1f, 0xc2, 0xe8, 0x2e, 0x74, 0x4b, 0xec, 0x00, 0xda, 0x2f, 0xc2, 0x44, 0xad,
	0xde, 0x2c, 0x6e, 0xe7, 0x41, 0xe2, 0x96, 0xd7, 0x80, 0xc0, 0x25, 0xca, 0x99, 0x5b, 0x61, 0x1d,
	0x68, 0x0e, 0x7c, 0x9f, 0x8e, 0x75, 0xab, 0x66, 0x5a, 0xe0, 0x3c, 0x5a, 0x62, 0x0a, 0xd4, 0xd8,
	0x31, 0x3c, 0x10, 0x38, 0x09, 0x4c, 0x6a, 0x85, 0x04, 0x5d, 0x87, 0x3d, 0x84, 0xc3, 0x94, 0x59,
	0x84, 0xeb, 0xe9, 0x06, 0x29, 0x7f, 0x30, 0x1c, 0xb9, 0x0d, 0x7e, 0x07, 0xcd, 0xf3, 0x9b, 0x0b,
	0x3a, 0x93, 0x3d, 0x87, 0xfa, 0x94, 0x6a, 0x47, 0x25, 0x6e, 0xf7, 0xbf, 0xf8, 0x44, 0x89, 0x85,
	0xa5, 0xb3, 0x23, 0x70, 0xd0, 0xec, 0x40, 0x35, 0xed, 0x88, 0x34, 0x60, 0x9f, 0x41, 0x4b, 0x07,
	0x93, 0x50, 0x26, 0x0b, 0x85, 0xb6, 0x90, 0x39, 0xc0, 0xff, 0xac, 0x00, 0xd0, 0xb5, 0xb5, 0xb6,
	0xc2, 0x48, 0xdf, 0x57, 0xa8, 0x35, 0x1d, 0x5e, 0x13, 0x59, 0xc8, 0xce, 0xc0, 0x19, 0xcf, 0xa4,
	0xd6, 0xb4, 0xf9, 0x7e, 0xff, 0x7f, 0x79, 0x52, 0xf9, 0x72, 0x8f, 0x94, 0x4e, 0x79, 0xac, 0xb7,
	0x69, 0x97, 0x2a, 0xe9, 0xbc, 0xe1, 0x82, 0x47, 0x50, 0x8f, 0xa5, 0x92, 0xf3, 0x27, 0xa4, 0x58,
	0x4d, 0xd8, 0x68, 0x8d, 0xf7, 0xbb, 0x4e, 0x01, 0xef, 0x33, 0x06, 0x35, 0x5f, 0x26, 0xb2, 0x5b,
	0xa7, 0x4b, 0xd0, 0x98, 0x2f, 0xa0, 0xb6, 0xad, 0xa7, 0x0b, 0x1d, 0x2a, 0xe5, 0x2f, 0x17, 0xd1,
	0x3c, 0x15, 0x74, 0x8d, 0xac, 0x15, 0x75, 0xa1, 0x43, 0x6a, 0x64, 0x1c, 0x52, 0xf5, 0x5a, 0xc9,
	0x50, 0x4b, 0xca, 0xce, 0xad, 0xb1, 0x16, 0x38, 0x03, 0x7f, 0x4e, 0x3a, 0xee, 0x03, 0x0c, 0x86,
	0xa3, 0x8c, 0x5b, 0xe7, 0xd7, 0xe0, 0x66, 0x7a, 0x09, 0xd4, 0x71, 0x14, 0x6a, 0x64, 0x1c, 0x3a,
	0xca, 0x8e, 0x87, 0x26, 0xcd, 0x32, 0xa5, 0xb9, 0x81, 0x19, 0x31, 0x50, 0xa9, 0x48, 0x5d, 0x44,
	0x3e, 0x52, 0x25, 0x6b, 0x22, 0x07, 0xf8, 0x5f, 0x65, 0x80, 0x1b, 0x39, 0x13, 0xf8, 0xeb, 0x02,
	0x75, 0xc2, 0x1e, 0xc3, 0xde, 0x32, 0x33, 0xf0, 0xc0, 0xf7, 0x95, 0x95, 0x64, 0x13, 0xbc, 0x5f,
	0xe7, 0xca, 0x76, 0x9d, 0x3f, 0x07, 0xa0, 0x0a, 0x62, 0x82, 0xea, 0x89, 0x15, 0xa2, 0x80, 0x6c,
	0xcc, 0xf7, 0x49, 0x8b, 0xe2, 0x7c, 0xdf, 0xf8, 0x2a, 0x8c, 0xc2, 0x31, 0x5a, 0x39, 0xd2, 0x60,
	0x97, 0x1a, 0x46, 0x39, 0x63, 0x2d, 0xf4, 0xbb, 0x0d, 0x42, 0x6d, 0xc4, 0x5f, 0xd9, 0x7b, 0xfd,
	0x57, 0x85, 0xfa, 0xbd, 0x02, 0x4e, 0xda, 0x2c, 0x2e, 0x54, 0x3f, 0xe0, 0xca, 0x6e, 0x61, 0x86,
	0xec, 0x5b, 0x68, 0xcf, 0x51, 0x6b, 0x39, 0x41, 0x63, 0x0c, 0x6b, 0xd7, 0xe3, 0xdc, 0xae, 0xb4,
	0xce, 0x9b, 0xeb, 0x49, 0xfa, 0x2c, 0x15, 0xb8, 0xf9, 0x45, 0xab, 0xbb, 0x2e, 0x5a, 0xdb, 0x79,
	0x51, 0x67, 0xe3, 0xa2, 0xbf, 0x41, 0xc3, 0xee, 0xcc, 0x1e, 0xc0, 0xc1, 0x3b, 0x15, 0x24, 0x48,
	0xe7, 0x9d, 0xaf, 0x12, 0xd4, 0x6e, 0x89, 0x1d, 0xc2, 0x1e, 0x81, 0x57, 0xb8, 0xba, 0x91, 0xb3,
	0x05, 0xa6, 0xd6, 0x14, 0x28, 0xfd, 0x35, 0x42, 0xd6, 0x1c, 0x8c, 0xc7, 0xd1, 0x22, 0x4c, 0x88,
	0xeb, 0xfa, 0xc6, 0x9a, 0x16, 0x31, 0x54, 0x17, 0xd9, 0x23, 0x60, 0x97, 0x52, 0x0f, 0x66, 0xb3,
	0xe8, 0x4e, 0x86, 0x63, 0x7c, 0x1b, 0xfb, 0x32, 0x41, 0x37, 0xe0, 0x3d, 0xa8, 0xbf, 0xc4, 0x60,
	0x32, 0x4d, 0x4c, 0x86, 0x53, 0x1a, 0x59, 0xd7, 0xd8, 0x88, 0xf7, 0x00, 0xf2, 0x8c, 0xcc, 0xdd,
	0x0a, 0x12, 0xd0, 0x98, 0x7f, 0xac, 0x40, 0xc3, 0x9e, 0x66, 0xe6, 0x43, 0x39, 0x47, 0x9a, 0x6f,
	0x09, 0x1a, 0x9b, 0x2a, 0x45, 0x77, 0x21, 0x2a, 0x2a, 0x6d, 0x4b, 0xa4, 0x81, 0x79, 0x88, 0x6d,
	0x29, 0xd7, 0x59, 0x51, 0x19, 0x1d, 0xb1, 0x85, 0xb3, 0x33, 0xa8, 0x4f, 0x54, 0xb4, 0x88, 0x75,
	0xb7, 0xd6, 0xab, 0x9e, 0xb6, 0x8b, 0xea, 0xd8, 0x83, 0xbd, 0x4b, 0x33, 0x2f, 0x2c, 0xcd, 0x6c,
	0x2e, 0xcd, 0xea, 0x81, 0xef, 0x5b, 0x82, 0xa6, 0xc2, 0x37, 0xc5, 0x16, 0xce, 0xbe, 0x84, 0xfd,
	0x0c, 0xbb, 0x4c, 0x0f, 0xa9, 0x13, 0xf3, 0x1e, 0x7a, 0xf2, 0x3d, 0x38, 0x34, 0xda, 0x79, 0xc7,
	0x1e, 0xb4, 0xa5, 0x69, 0x7d, 0x61, 0x6a, 0x96, 0xbe, 0x79, 0x4d, 0x51, 0x84, 0xf8, 0xa7, 0x96,
	0xfb, 0xa8, 0xc7, 0x2a, 0x88, 0xd7, 0x3d, 0xd9, 0x12, 0x45, 0x88, 0xbf, 0x03, 0xb0, 0x19, 0x0f,
	0x7c, 0xdf, 0xb8, 0x3d, 0x5e, 0xdc, 0xce, 0x82, 0xf1, 0xd5, 0xda, 0xcb, 0x39, 0xc0, 0xbe, 0x81,
	0x86, 0x4c, 0xb9, 0xb4, 0x53, 0xbb, 0x7f, 0xb8, 0x55, 0x2f, 0x91, 0x31, 0xf8, 0x4f, 0xbb, 0x9c,
	0x61, 0x5a, 0xdc, 0x12, 0xf2, 0x13, 0x0a, 0x88, 0x69, 0xc9, 0x49, 0x61, 0x15, 0x9d, 0xe3, 0x88,
	0x0d, 0x8c, 0x8f, 0xc0, 0x11, 0x18, 0xcf, 0x56, 0xe6, 0xc6, 0x53, 0xa9, 0xa7, 0x99, 0x69, 0xcc,
	0xb8, 0x60, 0xb7, 0x4a, 0xd1, 0x6e, 0xf4, 0x9f, 0x64, 0xda, 0x96, 0xbc, 0xd0, 0x12, 0x69, 0xc0,
	0x7f, 0x80, 0x66, 0xe6, 0xf7, 0x1d, 0x1d, 0x7c, 0x04, 0xce, 0xd2, 0x4c, 0x65, 0xff, 0x63, 0x14,
	0x14, 0x4e, 0xa8, 0x6e, 0x18, 0xfa, 0x18, 0xaa, 0xe6, 0x06, 0x5b, 0xdb, 0xf0, 0xc7, 0xd0, 0x7c,
	0x15, 0xf9, 0x38, 0x0a, 0xdf, 0x47, 0xc5, 0x0f, 0x8e, 0x54, 0xa7, 0x2c, 0xec, 0x7f, 0xac, 0x00,
	0x0c, 0xe2, 0xe0, 0x0d, 0xaa, 0x65, 0x30, 0x46, 0xf6, 0x0c, 0x5a, 0xaf, 0x23, 0x9d, 0xa4, 0x8f,
	0xcb, 0xd1, 0xbd, 0x57, 0x83, 0x7a, 0xe6, 0xe4, 0x20, 0x47, 0xa9, 0x1e, 0xbc, 0xc4, 0x9e, 0x6e,
	0xf6, 0x30, 0xdb, 0xcb, 0x29, 0x57, 0xb8, 0x3a, 0x61, 0x1b, 0x21, 0x51, 0x78, 0x89, 0x3d, 0x83,
	0x7d, 0xfb, 0xd2, 0x67, 0xdd, 0x76, 0x6f, 0xd9, 0xb6, 0xcc, 0xbc, 0xc4, 0x9e, 0x43, 0xeb, 0x12,
	0x93, 0xac, 0xc9, 0xbd, 0xf4, 0x53, 0xce, 0xcb, 0x3e, 0xe5, 0xbc, 0x17, 0xe6, 0x53, 0xee, 0xc4,
	0xcd, 0x57, 0xa6, 0x4c, 0x5e, 0x62, 0xdf, 0x41, 0xfb, 0x12, 0x93, 0x75, 0x45, 0xfe, 0x6d, 0x69,
	0x21, 0xd7, 0x8c, 0xcb, 0x4b, 0xe7, 0xad, 0x9f, 0x1b, 0x9e, 0xfd, 0x5e, 0xac, 0xd3, 0xcf, 0xd3,
	0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x7c, 0xad, 0x95, 0xbf, 0x5b, 0x0a, 0x00, 0x00,
}
