// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ApiServiceClient is the client API for ApiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiServiceClient interface {
	PostEntry(ctx context.Context, in *EntryBytes, opts ...grpc.CallOption) (*Reply, error)
	ReadKeyValue(ctx context.Context, in *Key, opts ...grpc.CallOption) (*KeyValue, error)
	RequestAccount(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Account, error)
	GetHeight(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Height, error)
	GetNodeInfo(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*NodeInfo, error)
	// Obtains the feature at a given position.
	ProcessTx(ctx context.Context, in *Submission, opts ...grpc.CallOption) (*SubmissionResponse, error)
	QueryShardCount(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ShardCountResponse, error)
	QueryShard(ctx context.Context, in *ShardQuery, opts ...grpc.CallOption) (*ShardResponse, error)
	Query(ctx context.Context, in *AccQuery, opts ...grpc.CallOption) (*AccQueryResp, error)
}

type apiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApiServiceClient(cc grpc.ClientConnInterface) ApiServiceClient {
	return &apiServiceClient{cc}
}

func (c *apiServiceClient) PostEntry(ctx context.Context, in *EntryBytes, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/apiProto.ApiService/PostEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ReadKeyValue(ctx context.Context, in *Key, opts ...grpc.CallOption) (*KeyValue, error) {
	out := new(KeyValue)
	err := c.cc.Invoke(ctx, "/apiProto.ApiService/ReadKeyValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) RequestAccount(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Account, error) {
	out := new(Account)
	err := c.cc.Invoke(ctx, "/apiProto.ApiService/RequestAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetHeight(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Height, error) {
	out := new(Height)
	err := c.cc.Invoke(ctx, "/apiProto.ApiService/GetHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetNodeInfo(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*NodeInfo, error) {
	out := new(NodeInfo)
	err := c.cc.Invoke(ctx, "/apiProto.ApiService/GetNodeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ProcessTx(ctx context.Context, in *Submission, opts ...grpc.CallOption) (*SubmissionResponse, error) {
	out := new(SubmissionResponse)
	err := c.cc.Invoke(ctx, "/apiProto.ApiService/ProcessTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) QueryShardCount(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ShardCountResponse, error) {
	out := new(ShardCountResponse)
	err := c.cc.Invoke(ctx, "/apiProto.ApiService/QueryShardCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) QueryShard(ctx context.Context, in *ShardQuery, opts ...grpc.CallOption) (*ShardResponse, error) {
	out := new(ShardResponse)
	err := c.cc.Invoke(ctx, "/apiProto.ApiService/QueryShard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) Query(ctx context.Context, in *AccQuery, opts ...grpc.CallOption) (*AccQueryResp, error) {
	out := new(AccQueryResp)
	err := c.cc.Invoke(ctx, "/apiProto.ApiService/Query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiServiceServer is the server API for ApiService service.
// All implementations must embed UnimplementedApiServiceServer
// for forward compatibility
type ApiServiceServer interface {
	PostEntry(context.Context, *EntryBytes) (*Reply, error)
	ReadKeyValue(context.Context, *Key) (*KeyValue, error)
	RequestAccount(context.Context, *Key) (*Account, error)
	GetHeight(context.Context, *empty.Empty) (*Height, error)
	GetNodeInfo(context.Context, *empty.Empty) (*NodeInfo, error)
	// Obtains the feature at a given position.
	ProcessTx(context.Context, *Submission) (*SubmissionResponse, error)
	QueryShardCount(context.Context, *empty.Empty) (*ShardCountResponse, error)
	QueryShard(context.Context, *ShardQuery) (*ShardResponse, error)
	Query(context.Context, *AccQuery) (*AccQueryResp, error)
	mustEmbedUnimplementedApiServiceServer()
}

// UnimplementedApiServiceServer must be embedded to have forward compatible implementations.
type UnimplementedApiServiceServer struct {
}

func (UnimplementedApiServiceServer) PostEntry(context.Context, *EntryBytes) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostEntry not implemented")
}
func (UnimplementedApiServiceServer) ReadKeyValue(context.Context, *Key) (*KeyValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadKeyValue not implemented")
}
func (UnimplementedApiServiceServer) RequestAccount(context.Context, *Key) (*Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestAccount not implemented")
}
func (UnimplementedApiServiceServer) GetHeight(context.Context, *empty.Empty) (*Height, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHeight not implemented")
}
func (UnimplementedApiServiceServer) GetNodeInfo(context.Context, *empty.Empty) (*NodeInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeInfo not implemented")
}
func (UnimplementedApiServiceServer) ProcessTx(context.Context, *Submission) (*SubmissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessTx not implemented")
}
func (UnimplementedApiServiceServer) QueryShardCount(context.Context, *empty.Empty) (*ShardCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryShardCount not implemented")
}
func (UnimplementedApiServiceServer) QueryShard(context.Context, *ShardQuery) (*ShardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryShard not implemented")
}
func (UnimplementedApiServiceServer) Query(context.Context, *AccQuery) (*AccQueryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedApiServiceServer) mustEmbedUnimplementedApiServiceServer() {}

// UnsafeApiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiServiceServer will
// result in compilation errors.
type UnsafeApiServiceServer interface {
	mustEmbedUnimplementedApiServiceServer()
}

func RegisterApiServiceServer(s grpc.ServiceRegistrar, srv ApiServiceServer) {
	s.RegisterService(&_ApiService_serviceDesc, srv)
}

func _ApiService_PostEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntryBytes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).PostEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiProto.ApiService/PostEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).PostEntry(ctx, req.(*EntryBytes))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ReadKeyValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ReadKeyValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiProto.ApiService/ReadKeyValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ReadKeyValue(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_RequestAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).RequestAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiProto.ApiService/RequestAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).RequestAccount(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiProto.ApiService/GetHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetHeight(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetNodeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetNodeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiProto.ApiService/GetNodeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetNodeInfo(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ProcessTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Submission)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ProcessTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiProto.ApiService/ProcessTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ProcessTx(ctx, req.(*Submission))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_QueryShardCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).QueryShardCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiProto.ApiService/QueryShardCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).QueryShardCount(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_QueryShard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShardQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).QueryShard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiProto.ApiService/QueryShard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).QueryShard(ctx, req.(*ShardQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiProto.ApiService/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).Query(ctx, req.(*AccQuery))
	}
	return interceptor(ctx, in, info, handler)
}

var _ApiService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "apiProto.ApiService",
	HandlerType: (*ApiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostEntry",
			Handler:    _ApiService_PostEntry_Handler,
		},
		{
			MethodName: "ReadKeyValue",
			Handler:    _ApiService_ReadKeyValue_Handler,
		},
		{
			MethodName: "RequestAccount",
			Handler:    _ApiService_RequestAccount_Handler,
		},
		{
			MethodName: "GetHeight",
			Handler:    _ApiService_GetHeight_Handler,
		},
		{
			MethodName: "GetNodeInfo",
			Handler:    _ApiService_GetNodeInfo_Handler,
		},
		{
			MethodName: "ProcessTx",
			Handler:    _ApiService_ProcessTx_Handler,
		},
		{
			MethodName: "QueryShardCount",
			Handler:    _ApiService_QueryShardCount_Handler,
		},
		{
			MethodName: "QueryShard",
			Handler:    _ApiService_QueryShard_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _ApiService_Query_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
