package protocol

// GENERATED BY go run ./tools/cmd/gen-enum. DO NOT EDIT.

import (
	"encoding/json"
	"fmt"
	"strings"
)

// AccountAuthOperationTypeUnknown is used when the authorization operation is not known.
const AccountAuthOperationTypeUnknown AccountAuthOperationType = 0

// AccountAuthOperationTypeEnable enables authorization checks for an authority.
const AccountAuthOperationTypeEnable AccountAuthOperationType = 1

// AccountAuthOperationTypeDisable disables authorization checks for an authority.
const AccountAuthOperationTypeDisable AccountAuthOperationType = 2

// AccountAuthOperationTypeAddAuthority adds an authority.
const AccountAuthOperationTypeAddAuthority AccountAuthOperationType = 3

// AccountAuthOperationTypeRemoveAuthority removes an authority.
const AccountAuthOperationTypeRemoveAuthority AccountAuthOperationType = 4

// AccountTypeUnknown represents an unknown account type.
const AccountTypeUnknown AccountType = 0

// AccountTypeAnchor is one or more Merkle DAG anchors.
const AccountTypeAnchor AccountType = 1

// AccountTypeIdentity is an Identity account, aka an ADI.
const AccountTypeIdentity AccountType = 2

// AccountTypeTokenIssuer is a Token Issuer account.
const AccountTypeTokenIssuer AccountType = 3

// AccountTypeTokenAccount is an ADI Token Account.
const AccountTypeTokenAccount AccountType = 4

// AccountTypeLiteTokenAccount is a Lite Token Account.
const AccountTypeLiteTokenAccount AccountType = 5

// AccountTypeKeyPage is a Key Page account.
const AccountTypeKeyPage AccountType = 9

// AccountTypeKeyBook is a Key Book account.
const AccountTypeKeyBook AccountType = 10

// AccountTypeDataAccount is an ADI Data Account.
const AccountTypeDataAccount AccountType = 11

// AccountTypeLiteDataAccount is a Lite Data Account.
const AccountTypeLiteDataAccount AccountType = 12

// AccountTypeInternalLedger is a ledger that tracks the state of internal operations.
const AccountTypeInternalLedger AccountType = 14

// AccountTypeLiteIdentity is a lite identity account.
const AccountTypeLiteIdentity AccountType = 15

// AccountTypeInternalSyntheticLedger is a ledger that tracks the status of unsent synthetic transactions.
const AccountTypeInternalSyntheticLedger AccountType = 16

// AllowedTransactionBitUpdateKeyPage is the offset of the UpdateKeyPage bit.
const AllowedTransactionBitUpdateKeyPage AllowedTransactionBit = 1

// AllowedTransactionBitUpdateAccountAuth is the offset of the UpdateAccountAuth bit.
const AllowedTransactionBitUpdateAccountAuth AllowedTransactionBit = 2

// ChainTypeUnknown is used when the chain type is not known.
const ChainTypeUnknown ChainType = 0

// ChainTypeTransaction holds transaction hashes.
const ChainTypeTransaction ChainType = 1

// ChainTypeAnchor holds chain anchors.
const ChainTypeAnchor ChainType = 2

// ChainTypeData holds data entry hashes.
const ChainTypeData ChainType = 3

// ChainTypeIndex indexes other chains.
const ChainTypeIndex ChainType = 4

// ErrorCodeOK indicates the request succeeded.
const ErrorCodeOK ErrorCode = 0

// ErrorCodeEncodingError indicates something could not be decoded or encoded.
const ErrorCodeEncodingError ErrorCode = 1

// ErrorCodeBadNonce indicates the transaction nonce was rejected.
const ErrorCodeBadNonce ErrorCode = 2

// ErrorCodeDidPanic indicates the request failed due to a fatal error.
const ErrorCodeDidPanic ErrorCode = 3

// ErrorCodeUnknownError indicates the request failed due to an unknown error.
const ErrorCodeUnknownError ErrorCode = 4

// ErrorCodeNotFound indicates the request specified a record that does not exist.
const ErrorCodeNotFound ErrorCode = 5

// ErrorCodeTxnRange is returned when txn range query fails.
const ErrorCodeTxnRange ErrorCode = 6

// ErrorCodeTxnHistory is returned when txn history query fails.
const ErrorCodeTxnHistory ErrorCode = 7

// ErrorCodeInvalidURL is returned when invalid URL is passed in query.
const ErrorCodeInvalidURL ErrorCode = 8

// ErrorCodeDirectoryURL is returned when invalid directory URL is passed in query.
const ErrorCodeDirectoryURL ErrorCode = 9

// ErrorCodeChainIdError is returned when query by in id fails.
const ErrorCodeChainIdError ErrorCode = 10

// ErrorCodeRoutingChainId is returned when setting routing chain id fails.
const ErrorCodeRoutingChainId ErrorCode = 11

// ErrorCodeCheckTxError is returned when txn validation check fails.
const ErrorCodeCheckTxError ErrorCode = 12

// ErrorCodeDeliverTxError is returned when txn deliver method fails.
const ErrorCodeDeliverTxError ErrorCode = 13

// ErrorCodeTxnStateError is returned when adding txn to state fails.
const ErrorCodeTxnStateError ErrorCode = 14

// ErrorCodeRecordTxnError is returned when storing pending state updates fail.
const ErrorCodeRecordTxnError ErrorCode = 15

// ErrorCodeSyntheticTxnError is returned when submit synthetic txn fails.
const ErrorCodeSyntheticTxnError ErrorCode = 16

// ErrorCodeMarshallingError is returned when marshaling  object or binary fails.
const ErrorCodeMarshallingError ErrorCode = 17

// ErrorCodeUnMarshallingError is returned when unmarshaling  object or binary fails.
const ErrorCodeUnMarshallingError ErrorCode = 18

// ErrorCodeInvalidQueryType is returned when query type in request is not matched with the available ones.
const ErrorCodeInvalidQueryType ErrorCode = 19

// ErrorCodeInvalidTxnType is returned when txn type passed is not available.
const ErrorCodeInvalidTxnType ErrorCode = 20

// ErrorCodeValidateTxnError is returned when execution validation of txn fails.
const ErrorCodeValidateTxnError ErrorCode = 21

// ErrorCodeInvalidTxnError is returned when txn doesn't contains proper data.
const ErrorCodeInvalidTxnError ErrorCode = 22

// ErrorCodeAddTxnError is returned when adding txn to state db fails.
const ErrorCodeAddTxnError ErrorCode = 23

// ErrorCodeDataUrlError is returned when a url passed to a data query fails.
const ErrorCodeDataUrlError ErrorCode = 24

// ErrorCodeDataEntryHashError is returned when an entry hash query fails on a data chain.
const ErrorCodeDataEntryHashError ErrorCode = 25

// ErrorCodeTxnQueryError is returned when txn is not found.
const ErrorCodeTxnQueryError ErrorCode = 26

// ErrorCodeInvalidRequest indicates the request was invalid.
const ErrorCodeInvalidRequest ErrorCode = 27

// ErrorCodeInvalidSignature indicates an envelope signature was invalid.
const ErrorCodeInvalidSignature ErrorCode = 28

// ErrorCodeInsufficientCredits indicates the signer does not have sufficient credits to execute the transaction.
const ErrorCodeInsufficientCredits ErrorCode = 29

// ErrorCodeBadVersion indicates the signature refers to an out of date version of the signer.
const ErrorCodeBadVersion ErrorCode = 30

// ErrorCodeInternal indicates an internal error.
const ErrorCodeInternal ErrorCode = 31

// ErrorCodeAlreadyDelivered indicates the transaction has already been delivered.
const ErrorCodeAlreadyDelivered ErrorCode = 32

// ErrorCodeUnauthorized indicates the signer is not authorized to sign a transaction.
const ErrorCodeUnauthorized ErrorCode = 33

// KeyPageOperationTypeUnknown is used when the key page operation is not known.
const KeyPageOperationTypeUnknown KeyPageOperationType = 0

// KeyPageOperationTypeUpdate replaces a key in the page with a new key.
const KeyPageOperationTypeUpdate KeyPageOperationType = 1

// KeyPageOperationTypeRemove removes a key from the page.
const KeyPageOperationTypeRemove KeyPageOperationType = 2

// KeyPageOperationTypeAdd adds a key to the page.
const KeyPageOperationTypeAdd KeyPageOperationType = 3

// KeyPageOperationTypeSetThreshold sets the signing threshold (the M of "M of N" signatures required).
const KeyPageOperationTypeSetThreshold KeyPageOperationType = 4

// KeyPageOperationTypeUpdateAllowed updates the transactions the key page is allowed to execute.
const KeyPageOperationTypeUpdateAllowed KeyPageOperationType = 5

// ObjectTypeUnknown is used when the object type is not known.
const ObjectTypeUnknown ObjectType = 0

// ObjectTypeAccount represents an account object.
const ObjectTypeAccount ObjectType = 1

// ObjectTypeTransaction represents a transaction object.
const ObjectTypeTransaction ObjectType = 2

// SignatureTypeUnknown is used when the signature type is not known.
const SignatureTypeUnknown SignatureType = 0

// SignatureTypeLegacyED25519 represents a legacy ED25519 signature.
const SignatureTypeLegacyED25519 SignatureType = 1

// SignatureTypeED25519 represents an ED25519 signature.
const SignatureTypeED25519 SignatureType = 2

// SignatureTypeRCD1 represents an RCD1 signature.
const SignatureTypeRCD1 SignatureType = 3

// SignatureTypeReceipt represents a Merkle tree receipt.
const SignatureTypeReceipt SignatureType = 4

// SignatureTypeSynthetic is used when sending synthetic transactions.
const SignatureTypeSynthetic SignatureType = 5

// SignatureTypeInternal is used when executing transactions internally.
const SignatureTypeInternal SignatureType = 6

// TransactionMaxUser is the highest number reserved for user transactions.
const TransactionMaxUser TransactionMax = 48

// TransactionMaxSynthetic is the highest number reserved for synthetic transactions.
const TransactionMaxSynthetic TransactionMax = 95

// TransactionMaxInternal is the highest number reserved for internal transactions.
const TransactionMaxInternal TransactionMax = 255

// TransactionTypeUnknown represents an unknown transaction type.
const TransactionTypeUnknown TransactionType = 0

// TransactionTypeCreateIdentity creates an ADI, which produces a synthetic chain.
const TransactionTypeCreateIdentity TransactionType = 1

// TransactionTypeCreateTokenAccount creates an ADI token account, which produces a synthetic chain create transaction.
const TransactionTypeCreateTokenAccount TransactionType = 2

// TransactionTypeSendTokens transfers tokens between token accounts, which produces a synthetic deposit tokens transaction.
const TransactionTypeSendTokens TransactionType = 3

// TransactionTypeCreateDataAccount creates an ADI Data Account, which produces a synthetic chain create transaction.
const TransactionTypeCreateDataAccount TransactionType = 4

// TransactionTypeWriteData writes data to an ADI Data Account, which *does not* produce a synthetic transaction.
const TransactionTypeWriteData TransactionType = 5

// TransactionTypeWriteDataTo writes data to a Lite Data Account, which produces a synthetic write data transaction.
const TransactionTypeWriteDataTo TransactionType = 6

// TransactionTypeAcmeFaucet produces a synthetic deposit tokens transaction that deposits ACME tokens into a lite token account.
const TransactionTypeAcmeFaucet TransactionType = 7

// TransactionTypeCreateToken creates a token issuer, which produces a synthetic chain create transaction.
const TransactionTypeCreateToken TransactionType = 8

// TransactionTypeIssueTokens issues tokens to a token account, which produces a synthetic token deposit transaction.
const TransactionTypeIssueTokens TransactionType = 9

// TransactionTypeBurnTokens burns tokens from a token account, which produces a synthetic burn tokens transaction.
const TransactionTypeBurnTokens TransactionType = 10

// TransactionTypeCreateKeyPage creates a key page, which produces a synthetic chain create transaction.
const TransactionTypeCreateKeyPage TransactionType = 12

// TransactionTypeCreateKeyBook creates a key book, which produces a synthetic chain create transaction.
const TransactionTypeCreateKeyBook TransactionType = 13

// TransactionTypeAddCredits converts ACME tokens to credits, which produces a synthetic deposit credits transaction.
const TransactionTypeAddCredits TransactionType = 14

// TransactionTypeUpdateKeyPage adds, removes, or updates keys in a key page, which *does not* produce a synthetic transaction.
const TransactionTypeUpdateKeyPage TransactionType = 15

// TransactionTypeAddValidator add a validator.
const TransactionTypeAddValidator TransactionType = 18

// TransactionTypeRemoveValidator remove a validator.
const TransactionTypeRemoveValidator TransactionType = 19

// TransactionTypeUpdateValidatorKey update a validator key.
const TransactionTypeUpdateValidatorKey TransactionType = 20

// TransactionTypeUpdateAccountAuth updates authorization for an account.
const TransactionTypeUpdateAccountAuth TransactionType = 21

// TransactionTypeUpdateKey update key for existing keys.
const TransactionTypeUpdateKey TransactionType = 22

// TransactionTypeSignPending is used to sign a pending transaction.
const TransactionTypeSignPending TransactionType = 48

// TransactionTypeSyntheticCreateChain creates or updates chains.
const TransactionTypeSyntheticCreateChain TransactionType = 49

// TransactionTypeSyntheticWriteData writes data to a data account.
const TransactionTypeSyntheticWriteData TransactionType = 50

// TransactionTypeSyntheticDepositTokens deposits tokens into token accounts.
const TransactionTypeSyntheticDepositTokens TransactionType = 51

// TransactionTypeSyntheticAnchor anchors one network to another.
const TransactionTypeSyntheticAnchor TransactionType = 52

// TransactionTypeSyntheticDepositCredits deposits credits into a credit holder.
const TransactionTypeSyntheticDepositCredits TransactionType = 53

// TransactionTypeSyntheticBurnTokens returns tokens to a token issuer's pool of issuable tokens.
const TransactionTypeSyntheticBurnTokens TransactionType = 54

// TransactionTypeSyntheticMirror mirrors records from one network to another.
const TransactionTypeSyntheticMirror TransactionType = 56

// TransactionTypeSegWitDataEntry is a surrogate transaction segregated witness for a WriteData transaction.
const TransactionTypeSegWitDataEntry TransactionType = 57

// TransactionTypeSyntheticReceipt notifies the sender of synthetic transactions when a transaction has failed..
const TransactionTypeSyntheticReceipt TransactionType = 64

// TransactionTypeInternalGenesis initializes system chains.
const TransactionTypeInternalGenesis TransactionType = 96

// TransactionTypeInternalSendTransactions reserved for internal send.
const TransactionTypeInternalSendTransactions TransactionType = 97

// TransactionTypeInternalTransactionsSigned notifies the executor of synthetic transactions that have been signed.
const TransactionTypeInternalTransactionsSigned TransactionType = 98

// TransactionTypeInternalTransactionsSent notifies the executor of synthetic transactions that have been sent.
const TransactionTypeInternalTransactionsSent TransactionType = 99

// TxFetchModeExpand expand the full transactions in the result set.
const TxFetchModeExpand TxFetchMode = 0

// TxFetchModeIds include the transaction IDs & count in the result set.
const TxFetchModeIds TxFetchMode = 1

// TxFetchModeCountOnly only include the transaction count in the result set.
const TxFetchModeCountOnly TxFetchMode = 2

// TxFetchModeOmit omit all transaction info from the result set.
const TxFetchModeOmit TxFetchMode = 3

// VoteTypeAccept vote yea in favor of proposal.
const VoteTypeAccept VoteType = 0

// VoteTypeReject vote nay against a proposal.
const VoteTypeReject VoteType = 1

// VoteTypeAbstain chose not to vote on a proposal.
const VoteTypeAbstain VoteType = 2

// VoteTypeSuggest put forth a proposal.
const VoteTypeSuggest VoteType = 3

// GetEnumValue returns the value of the Account Auth Operation Type
func (v AccountAuthOperationType) GetEnumValue() uint64 { return uint64(v) }

// SetEnumValue sets the value. SetEnumValue returns false if the value is invalid.
func (v *AccountAuthOperationType) SetEnumValue(id uint64) bool {
	u := AccountAuthOperationType(id)
	switch u {
	case AccountAuthOperationTypeUnknown, AccountAuthOperationTypeEnable, AccountAuthOperationTypeDisable, AccountAuthOperationTypeAddAuthority, AccountAuthOperationTypeRemoveAuthority:
		*v = u
		return true
	default:
		return false
	}
}

// String returns the name of the Account Auth Operation Type
func (v AccountAuthOperationType) String() string {
	switch v {
	case AccountAuthOperationTypeUnknown:
		return "unknown"
	case AccountAuthOperationTypeEnable:
		return "enable"
	case AccountAuthOperationTypeDisable:
		return "disable"
	case AccountAuthOperationTypeAddAuthority:
		return "addAuthority"
	case AccountAuthOperationTypeRemoveAuthority:
		return "removeAuthority"
	default:
		return fmt.Sprintf("AccountAuthOperationType:%d", v)
	}
}

// AccountAuthOperationTypeByName returns the named Account Auth Operation Type.
func AccountAuthOperationTypeByName(name string) (AccountAuthOperationType, bool) {
	switch name {
	case "unknown":
		return AccountAuthOperationTypeUnknown, true
	case "enable":
		return AccountAuthOperationTypeEnable, true
	case "disable":
		return AccountAuthOperationTypeDisable, true
	case "addAuthority":
		return AccountAuthOperationTypeAddAuthority, true
	case "removeAuthority":
		return AccountAuthOperationTypeRemoveAuthority, true
	default:
		return 0, false
	}
}

// MarshalJSON marshals the Account Auth Operation Type to JSON as a string.
func (v AccountAuthOperationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.String())
}

// UnmarshalJSON unmarshals the Account Auth Operation Type from JSON as a string.
func (v *AccountAuthOperationType) UnmarshalJSON(data []byte) error {
	var s string
	err := json.Unmarshal(data, &s)
	if err != nil {
		return err
	}

	var ok bool
	*v, ok = AccountAuthOperationTypeByName(s)
	if !ok || strings.ContainsRune(v.String(), ':') {
		return fmt.Errorf("invalid Account Auth Operation Type %q", s)
	}
	return nil
}

// GetEnumValue returns the value of the Account Type
func (v AccountType) GetEnumValue() uint64 { return uint64(v) }

// SetEnumValue sets the value. SetEnumValue returns false if the value is invalid.
func (v *AccountType) SetEnumValue(id uint64) bool {
	u := AccountType(id)
	switch u {
	case AccountTypeUnknown, AccountTypeAnchor, AccountTypeIdentity, AccountTypeTokenIssuer, AccountTypeTokenAccount, AccountTypeLiteTokenAccount, AccountTypeKeyPage, AccountTypeKeyBook, AccountTypeDataAccount, AccountTypeLiteDataAccount, AccountTypeInternalLedger, AccountTypeLiteIdentity, AccountTypeInternalSyntheticLedger:
		*v = u
		return true
	default:
		return false
	}
}

// String returns the name of the Account Type
func (v AccountType) String() string {
	switch v {
	case AccountTypeUnknown:
		return "unknown"
	case AccountTypeAnchor:
		return "anchor"
	case AccountTypeIdentity:
		return "identity"
	case AccountTypeTokenIssuer:
		return "tokenIssuer"
	case AccountTypeTokenAccount:
		return "tokenAccount"
	case AccountTypeLiteTokenAccount:
		return "liteTokenAccount"
	case AccountTypeKeyPage:
		return "keyPage"
	case AccountTypeKeyBook:
		return "keyBook"
	case AccountTypeDataAccount:
		return "dataAccount"
	case AccountTypeLiteDataAccount:
		return "liteDataAccount"
	case AccountTypeInternalLedger:
		return "internalLedger"
	case AccountTypeLiteIdentity:
		return "liteIdentity"
	case AccountTypeInternalSyntheticLedger:
		return "internalSyntheticLedger"
	default:
		return fmt.Sprintf("AccountType:%d", v)
	}
}

// AccountTypeByName returns the named Account Type.
func AccountTypeByName(name string) (AccountType, bool) {
	switch name {
	case "unknown":
		return AccountTypeUnknown, true
	case "anchor":
		return AccountTypeAnchor, true
	case "identity":
		return AccountTypeIdentity, true
	case "tokenIssuer":
		return AccountTypeTokenIssuer, true
	case "token":
		return AccountTypeTokenIssuer, true
	case "tokenAccount":
		return AccountTypeTokenAccount, true
	case "liteTokenAccount":
		return AccountTypeLiteTokenAccount, true
	case "keyPage":
		return AccountTypeKeyPage, true
	case "keyBook":
		return AccountTypeKeyBook, true
	case "dataAccount":
		return AccountTypeDataAccount, true
	case "liteDataAccount":
		return AccountTypeLiteDataAccount, true
	case "internalLedger":
		return AccountTypeInternalLedger, true
	case "liteIdentity":
		return AccountTypeLiteIdentity, true
	case "internalSyntheticLedger":
		return AccountTypeInternalSyntheticLedger, true
	default:
		return 0, false
	}
}

// MarshalJSON marshals the Account Type to JSON as a string.
func (v AccountType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.String())
}

// UnmarshalJSON unmarshals the Account Type from JSON as a string.
func (v *AccountType) UnmarshalJSON(data []byte) error {
	var s string
	err := json.Unmarshal(data, &s)
	if err != nil {
		return err
	}

	var ok bool
	*v, ok = AccountTypeByName(s)
	if !ok || strings.ContainsRune(v.String(), ':') {
		return fmt.Errorf("invalid Account Type %q", s)
	}
	return nil
}

// GetEnumValue returns the value of the Allowed Transaction Bit
func (v AllowedTransactionBit) GetEnumValue() uint64 { return uint64(v) }

// SetEnumValue sets the value. SetEnumValue returns false if the value is invalid.
func (v *AllowedTransactionBit) SetEnumValue(id uint64) bool {
	u := AllowedTransactionBit(id)
	switch u {
	case AllowedTransactionBitUpdateKeyPage, AllowedTransactionBitUpdateAccountAuth:
		*v = u
		return true
	default:
		return false
	}
}

// String returns the name of the Allowed Transaction Bit
func (v AllowedTransactionBit) String() string {
	switch v {
	case AllowedTransactionBitUpdateKeyPage:
		return "updateKeyPage"
	case AllowedTransactionBitUpdateAccountAuth:
		return "updateAccountAuth"
	default:
		return fmt.Sprintf("AllowedTransactionBit:%d", v)
	}
}

// AllowedTransactionBitByName returns the named Allowed Transaction Bit.
func AllowedTransactionBitByName(name string) (AllowedTransactionBit, bool) {
	switch name {
	case "updateKeyPage":
		return AllowedTransactionBitUpdateKeyPage, true
	case "updateAccountAuth":
		return AllowedTransactionBitUpdateAccountAuth, true
	default:
		return 0, false
	}
}

// MarshalJSON marshals the Allowed Transaction Bit to JSON as a string.
func (v AllowedTransactionBit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.String())
}

// UnmarshalJSON unmarshals the Allowed Transaction Bit from JSON as a string.
func (v *AllowedTransactionBit) UnmarshalJSON(data []byte) error {
	var s string
	err := json.Unmarshal(data, &s)
	if err != nil {
		return err
	}

	var ok bool
	*v, ok = AllowedTransactionBitByName(s)
	if !ok || strings.ContainsRune(v.String(), ':') {
		return fmt.Errorf("invalid Allowed Transaction Bit %q", s)
	}
	return nil
}

// GetEnumValue returns the value of the Chain Type
func (v ChainType) GetEnumValue() uint64 { return uint64(v) }

// SetEnumValue sets the value. SetEnumValue returns false if the value is invalid.
func (v *ChainType) SetEnumValue(id uint64) bool {
	u := ChainType(id)
	switch u {
	case ChainTypeUnknown, ChainTypeTransaction, ChainTypeAnchor, ChainTypeData, ChainTypeIndex:
		*v = u
		return true
	default:
		return false
	}
}

// String returns the name of the Chain Type
func (v ChainType) String() string {
	switch v {
	case ChainTypeUnknown:
		return "unknown"
	case ChainTypeTransaction:
		return "transaction"
	case ChainTypeAnchor:
		return "anchor"
	case ChainTypeData:
		return "data"
	case ChainTypeIndex:
		return "index"
	default:
		return fmt.Sprintf("ChainType:%d", v)
	}
}

// ChainTypeByName returns the named Chain Type.
func ChainTypeByName(name string) (ChainType, bool) {
	switch name {
	case "unknown":
		return ChainTypeUnknown, true
	case "transaction":
		return ChainTypeTransaction, true
	case "anchor":
		return ChainTypeAnchor, true
	case "data":
		return ChainTypeData, true
	case "index":
		return ChainTypeIndex, true
	default:
		return 0, false
	}
}

// MarshalJSON marshals the Chain Type to JSON as a string.
func (v ChainType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.String())
}

// UnmarshalJSON unmarshals the Chain Type from JSON as a string.
func (v *ChainType) UnmarshalJSON(data []byte) error {
	var s string
	err := json.Unmarshal(data, &s)
	if err != nil {
		return err
	}

	var ok bool
	*v, ok = ChainTypeByName(s)
	if !ok || strings.ContainsRune(v.String(), ':') {
		return fmt.Errorf("invalid Chain Type %q", s)
	}
	return nil
}

// GetEnumValue returns the value of the Error Code
func (v ErrorCode) GetEnumValue() uint64 { return uint64(v) }

// SetEnumValue sets the value. SetEnumValue returns false if the value is invalid.
func (v *ErrorCode) SetEnumValue(id uint64) bool {
	u := ErrorCode(id)
	switch u {
	case ErrorCodeOK, ErrorCodeEncodingError, ErrorCodeBadNonce, ErrorCodeDidPanic, ErrorCodeUnknownError, ErrorCodeNotFound, ErrorCodeTxnRange, ErrorCodeTxnHistory, ErrorCodeInvalidURL, ErrorCodeDirectoryURL, ErrorCodeChainIdError, ErrorCodeRoutingChainId, ErrorCodeCheckTxError, ErrorCodeDeliverTxError, ErrorCodeTxnStateError, ErrorCodeRecordTxnError, ErrorCodeSyntheticTxnError, ErrorCodeMarshallingError, ErrorCodeUnMarshallingError, ErrorCodeInvalidQueryType, ErrorCodeInvalidTxnType, ErrorCodeValidateTxnError, ErrorCodeInvalidTxnError, ErrorCodeAddTxnError, ErrorCodeDataUrlError, ErrorCodeDataEntryHashError, ErrorCodeTxnQueryError, ErrorCodeInvalidRequest, ErrorCodeInvalidSignature, ErrorCodeInsufficientCredits, ErrorCodeBadVersion, ErrorCodeInternal, ErrorCodeAlreadyDelivered, ErrorCodeUnauthorized:
		*v = u
		return true
	default:
		return false
	}
}

// String returns the name of the Error Code
func (v ErrorCode) String() string {
	switch v {
	case ErrorCodeOK:
		return "oK"
	case ErrorCodeEncodingError:
		return "encodingError"
	case ErrorCodeBadNonce:
		return "badNonce"
	case ErrorCodeDidPanic:
		return "didPanic"
	case ErrorCodeUnknownError:
		return "unknownError"
	case ErrorCodeNotFound:
		return "notFound"
	case ErrorCodeTxnRange:
		return "txnRange"
	case ErrorCodeTxnHistory:
		return "txnHistory"
	case ErrorCodeInvalidURL:
		return "invalidURL"
	case ErrorCodeDirectoryURL:
		return "directoryURL"
	case ErrorCodeChainIdError:
		return "chainIdError"
	case ErrorCodeRoutingChainId:
		return "routingChainId"
	case ErrorCodeCheckTxError:
		return "checkTxError"
	case ErrorCodeDeliverTxError:
		return "deliverTxError"
	case ErrorCodeTxnStateError:
		return "txnStateError"
	case ErrorCodeRecordTxnError:
		return "recordTxnError"
	case ErrorCodeSyntheticTxnError:
		return "syntheticTxnError"
	case ErrorCodeMarshallingError:
		return "marshallingError"
	case ErrorCodeUnMarshallingError:
		return "unMarshallingError"
	case ErrorCodeInvalidQueryType:
		return "invalidQueryType"
	case ErrorCodeInvalidTxnType:
		return "invalidTxnType"
	case ErrorCodeValidateTxnError:
		return "validateTxnError"
	case ErrorCodeInvalidTxnError:
		return "invalidTxnError"
	case ErrorCodeAddTxnError:
		return "addTxnError"
	case ErrorCodeDataUrlError:
		return "dataUrlError"
	case ErrorCodeDataEntryHashError:
		return "dataEntryHashError"
	case ErrorCodeTxnQueryError:
		return "txnQueryError"
	case ErrorCodeInvalidRequest:
		return "invalidRequest"
	case ErrorCodeInvalidSignature:
		return "invalidSignature"
	case ErrorCodeInsufficientCredits:
		return "insufficientCredits"
	case ErrorCodeBadVersion:
		return "badVersion"
	case ErrorCodeInternal:
		return "internal"
	case ErrorCodeAlreadyDelivered:
		return "alreadyDelivered"
	case ErrorCodeUnauthorized:
		return "unauthorized"
	default:
		return fmt.Sprintf("ErrorCode:%d", v)
	}
}

// ErrorCodeByName returns the named Error Code.
func ErrorCodeByName(name string) (ErrorCode, bool) {
	switch name {
	case "oK":
		return ErrorCodeOK, true
	case "encodingError":
		return ErrorCodeEncodingError, true
	case "badNonce":
		return ErrorCodeBadNonce, true
	case "didPanic":
		return ErrorCodeDidPanic, true
	case "unknownError":
		return ErrorCodeUnknownError, true
	case "notFound":
		return ErrorCodeNotFound, true
	case "txnRange":
		return ErrorCodeTxnRange, true
	case "txnHistory":
		return ErrorCodeTxnHistory, true
	case "invalidURL":
		return ErrorCodeInvalidURL, true
	case "directoryURL":
		return ErrorCodeDirectoryURL, true
	case "chainIdError":
		return ErrorCodeChainIdError, true
	case "routingChainId":
		return ErrorCodeRoutingChainId, true
	case "checkTxError":
		return ErrorCodeCheckTxError, true
	case "deliverTxError":
		return ErrorCodeDeliverTxError, true
	case "txnStateError":
		return ErrorCodeTxnStateError, true
	case "recordTxnError":
		return ErrorCodeRecordTxnError, true
	case "syntheticTxnError":
		return ErrorCodeSyntheticTxnError, true
	case "marshallingError":
		return ErrorCodeMarshallingError, true
	case "unMarshallingError":
		return ErrorCodeUnMarshallingError, true
	case "invalidQueryType":
		return ErrorCodeInvalidQueryType, true
	case "invalidTxnType":
		return ErrorCodeInvalidTxnType, true
	case "validateTxnError":
		return ErrorCodeValidateTxnError, true
	case "invalidTxnError":
		return ErrorCodeInvalidTxnError, true
	case "addTxnError":
		return ErrorCodeAddTxnError, true
	case "dataUrlError":
		return ErrorCodeDataUrlError, true
	case "dataEntryHashError":
		return ErrorCodeDataEntryHashError, true
	case "txnQueryError":
		return ErrorCodeTxnQueryError, true
	case "invalidRequest":
		return ErrorCodeInvalidRequest, true
	case "invalidSignature":
		return ErrorCodeInvalidSignature, true
	case "insufficientCredits":
		return ErrorCodeInsufficientCredits, true
	case "badVersion":
		return ErrorCodeBadVersion, true
	case "internal":
		return ErrorCodeInternal, true
	case "alreadyDelivered":
		return ErrorCodeAlreadyDelivered, true
	case "unauthorized":
		return ErrorCodeUnauthorized, true
	default:
		return 0, false
	}
}

// MarshalJSON marshals the Error Code to JSON as a string.
func (v ErrorCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.String())
}

// UnmarshalJSON unmarshals the Error Code from JSON as a string.
func (v *ErrorCode) UnmarshalJSON(data []byte) error {
	var s string
	err := json.Unmarshal(data, &s)
	if err != nil {
		return err
	}

	var ok bool
	*v, ok = ErrorCodeByName(s)
	if !ok || strings.ContainsRune(v.String(), ':') {
		return fmt.Errorf("invalid Error Code %q", s)
	}
	return nil
}

// GetEnumValue returns the value of the Key Page Operation Type
func (v KeyPageOperationType) GetEnumValue() uint64 { return uint64(v) }

// SetEnumValue sets the value. SetEnumValue returns false if the value is invalid.
func (v *KeyPageOperationType) SetEnumValue(id uint64) bool {
	u := KeyPageOperationType(id)
	switch u {
	case KeyPageOperationTypeUnknown, KeyPageOperationTypeUpdate, KeyPageOperationTypeRemove, KeyPageOperationTypeAdd, KeyPageOperationTypeSetThreshold, KeyPageOperationTypeUpdateAllowed:
		*v = u
		return true
	default:
		return false
	}
}

// String returns the name of the Key Page Operation Type
func (v KeyPageOperationType) String() string {
	switch v {
	case KeyPageOperationTypeUnknown:
		return "unknown"
	case KeyPageOperationTypeUpdate:
		return "update"
	case KeyPageOperationTypeRemove:
		return "remove"
	case KeyPageOperationTypeAdd:
		return "add"
	case KeyPageOperationTypeSetThreshold:
		return "setThreshold"
	case KeyPageOperationTypeUpdateAllowed:
		return "updateAllowed"
	default:
		return fmt.Sprintf("KeyPageOperationType:%d", v)
	}
}

// KeyPageOperationTypeByName returns the named Key Page Operation Type.
func KeyPageOperationTypeByName(name string) (KeyPageOperationType, bool) {
	switch name {
	case "unknown":
		return KeyPageOperationTypeUnknown, true
	case "update":
		return KeyPageOperationTypeUpdate, true
	case "remove":
		return KeyPageOperationTypeRemove, true
	case "add":
		return KeyPageOperationTypeAdd, true
	case "setThreshold":
		return KeyPageOperationTypeSetThreshold, true
	case "updateAllowed":
		return KeyPageOperationTypeUpdateAllowed, true
	default:
		return 0, false
	}
}

// MarshalJSON marshals the Key Page Operation Type to JSON as a string.
func (v KeyPageOperationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.String())
}

// UnmarshalJSON unmarshals the Key Page Operation Type from JSON as a string.
func (v *KeyPageOperationType) UnmarshalJSON(data []byte) error {
	var s string
	err := json.Unmarshal(data, &s)
	if err != nil {
		return err
	}

	var ok bool
	*v, ok = KeyPageOperationTypeByName(s)
	if !ok || strings.ContainsRune(v.String(), ':') {
		return fmt.Errorf("invalid Key Page Operation Type %q", s)
	}
	return nil
}

// GetEnumValue returns the value of the Object Type
func (v ObjectType) GetEnumValue() uint64 { return uint64(v) }

// SetEnumValue sets the value. SetEnumValue returns false if the value is invalid.
func (v *ObjectType) SetEnumValue(id uint64) bool {
	u := ObjectType(id)
	switch u {
	case ObjectTypeUnknown, ObjectTypeAccount, ObjectTypeTransaction:
		*v = u
		return true
	default:
		return false
	}
}

// String returns the name of the Object Type
func (v ObjectType) String() string {
	switch v {
	case ObjectTypeUnknown:
		return "unknown"
	case ObjectTypeAccount:
		return "account"
	case ObjectTypeTransaction:
		return "transaction"
	default:
		return fmt.Sprintf("ObjectType:%d", v)
	}
}

// ObjectTypeByName returns the named Object Type.
func ObjectTypeByName(name string) (ObjectType, bool) {
	switch name {
	case "unknown":
		return ObjectTypeUnknown, true
	case "account":
		return ObjectTypeAccount, true
	case "transaction":
		return ObjectTypeTransaction, true
	default:
		return 0, false
	}
}

// MarshalJSON marshals the Object Type to JSON as a string.
func (v ObjectType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.String())
}

// UnmarshalJSON unmarshals the Object Type from JSON as a string.
func (v *ObjectType) UnmarshalJSON(data []byte) error {
	var s string
	err := json.Unmarshal(data, &s)
	if err != nil {
		return err
	}

	var ok bool
	*v, ok = ObjectTypeByName(s)
	if !ok || strings.ContainsRune(v.String(), ':') {
		return fmt.Errorf("invalid Object Type %q", s)
	}
	return nil
}

// GetEnumValue returns the value of the Signature Type
func (v SignatureType) GetEnumValue() uint64 { return uint64(v) }

// SetEnumValue sets the value. SetEnumValue returns false if the value is invalid.
func (v *SignatureType) SetEnumValue(id uint64) bool {
	u := SignatureType(id)
	switch u {
	case SignatureTypeUnknown, SignatureTypeLegacyED25519, SignatureTypeED25519, SignatureTypeRCD1, SignatureTypeReceipt, SignatureTypeSynthetic, SignatureTypeInternal:
		*v = u
		return true
	default:
		return false
	}
}

// String returns the name of the Signature Type
func (v SignatureType) String() string {
	switch v {
	case SignatureTypeUnknown:
		return "unknown"
	case SignatureTypeLegacyED25519:
		return "legacyED25519"
	case SignatureTypeED25519:
		return "eD25519"
	case SignatureTypeRCD1:
		return "rCD1"
	case SignatureTypeReceipt:
		return "receipt"
	case SignatureTypeSynthetic:
		return "synthetic"
	case SignatureTypeInternal:
		return "internal"
	default:
		return fmt.Sprintf("SignatureType:%d", v)
	}
}

// SignatureTypeByName returns the named Signature Type.
func SignatureTypeByName(name string) (SignatureType, bool) {
	switch name {
	case "unknown":
		return SignatureTypeUnknown, true
	case "legacyED25519":
		return SignatureTypeLegacyED25519, true
	case "eD25519":
		return SignatureTypeED25519, true
	case "rCD1":
		return SignatureTypeRCD1, true
	case "receipt":
		return SignatureTypeReceipt, true
	case "synthetic":
		return SignatureTypeSynthetic, true
	case "internal":
		return SignatureTypeInternal, true
	default:
		return 0, false
	}
}

// MarshalJSON marshals the Signature Type to JSON as a string.
func (v SignatureType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.String())
}

// UnmarshalJSON unmarshals the Signature Type from JSON as a string.
func (v *SignatureType) UnmarshalJSON(data []byte) error {
	var s string
	err := json.Unmarshal(data, &s)
	if err != nil {
		return err
	}

	var ok bool
	*v, ok = SignatureTypeByName(s)
	if !ok || strings.ContainsRune(v.String(), ':') {
		return fmt.Errorf("invalid Signature Type %q", s)
	}
	return nil
}

// GetEnumValue returns the value of the Transaction Max
func (v TransactionMax) GetEnumValue() uint64 { return uint64(v) }

// SetEnumValue sets the value. SetEnumValue returns false if the value is invalid.
func (v *TransactionMax) SetEnumValue(id uint64) bool {
	u := TransactionMax(id)
	switch u {
	case TransactionMaxUser, TransactionMaxSynthetic, TransactionMaxInternal:
		*v = u
		return true
	default:
		return false
	}
}

// String returns the name of the Transaction Max
func (v TransactionMax) String() string {
	switch v {
	case TransactionMaxUser:
		return "user"
	case TransactionMaxSynthetic:
		return "synthetic"
	case TransactionMaxInternal:
		return "internal"
	default:
		return fmt.Sprintf("TransactionMax:%d", v)
	}
}

// TransactionMaxByName returns the named Transaction Max.
func TransactionMaxByName(name string) (TransactionMax, bool) {
	switch name {
	case "user":
		return TransactionMaxUser, true
	case "synthetic":
		return TransactionMaxSynthetic, true
	case "internal":
		return TransactionMaxInternal, true
	default:
		return 0, false
	}
}

// MarshalJSON marshals the Transaction Max to JSON as a string.
func (v TransactionMax) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.String())
}

// UnmarshalJSON unmarshals the Transaction Max from JSON as a string.
func (v *TransactionMax) UnmarshalJSON(data []byte) error {
	var s string
	err := json.Unmarshal(data, &s)
	if err != nil {
		return err
	}

	var ok bool
	*v, ok = TransactionMaxByName(s)
	if !ok || strings.ContainsRune(v.String(), ':') {
		return fmt.Errorf("invalid Transaction Max %q", s)
	}
	return nil
}

// GetEnumValue returns the value of the Transaction Type
func (v TransactionType) GetEnumValue() uint64 { return uint64(v) }

// SetEnumValue sets the value. SetEnumValue returns false if the value is invalid.
func (v *TransactionType) SetEnumValue(id uint64) bool {
	u := TransactionType(id)
	switch u {
	case TransactionTypeUnknown, TransactionTypeCreateIdentity, TransactionTypeCreateTokenAccount, TransactionTypeSendTokens, TransactionTypeCreateDataAccount, TransactionTypeWriteData, TransactionTypeWriteDataTo, TransactionTypeAcmeFaucet, TransactionTypeCreateToken, TransactionTypeIssueTokens, TransactionTypeBurnTokens, TransactionTypeCreateKeyPage, TransactionTypeCreateKeyBook, TransactionTypeAddCredits, TransactionTypeUpdateKeyPage, TransactionTypeAddValidator, TransactionTypeRemoveValidator, TransactionTypeUpdateValidatorKey, TransactionTypeUpdateAccountAuth, TransactionTypeUpdateKey, TransactionTypeSignPending, TransactionTypeSyntheticCreateChain, TransactionTypeSyntheticWriteData, TransactionTypeSyntheticDepositTokens, TransactionTypeSyntheticAnchor, TransactionTypeSyntheticDepositCredits, TransactionTypeSyntheticBurnTokens, TransactionTypeSyntheticMirror, TransactionTypeSegWitDataEntry, TransactionTypeSyntheticReceipt, TransactionTypeInternalGenesis, TransactionTypeInternalSendTransactions, TransactionTypeInternalTransactionsSigned, TransactionTypeInternalTransactionsSent:
		*v = u
		return true
	default:
		return false
	}
}

// String returns the name of the Transaction Type
func (v TransactionType) String() string {
	switch v {
	case TransactionTypeUnknown:
		return "unknown"
	case TransactionTypeCreateIdentity:
		return "createIdentity"
	case TransactionTypeCreateTokenAccount:
		return "createTokenAccount"
	case TransactionTypeSendTokens:
		return "sendTokens"
	case TransactionTypeCreateDataAccount:
		return "createDataAccount"
	case TransactionTypeWriteData:
		return "writeData"
	case TransactionTypeWriteDataTo:
		return "writeDataTo"
	case TransactionTypeAcmeFaucet:
		return "acmeFaucet"
	case TransactionTypeCreateToken:
		return "createToken"
	case TransactionTypeIssueTokens:
		return "issueTokens"
	case TransactionTypeBurnTokens:
		return "burnTokens"
	case TransactionTypeCreateKeyPage:
		return "createKeyPage"
	case TransactionTypeCreateKeyBook:
		return "createKeyBook"
	case TransactionTypeAddCredits:
		return "addCredits"
	case TransactionTypeUpdateKeyPage:
		return "updateKeyPage"
	case TransactionTypeAddValidator:
		return "addValidator"
	case TransactionTypeRemoveValidator:
		return "removeValidator"
	case TransactionTypeUpdateValidatorKey:
		return "updateValidatorKey"
	case TransactionTypeUpdateAccountAuth:
		return "updateAccountAuth"
	case TransactionTypeUpdateKey:
		return "updateKey"
	case TransactionTypeSignPending:
		return "signPending"
	case TransactionTypeSyntheticCreateChain:
		return "syntheticCreateChain"
	case TransactionTypeSyntheticWriteData:
		return "syntheticWriteData"
	case TransactionTypeSyntheticDepositTokens:
		return "syntheticDepositTokens"
	case TransactionTypeSyntheticAnchor:
		return "syntheticAnchor"
	case TransactionTypeSyntheticDepositCredits:
		return "syntheticDepositCredits"
	case TransactionTypeSyntheticBurnTokens:
		return "syntheticBurnTokens"
	case TransactionTypeSyntheticMirror:
		return "syntheticMirror"
	case TransactionTypeSegWitDataEntry:
		return "segWitDataEntry"
	case TransactionTypeSyntheticReceipt:
		return "syntheticReceipt"
	case TransactionTypeInternalGenesis:
		return "internalGenesis"
	case TransactionTypeInternalSendTransactions:
		return "internalSendTransactions"
	case TransactionTypeInternalTransactionsSigned:
		return "internalTransactionsSigned"
	case TransactionTypeInternalTransactionsSent:
		return "internalTransactionsSent"
	default:
		return fmt.Sprintf("TransactionType:%d", v)
	}
}

// TransactionTypeByName returns the named Transaction Type.
func TransactionTypeByName(name string) (TransactionType, bool) {
	switch name {
	case "unknown":
		return TransactionTypeUnknown, true
	case "createIdentity":
		return TransactionTypeCreateIdentity, true
	case "createTokenAccount":
		return TransactionTypeCreateTokenAccount, true
	case "sendTokens":
		return TransactionTypeSendTokens, true
	case "createDataAccount":
		return TransactionTypeCreateDataAccount, true
	case "writeData":
		return TransactionTypeWriteData, true
	case "writeDataTo":
		return TransactionTypeWriteDataTo, true
	case "acmeFaucet":
		return TransactionTypeAcmeFaucet, true
	case "createToken":
		return TransactionTypeCreateToken, true
	case "issueTokens":
		return TransactionTypeIssueTokens, true
	case "burnTokens":
		return TransactionTypeBurnTokens, true
	case "createKeyPage":
		return TransactionTypeCreateKeyPage, true
	case "createKeyBook":
		return TransactionTypeCreateKeyBook, true
	case "addCredits":
		return TransactionTypeAddCredits, true
	case "updateKeyPage":
		return TransactionTypeUpdateKeyPage, true
	case "addValidator":
		return TransactionTypeAddValidator, true
	case "removeValidator":
		return TransactionTypeRemoveValidator, true
	case "updateValidatorKey":
		return TransactionTypeUpdateValidatorKey, true
	case "updateAccountAuth":
		return TransactionTypeUpdateAccountAuth, true
	case "updateKey":
		return TransactionTypeUpdateKey, true
	case "signPending":
		return TransactionTypeSignPending, true
	case "syntheticCreateChain":
		return TransactionTypeSyntheticCreateChain, true
	case "syntheticWriteData":
		return TransactionTypeSyntheticWriteData, true
	case "syntheticDepositTokens":
		return TransactionTypeSyntheticDepositTokens, true
	case "syntheticAnchor":
		return TransactionTypeSyntheticAnchor, true
	case "syntheticDepositCredits":
		return TransactionTypeSyntheticDepositCredits, true
	case "syntheticBurnTokens":
		return TransactionTypeSyntheticBurnTokens, true
	case "syntheticMirror":
		return TransactionTypeSyntheticMirror, true
	case "segWitDataEntry":
		return TransactionTypeSegWitDataEntry, true
	case "syntheticReceipt":
		return TransactionTypeSyntheticReceipt, true
	case "internalGenesis":
		return TransactionTypeInternalGenesis, true
	case "internalSendTransactions":
		return TransactionTypeInternalSendTransactions, true
	case "internalTransactionsSigned":
		return TransactionTypeInternalTransactionsSigned, true
	case "internalTransactionsSent":
		return TransactionTypeInternalTransactionsSent, true
	default:
		return 0, false
	}
}

// MarshalJSON marshals the Transaction Type to JSON as a string.
func (v TransactionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.String())
}

// UnmarshalJSON unmarshals the Transaction Type from JSON as a string.
func (v *TransactionType) UnmarshalJSON(data []byte) error {
	var s string
	err := json.Unmarshal(data, &s)
	if err != nil {
		return err
	}

	var ok bool
	*v, ok = TransactionTypeByName(s)
	if !ok || strings.ContainsRune(v.String(), ':') {
		return fmt.Errorf("invalid Transaction Type %q", s)
	}
	return nil
}

// GetEnumValue returns the value of the Tx Fetch Mode
func (v TxFetchMode) GetEnumValue() uint64 { return uint64(v) }

// SetEnumValue sets the value. SetEnumValue returns false if the value is invalid.
func (v *TxFetchMode) SetEnumValue(id uint64) bool {
	u := TxFetchMode(id)
	switch u {
	case TxFetchModeExpand, TxFetchModeIds, TxFetchModeCountOnly, TxFetchModeOmit:
		*v = u
		return true
	default:
		return false
	}
}

// String returns the name of the Tx Fetch Mode
func (v TxFetchMode) String() string {
	switch v {
	case TxFetchModeExpand:
		return "expand"
	case TxFetchModeIds:
		return "ids"
	case TxFetchModeCountOnly:
		return "countOnly"
	case TxFetchModeOmit:
		return "omit"
	default:
		return fmt.Sprintf("TxFetchMode:%d", v)
	}
}

// TxFetchModeByName returns the named Tx Fetch Mode.
func TxFetchModeByName(name string) (TxFetchMode, bool) {
	switch name {
	case "expand":
		return TxFetchModeExpand, true
	case "ids":
		return TxFetchModeIds, true
	case "countOnly":
		return TxFetchModeCountOnly, true
	case "omit":
		return TxFetchModeOmit, true
	default:
		return 0, false
	}
}

// MarshalJSON marshals the Tx Fetch Mode to JSON as a string.
func (v TxFetchMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.String())
}

// UnmarshalJSON unmarshals the Tx Fetch Mode from JSON as a string.
func (v *TxFetchMode) UnmarshalJSON(data []byte) error {
	var s string
	err := json.Unmarshal(data, &s)
	if err != nil {
		return err
	}

	var ok bool
	*v, ok = TxFetchModeByName(s)
	if !ok || strings.ContainsRune(v.String(), ':') {
		return fmt.Errorf("invalid Tx Fetch Mode %q", s)
	}
	return nil
}

// GetEnumValue returns the value of the Vote Type
func (v VoteType) GetEnumValue() uint64 { return uint64(v) }

// SetEnumValue sets the value. SetEnumValue returns false if the value is invalid.
func (v *VoteType) SetEnumValue(id uint64) bool {
	u := VoteType(id)
	switch u {
	case VoteTypeAccept, VoteTypeReject, VoteTypeAbstain, VoteTypeSuggest:
		*v = u
		return true
	default:
		return false
	}
}

// String returns the name of the Vote Type
func (v VoteType) String() string {
	switch v {
	case VoteTypeAccept:
		return "accept"
	case VoteTypeReject:
		return "reject"
	case VoteTypeAbstain:
		return "abstain"
	case VoteTypeSuggest:
		return "suggest"
	default:
		return fmt.Sprintf("VoteType:%d", v)
	}
}

// VoteTypeByName returns the named Vote Type.
func VoteTypeByName(name string) (VoteType, bool) {
	switch name {
	case "accept":
		return VoteTypeAccept, true
	case "reject":
		return VoteTypeReject, true
	case "abstain":
		return VoteTypeAbstain, true
	case "suggest":
		return VoteTypeSuggest, true
	default:
		return 0, false
	}
}

// MarshalJSON marshals the Vote Type to JSON as a string.
func (v VoteType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.String())
}

// UnmarshalJSON unmarshals the Vote Type from JSON as a string.
func (v *VoteType) UnmarshalJSON(data []byte) error {
	var s string
	err := json.Unmarshal(data, &s)
	if err != nil {
		return err
	}

	var ok bool
	*v, ok = VoteTypeByName(s)
	if !ok || strings.ContainsRune(v.String(), ':') {
		return fmt.Errorf("invalid Vote Type %q", s)
	}
	return nil
}
