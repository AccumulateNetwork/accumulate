package protocol

// GENERATED BY go run ./internal/cmd/genmarshal. DO NOT EDIT.

import (
	"bytes"
	"encoding/json"
	"fmt"
	"math/big"
	"time"

	"github.com/AccumulateNetwork/accumulate/internal/encoding"
	"github.com/AccumulateNetwork/accumulate/types"
	"github.com/AccumulateNetwork/accumulate/types/state"
)

type AcmeFaucet struct {
	Url string `json:"url,omitempty" form:"url" query:"url" validate:"required,acc-url"`
}

type AddCredits struct {
	Recipient string `json:"recipient,omitempty" form:"recipient" query:"recipient" validate:"required"`
	Amount    uint64 `json:"amount,omitempty" form:"amount" query:"amount" validate:"required"`
}

type AnonTokenAccount struct {
	state.ChainHeader
	TokenUrl      string  `json:"tokenUrl,omitempty" form:"tokenUrl" query:"tokenUrl" validate:"required,acc-url"`
	Balance       big.Int `json:"balance,omitempty" form:"balance" query:"balance" validate:"required"`
	TxCount       uint64  `json:"txCount,omitempty" form:"txCount" query:"txCount" validate:"required"`
	Nonce         uint64  `json:"nonce,omitempty" form:"nonce" query:"nonce" validate:"required"`
	CreditBalance big.Int `json:"creditBalance,omitempty" form:"creditBalance" query:"creditBalance" validate:"required"`
}

type BurnTokens struct {
	Amount big.Int `json:"amount,omitempty" form:"amount" query:"amount" validate:"required"`
}

type ChainParams struct {
	Data     []byte `json:"data,omitempty" form:"data" query:"data" validate:"required"`
	IsUpdate bool   `json:"isUpdate,omitempty" form:"isUpdate" query:"isUpdate" validate:"required"`
}

type CreateDataAccount struct {
	Url string `json:"url,omitempty" form:"url" query:"url" validate:"required,acc-url"`
}

type CreateSigSpec struct {
	Url  string           `json:"url,omitempty" form:"url" query:"url" validate:"required,acc-url"`
	Keys []*KeySpecParams `json:"keys,omitempty" form:"keys" query:"keys" validate:"required"`
}

type CreateSigSpecGroup struct {
	Url      string     `json:"url,omitempty" form:"url" query:"url" validate:"required,acc-url"`
	SigSpecs [][32]byte `json:"sigSpecs,omitempty" form:"sigSpecs" query:"sigSpecs" validate:"required"`
}

type CreateToken struct {
	Url        string `json:"url,omitempty" form:"url" query:"url" validate:"required,acc-url"`
	Symbol     string `json:"symbol,omitempty" form:"symbol" query:"symbol" validate:"required"`
	Precision  uint64 `json:"precision,omitempty" form:"precision" query:"precision" validate:"required"`
	Properties string `json:"properties,omitempty" form:"properties" query:"properties" validate:"acc-url"`
}

type DataAccount struct {
	state.ChainHeader
	Data []byte `json:"data,omitempty" form:"data" query:"data" validate:"required"`
}

type DirectoryIndexMetadata struct {
	Count uint64 `json:"count,omitempty" form:"count" query:"count" validate:"required"`
}

type DirectoryQueryResult struct {
	Entries []string `json:"entries,omitempty" form:"entries" query:"entries" validate:"required"`
}

type IdentityCreate struct {
	Url         string `json:"url,omitempty" form:"url" query:"url" validate:"required,acc-url"`
	PublicKey   []byte `json:"publicKey,omitempty" form:"publicKey" query:"publicKey" validate:"required"`
	KeyBookName string `json:"keyBookName,omitempty" form:"keyBookName" query:"keyBookName"`
	KeyPageName string `json:"keyPageName,omitempty" form:"keyPageName" query:"keyPageName"`
}

type IssueTokens struct {
	Recipient string  `json:"recipient,omitempty" form:"recipient" query:"recipient" validate:"required,acc-url"`
	Amount    big.Int `json:"amount,omitempty" form:"amount" query:"amount" validate:"required"`
}

type KeySpec struct {
	PublicKey []byte `json:"publicKey,omitempty" form:"publicKey" query:"publicKey" validate:"required"`
	Nonce     uint64 `json:"nonce,omitempty" form:"nonce" query:"nonce" validate:"required"`
}

type KeySpecParams struct {
	PublicKey []byte `json:"publicKey,omitempty" form:"publicKey" query:"publicKey" validate:"required"`
}

type LiteDataAccount struct {
	state.ChainHeader
	Data []byte `json:"data,omitempty" form:"data" query:"data" validate:"required"`
}

type MetricsRequest struct {
	Metric   string        `json:"metric,omitempty" form:"metric" query:"metric" validate:"required"`
	Duration time.Duration `json:"duration,omitempty" form:"duration" query:"duration" validate:"required"`
}

type MetricsResponse struct {
	Value interface{} `json:"value,omitempty" form:"value" query:"value" validate:"required"`
}

type SigSpec struct {
	state.ChainHeader
	CreditBalance big.Int    `json:"creditBalance,omitempty" form:"creditBalance" query:"creditBalance" validate:"required"`
	Keys          []*KeySpec `json:"keys,omitempty" form:"keys" query:"keys" validate:"required"`
}

type SigSpecGroup struct {
	state.ChainHeader
	SigSpecs [][32]byte `json:"sigSpecs,omitempty" form:"sigSpecs" query:"sigSpecs" validate:"required"`
}

type SyntheticBurnTokens struct {
	Amount big.Int `json:"amount,omitempty" form:"amount" query:"amount" validate:"required"`
}

type SyntheticCreateChain struct {
	Cause  [32]byte      `json:"cause,omitempty" form:"cause" query:"cause" validate:"required"`
	Chains []ChainParams `json:"chains,omitempty" form:"chains" query:"chains" validate:"required"`
}

type SyntheticDepositCredits struct {
	Cause  [32]byte `json:"cause,omitempty" form:"cause" query:"cause" validate:"required"`
	Amount uint64   `json:"amount,omitempty" form:"amount" query:"amount" validate:"required"`
}

type SyntheticGenesis struct {
}

type SyntheticSignTransactions struct {
	Transactions []SyntheticSignature `json:"transactions,omitempty" form:"transactions" query:"transactions" validate:"required"`
}

type SyntheticSignature struct {
	Txid      [32]byte `json:"txid,omitempty" form:"txid" query:"txid" validate:"required"`
	Signature []byte   `json:"signature,omitempty" form:"signature" query:"signature" validate:"required"`
	Nonce     uint64   `json:"nonce,omitempty" form:"nonce" query:"nonce" validate:"required"`
}

type SyntheticWriteData struct {
	Data []byte `json:"data,omitempty" form:"data" query:"data" validate:"required"`
}

type TokenAccountCreate struct {
	Url        string `json:"url,omitempty" form:"url" query:"url" validate:"required,acc-url"`
	TokenUrl   string `json:"tokenUrl,omitempty" form:"tokenUrl" query:"tokenUrl" validate:"required,acc-url"`
	KeyBookUrl string `json:"keyBookUrl,omitempty" form:"keyBookUrl" query:"keyBookUrl" validate:"required,acc-url"`
}

type TokenIssuer struct {
	state.ChainHeader
	Symbol     string `json:"symbol,omitempty" form:"symbol" query:"symbol" validate:"required"`
	Precision  uint64 `json:"precision,omitempty" form:"precision" query:"precision" validate:"required"`
	Properties string `json:"properties,omitempty" form:"properties" query:"properties" validate:"required,acc-url"`
}

type UpdateKeyPage struct {
	Operation KeyPageOperation `json:"operation,omitempty" form:"operation" query:"operation" validate:"required"`
	Key       []byte           `json:"key,omitempty" form:"key" query:"key" validate:"required"`
	NewKey    []byte           `json:"newKey,omitempty" form:"newKey" query:"newKey" validate:"required"`
}

type WriteData struct {
	Data []byte `json:"data,omitempty" form:"data" query:"data" validate:"required"`
}

type WriteDataTo struct {
	Recipient string `json:"recipient,omitempty" form:"recipient" query:"recipient" validate:"required,acc-url"`
	Data      []byte `json:"data,omitempty" form:"data" query:"data" validate:"required"`
}

func NewAnonTokenAccount() *AnonTokenAccount {
	v := new(AnonTokenAccount)
	v.Type = types.ChainTypeLiteTokenAccount
	return v
}

func NewDataAccount() *DataAccount {
	v := new(DataAccount)
	v.Type = types.ChainTypeDataAccount
	return v
}

func NewLiteDataAccount() *LiteDataAccount {
	v := new(LiteDataAccount)
	v.Type = types.ChainTypeLiteDataAccount
	return v
}

func NewSigSpec() *SigSpec {
	v := new(SigSpec)
	v.Type = types.ChainTypeKeyPage
	return v
}

func NewSigSpecGroup() *SigSpecGroup {
	v := new(SigSpecGroup)
	v.Type = types.ChainTypeKeyBook
	return v
}

func NewTokenIssuer() *TokenIssuer {
	v := new(TokenIssuer)
	v.Type = types.ChainTypeTokenIssuer
	return v
}

func (*AcmeFaucet) GetType() types.TransactionType { return types.TxTypeAcmeFaucet }

func (*AddCredits) GetType() types.TransactionType { return types.TxTypeAddCredits }

func (*BurnTokens) GetType() types.TransactionType { return types.TxTypeBurnTokens }

func (*CreateDataAccount) GetType() types.TransactionType { return types.TxTypeCreateDataAccount }

func (*CreateSigSpec) GetType() types.TransactionType { return types.TxTypeCreateKeyPage }

func (*CreateSigSpecGroup) GetType() types.TransactionType { return types.TxTypeCreateKeyBook }

func (*CreateToken) GetType() types.TransactionType { return types.TxTypeCreateToken }

func (*IdentityCreate) GetType() types.TransactionType { return types.TxTypeCreateIdentity }

func (*IssueTokens) GetType() types.TransactionType { return types.TxTypeIssueTokens }

func (*SyntheticBurnTokens) GetType() types.TransactionType { return types.TxTypeSyntheticBurnTokens }

func (*SyntheticCreateChain) GetType() types.TransactionType { return types.TxTypeSyntheticCreateChain }

func (*SyntheticDepositCredits) GetType() types.TransactionType {
	return types.TxTypeSyntheticDepositCredits
}

func (*SyntheticGenesis) GetType() types.TransactionType { return types.TxTypeSyntheticGenesis }

func (*SyntheticSignTransactions) GetType() types.TransactionType {
	return types.TxTypeSyntheticSignTransactions
}

func (*SyntheticWriteData) GetType() types.TransactionType { return types.TxTypeSyntheticWriteData }

func (*TokenAccountCreate) GetType() types.TransactionType { return types.TxTypeCreateTokenAccount }

func (*UpdateKeyPage) GetType() types.TransactionType { return types.TxTypeUpdateKeyPage }

func (*WriteData) GetType() types.TransactionType { return types.TxTypeWriteData }

func (*WriteDataTo) GetType() types.TransactionType { return types.TxTypeWriteDataTo }

func (v *AcmeFaucet) BinarySize() int {
	var n int

	n += encoding.UvarintBinarySize(types.TxTypeAcmeFaucet.ID())

	n += encoding.StringBinarySize(v.Url)

	return n
}

func (v *AddCredits) BinarySize() int {
	var n int

	n += encoding.UvarintBinarySize(types.TxTypeAddCredits.ID())

	n += encoding.StringBinarySize(v.Recipient)

	n += encoding.UvarintBinarySize(v.Amount)

	return n
}

func (v *AnonTokenAccount) BinarySize() int {
	var n int

	// Enforce sanity
	v.Type = types.ChainTypeLiteTokenAccount

	n += v.ChainHeader.GetHeaderSize()

	n += encoding.StringBinarySize(v.TokenUrl)

	n += encoding.BigintBinarySize(&v.Balance)

	n += encoding.UvarintBinarySize(v.TxCount)

	n += encoding.UvarintBinarySize(v.Nonce)

	n += encoding.BigintBinarySize(&v.CreditBalance)

	return n
}

func (v *BurnTokens) BinarySize() int {
	var n int

	n += encoding.UvarintBinarySize(types.TxTypeBurnTokens.ID())

	n += encoding.BigintBinarySize(&v.Amount)

	return n
}

func (v *ChainParams) BinarySize() int {
	var n int

	n += encoding.BytesBinarySize(v.Data)

	n += encoding.BoolBinarySize(v.IsUpdate)

	return n
}

func (v *CreateDataAccount) BinarySize() int {
	var n int

	n += encoding.UvarintBinarySize(types.TxTypeCreateDataAccount.ID())

	n += encoding.StringBinarySize(v.Url)

	return n
}

func (v *CreateSigSpec) BinarySize() int {
	var n int

	n += encoding.UvarintBinarySize(types.TxTypeCreateKeyPage.ID())

	n += encoding.StringBinarySize(v.Url)

	n += encoding.UvarintBinarySize(uint64(len(v.Keys)))

	for _, v := range v.Keys {
		n += v.BinarySize()

	}

	return n
}

func (v *CreateSigSpecGroup) BinarySize() int {
	var n int

	n += encoding.UvarintBinarySize(types.TxTypeCreateKeyBook.ID())

	n += encoding.StringBinarySize(v.Url)

	n += encoding.ChainSetBinarySize(v.SigSpecs)

	return n
}

func (v *CreateToken) BinarySize() int {
	var n int

	n += encoding.UvarintBinarySize(types.TxTypeCreateToken.ID())

	n += encoding.StringBinarySize(v.Url)

	n += encoding.StringBinarySize(v.Symbol)

	n += encoding.UvarintBinarySize(v.Precision)

	n += encoding.StringBinarySize(v.Properties)

	return n
}

func (v *DataAccount) BinarySize() int {
	var n int

	// Enforce sanity
	v.Type = types.ChainTypeDataAccount

	n += v.ChainHeader.GetHeaderSize()

	n += encoding.BytesBinarySize(v.Data)

	return n
}

func (v *DirectoryIndexMetadata) BinarySize() int {
	var n int

	n += encoding.UvarintBinarySize(v.Count)

	return n
}

func (v *DirectoryQueryResult) BinarySize() int {
	var n int

	n += encoding.UvarintBinarySize(uint64(len(v.Entries)))

	for _, v := range v.Entries {
		n += encoding.StringBinarySize(v)

	}

	return n
}

func (v *IdentityCreate) BinarySize() int {
	var n int

	n += encoding.UvarintBinarySize(types.TxTypeCreateIdentity.ID())

	n += encoding.StringBinarySize(v.Url)

	n += encoding.BytesBinarySize(v.PublicKey)

	n += encoding.StringBinarySize(v.KeyBookName)

	n += encoding.StringBinarySize(v.KeyPageName)

	return n
}

func (v *IssueTokens) BinarySize() int {
	var n int

	n += encoding.UvarintBinarySize(types.TxTypeIssueTokens.ID())

	n += encoding.StringBinarySize(v.Recipient)

	n += encoding.BigintBinarySize(&v.Amount)

	return n
}

func (v *KeySpec) BinarySize() int {
	var n int

	n += encoding.BytesBinarySize(v.PublicKey)

	n += encoding.UvarintBinarySize(v.Nonce)

	return n
}

func (v *KeySpecParams) BinarySize() int {
	var n int

	n += encoding.BytesBinarySize(v.PublicKey)

	return n
}

func (v *LiteDataAccount) BinarySize() int {
	var n int

	// Enforce sanity
	v.Type = types.ChainTypeLiteDataAccount

	n += v.ChainHeader.GetHeaderSize()

	n += encoding.BytesBinarySize(v.Data)

	return n
}

func (v *MetricsRequest) BinarySize() int {
	var n int

	n += encoding.StringBinarySize(v.Metric)

	n += encoding.DurationBinarySize(v.Duration)

	return n
}

func (v *SigSpec) BinarySize() int {
	var n int

	// Enforce sanity
	v.Type = types.ChainTypeKeyPage

	n += v.ChainHeader.GetHeaderSize()

	n += encoding.BigintBinarySize(&v.CreditBalance)

	n += encoding.UvarintBinarySize(uint64(len(v.Keys)))

	for _, v := range v.Keys {
		n += v.BinarySize()

	}

	return n
}

func (v *SigSpecGroup) BinarySize() int {
	var n int

	// Enforce sanity
	v.Type = types.ChainTypeKeyBook

	n += v.ChainHeader.GetHeaderSize()

	n += encoding.ChainSetBinarySize(v.SigSpecs)

	return n
}

func (v *SyntheticBurnTokens) BinarySize() int {
	var n int

	n += encoding.UvarintBinarySize(types.TxTypeSyntheticBurnTokens.ID())

	n += encoding.BigintBinarySize(&v.Amount)

	return n
}

func (v *SyntheticCreateChain) BinarySize() int {
	var n int

	n += encoding.UvarintBinarySize(types.TxTypeSyntheticCreateChain.ID())

	n += encoding.ChainBinarySize(&v.Cause)

	n += encoding.UvarintBinarySize(uint64(len(v.Chains)))

	for _, v := range v.Chains {
		n += v.BinarySize()

	}

	return n
}

func (v *SyntheticDepositCredits) BinarySize() int {
	var n int

	n += encoding.UvarintBinarySize(types.TxTypeSyntheticDepositCredits.ID())

	n += encoding.ChainBinarySize(&v.Cause)

	n += encoding.UvarintBinarySize(v.Amount)

	return n
}

func (v *SyntheticGenesis) BinarySize() int {
	var n int

	n += encoding.UvarintBinarySize(types.TxTypeSyntheticGenesis.ID())

	return n
}

func (v *SyntheticSignTransactions) BinarySize() int {
	var n int

	n += encoding.UvarintBinarySize(types.TxTypeSyntheticSignTransactions.ID())

	n += encoding.UvarintBinarySize(uint64(len(v.Transactions)))

	for _, v := range v.Transactions {
		n += v.BinarySize()

	}

	return n
}

func (v *SyntheticSignature) BinarySize() int {
	var n int

	n += encoding.ChainBinarySize(&v.Txid)

	n += encoding.BytesBinarySize(v.Signature)

	n += encoding.UvarintBinarySize(v.Nonce)

	return n
}

func (v *SyntheticWriteData) BinarySize() int {
	var n int

	n += encoding.UvarintBinarySize(types.TxTypeSyntheticWriteData.ID())

	n += encoding.BytesBinarySize(v.Data)

	return n
}

func (v *TokenAccountCreate) BinarySize() int {
	var n int

	n += encoding.UvarintBinarySize(types.TxTypeCreateTokenAccount.ID())

	n += encoding.StringBinarySize(v.Url)

	n += encoding.StringBinarySize(v.TokenUrl)

	n += encoding.StringBinarySize(v.KeyBookUrl)

	return n
}

func (v *TokenIssuer) BinarySize() int {
	var n int

	// Enforce sanity
	v.Type = types.ChainTypeTokenIssuer

	n += v.ChainHeader.GetHeaderSize()

	n += encoding.StringBinarySize(v.Symbol)

	n += encoding.UvarintBinarySize(v.Precision)

	n += encoding.StringBinarySize(v.Properties)

	return n
}

func (v *UpdateKeyPage) BinarySize() int {
	var n int

	n += encoding.UvarintBinarySize(types.TxTypeUpdateKeyPage.ID())

	n += v.Operation.BinarySize()

	n += encoding.BytesBinarySize(v.Key)

	n += encoding.BytesBinarySize(v.NewKey)

	return n
}

func (v *WriteData) BinarySize() int {
	var n int

	n += encoding.UvarintBinarySize(types.TxTypeWriteData.ID())

	n += encoding.BytesBinarySize(v.Data)

	return n
}

func (v *WriteDataTo) BinarySize() int {
	var n int

	n += encoding.UvarintBinarySize(types.TxTypeWriteDataTo.ID())

	n += encoding.StringBinarySize(v.Recipient)

	n += encoding.BytesBinarySize(v.Data)

	return n
}

func (v *AcmeFaucet) MarshalBinary() ([]byte, error) {
	var buffer bytes.Buffer

	buffer.Write(encoding.UvarintMarshalBinary(types.TxTypeAcmeFaucet.ID()))

	buffer.Write(encoding.StringMarshalBinary(v.Url))

	return buffer.Bytes(), nil
}

func (v *AddCredits) MarshalBinary() ([]byte, error) {
	var buffer bytes.Buffer

	buffer.Write(encoding.UvarintMarshalBinary(types.TxTypeAddCredits.ID()))

	buffer.Write(encoding.StringMarshalBinary(v.Recipient))

	buffer.Write(encoding.UvarintMarshalBinary(v.Amount))

	return buffer.Bytes(), nil
}

func (v *AnonTokenAccount) MarshalBinary() ([]byte, error) {
	var buffer bytes.Buffer

	// Enforce sanity
	v.Type = types.ChainTypeLiteTokenAccount

	if b, err := v.ChainHeader.MarshalBinary(); err != nil {
		return nil, fmt.Errorf("error encoding header: %w", err)
	} else {
		buffer.Write(b)
	}
	buffer.Write(encoding.StringMarshalBinary(v.TokenUrl))

	buffer.Write(encoding.BigintMarshalBinary(&v.Balance))

	buffer.Write(encoding.UvarintMarshalBinary(v.TxCount))

	buffer.Write(encoding.UvarintMarshalBinary(v.Nonce))

	buffer.Write(encoding.BigintMarshalBinary(&v.CreditBalance))

	return buffer.Bytes(), nil
}

func (v *BurnTokens) MarshalBinary() ([]byte, error) {
	var buffer bytes.Buffer

	buffer.Write(encoding.UvarintMarshalBinary(types.TxTypeBurnTokens.ID()))

	buffer.Write(encoding.BigintMarshalBinary(&v.Amount))

	return buffer.Bytes(), nil
}

func (v *ChainParams) MarshalBinary() ([]byte, error) {
	var buffer bytes.Buffer

	buffer.Write(encoding.BytesMarshalBinary(v.Data))

	buffer.Write(encoding.BoolMarshalBinary(v.IsUpdate))

	return buffer.Bytes(), nil
}

func (v *CreateDataAccount) MarshalBinary() ([]byte, error) {
	var buffer bytes.Buffer

	buffer.Write(encoding.UvarintMarshalBinary(types.TxTypeCreateDataAccount.ID()))

	buffer.Write(encoding.StringMarshalBinary(v.Url))

	return buffer.Bytes(), nil
}

func (v *CreateSigSpec) MarshalBinary() ([]byte, error) {
	var buffer bytes.Buffer

	buffer.Write(encoding.UvarintMarshalBinary(types.TxTypeCreateKeyPage.ID()))

	buffer.Write(encoding.StringMarshalBinary(v.Url))

	buffer.Write(encoding.UvarintMarshalBinary(uint64(len(v.Keys))))
	for i, v := range v.Keys {
		_ = i
		if b, err := v.MarshalBinary(); err != nil {
			return nil, fmt.Errorf("error encoding Keys[%d]: %w", i, err)
		} else {
			buffer.Write(b)
		}

	}

	return buffer.Bytes(), nil
}

func (v *CreateSigSpecGroup) MarshalBinary() ([]byte, error) {
	var buffer bytes.Buffer

	buffer.Write(encoding.UvarintMarshalBinary(types.TxTypeCreateKeyBook.ID()))

	buffer.Write(encoding.StringMarshalBinary(v.Url))

	buffer.Write(encoding.ChainSetMarshalBinary(v.SigSpecs))

	return buffer.Bytes(), nil
}

func (v *CreateToken) MarshalBinary() ([]byte, error) {
	var buffer bytes.Buffer

	buffer.Write(encoding.UvarintMarshalBinary(types.TxTypeCreateToken.ID()))

	buffer.Write(encoding.StringMarshalBinary(v.Url))

	buffer.Write(encoding.StringMarshalBinary(v.Symbol))

	buffer.Write(encoding.UvarintMarshalBinary(v.Precision))

	buffer.Write(encoding.StringMarshalBinary(v.Properties))

	return buffer.Bytes(), nil
}

func (v *DataAccount) MarshalBinary() ([]byte, error) {
	var buffer bytes.Buffer

	// Enforce sanity
	v.Type = types.ChainTypeDataAccount

	if b, err := v.ChainHeader.MarshalBinary(); err != nil {
		return nil, fmt.Errorf("error encoding header: %w", err)
	} else {
		buffer.Write(b)
	}
	buffer.Write(encoding.BytesMarshalBinary(v.Data))

	return buffer.Bytes(), nil
}

func (v *DirectoryIndexMetadata) MarshalBinary() ([]byte, error) {
	var buffer bytes.Buffer

	buffer.Write(encoding.UvarintMarshalBinary(v.Count))

	return buffer.Bytes(), nil
}

func (v *DirectoryQueryResult) MarshalBinary() ([]byte, error) {
	var buffer bytes.Buffer

	buffer.Write(encoding.UvarintMarshalBinary(uint64(len(v.Entries))))
	for i, v := range v.Entries {
		_ = i
		buffer.Write(encoding.StringMarshalBinary(v))

	}

	return buffer.Bytes(), nil
}

func (v *IdentityCreate) MarshalBinary() ([]byte, error) {
	var buffer bytes.Buffer

	buffer.Write(encoding.UvarintMarshalBinary(types.TxTypeCreateIdentity.ID()))

	buffer.Write(encoding.StringMarshalBinary(v.Url))

	buffer.Write(encoding.BytesMarshalBinary(v.PublicKey))

	buffer.Write(encoding.StringMarshalBinary(v.KeyBookName))

	buffer.Write(encoding.StringMarshalBinary(v.KeyPageName))

	return buffer.Bytes(), nil
}

func (v *IssueTokens) MarshalBinary() ([]byte, error) {
	var buffer bytes.Buffer

	buffer.Write(encoding.UvarintMarshalBinary(types.TxTypeIssueTokens.ID()))

	buffer.Write(encoding.StringMarshalBinary(v.Recipient))

	buffer.Write(encoding.BigintMarshalBinary(&v.Amount))

	return buffer.Bytes(), nil
}

func (v *KeySpec) MarshalBinary() ([]byte, error) {
	var buffer bytes.Buffer

	buffer.Write(encoding.BytesMarshalBinary(v.PublicKey))

	buffer.Write(encoding.UvarintMarshalBinary(v.Nonce))

	return buffer.Bytes(), nil
}

func (v *KeySpecParams) MarshalBinary() ([]byte, error) {
	var buffer bytes.Buffer

	buffer.Write(encoding.BytesMarshalBinary(v.PublicKey))

	return buffer.Bytes(), nil
}

func (v *LiteDataAccount) MarshalBinary() ([]byte, error) {
	var buffer bytes.Buffer

	// Enforce sanity
	v.Type = types.ChainTypeLiteDataAccount

	if b, err := v.ChainHeader.MarshalBinary(); err != nil {
		return nil, fmt.Errorf("error encoding header: %w", err)
	} else {
		buffer.Write(b)
	}
	buffer.Write(encoding.BytesMarshalBinary(v.Data))

	return buffer.Bytes(), nil
}

func (v *MetricsRequest) MarshalBinary() ([]byte, error) {
	var buffer bytes.Buffer

	buffer.Write(encoding.StringMarshalBinary(v.Metric))

	buffer.Write(encoding.DurationMarshalBinary(v.Duration))

	return buffer.Bytes(), nil
}

func (v *SigSpec) MarshalBinary() ([]byte, error) {
	var buffer bytes.Buffer

	// Enforce sanity
	v.Type = types.ChainTypeKeyPage

	if b, err := v.ChainHeader.MarshalBinary(); err != nil {
		return nil, fmt.Errorf("error encoding header: %w", err)
	} else {
		buffer.Write(b)
	}
	buffer.Write(encoding.BigintMarshalBinary(&v.CreditBalance))

	buffer.Write(encoding.UvarintMarshalBinary(uint64(len(v.Keys))))
	for i, v := range v.Keys {
		_ = i
		if b, err := v.MarshalBinary(); err != nil {
			return nil, fmt.Errorf("error encoding Keys[%d]: %w", i, err)
		} else {
			buffer.Write(b)
		}

	}

	return buffer.Bytes(), nil
}

func (v *SigSpecGroup) MarshalBinary() ([]byte, error) {
	var buffer bytes.Buffer

	// Enforce sanity
	v.Type = types.ChainTypeKeyBook

	if b, err := v.ChainHeader.MarshalBinary(); err != nil {
		return nil, fmt.Errorf("error encoding header: %w", err)
	} else {
		buffer.Write(b)
	}
	buffer.Write(encoding.ChainSetMarshalBinary(v.SigSpecs))

	return buffer.Bytes(), nil
}

func (v *SyntheticBurnTokens) MarshalBinary() ([]byte, error) {
	var buffer bytes.Buffer

	buffer.Write(encoding.UvarintMarshalBinary(types.TxTypeSyntheticBurnTokens.ID()))

	buffer.Write(encoding.BigintMarshalBinary(&v.Amount))

	return buffer.Bytes(), nil
}

func (v *SyntheticCreateChain) MarshalBinary() ([]byte, error) {
	var buffer bytes.Buffer

	buffer.Write(encoding.UvarintMarshalBinary(types.TxTypeSyntheticCreateChain.ID()))

	buffer.Write(encoding.ChainMarshalBinary(&v.Cause))

	buffer.Write(encoding.UvarintMarshalBinary(uint64(len(v.Chains))))
	for i, v := range v.Chains {
		_ = i
		if b, err := v.MarshalBinary(); err != nil {
			return nil, fmt.Errorf("error encoding Chains[%d]: %w", i, err)
		} else {
			buffer.Write(b)
		}

	}

	return buffer.Bytes(), nil
}

func (v *SyntheticDepositCredits) MarshalBinary() ([]byte, error) {
	var buffer bytes.Buffer

	buffer.Write(encoding.UvarintMarshalBinary(types.TxTypeSyntheticDepositCredits.ID()))

	buffer.Write(encoding.ChainMarshalBinary(&v.Cause))

	buffer.Write(encoding.UvarintMarshalBinary(v.Amount))

	return buffer.Bytes(), nil
}

func (v *SyntheticGenesis) MarshalBinary() ([]byte, error) {
	var buffer bytes.Buffer

	buffer.Write(encoding.UvarintMarshalBinary(types.TxTypeSyntheticGenesis.ID()))

	return buffer.Bytes(), nil
}

func (v *SyntheticSignTransactions) MarshalBinary() ([]byte, error) {
	var buffer bytes.Buffer

	buffer.Write(encoding.UvarintMarshalBinary(types.TxTypeSyntheticSignTransactions.ID()))

	buffer.Write(encoding.UvarintMarshalBinary(uint64(len(v.Transactions))))
	for i, v := range v.Transactions {
		_ = i
		if b, err := v.MarshalBinary(); err != nil {
			return nil, fmt.Errorf("error encoding Transactions[%d]: %w", i, err)
		} else {
			buffer.Write(b)
		}

	}

	return buffer.Bytes(), nil
}

func (v *SyntheticSignature) MarshalBinary() ([]byte, error) {
	var buffer bytes.Buffer

	buffer.Write(encoding.ChainMarshalBinary(&v.Txid))

	buffer.Write(encoding.BytesMarshalBinary(v.Signature))

	buffer.Write(encoding.UvarintMarshalBinary(v.Nonce))

	return buffer.Bytes(), nil
}

func (v *SyntheticWriteData) MarshalBinary() ([]byte, error) {
	var buffer bytes.Buffer

	buffer.Write(encoding.UvarintMarshalBinary(types.TxTypeSyntheticWriteData.ID()))

	buffer.Write(encoding.BytesMarshalBinary(v.Data))

	return buffer.Bytes(), nil
}

func (v *TokenAccountCreate) MarshalBinary() ([]byte, error) {
	var buffer bytes.Buffer

	buffer.Write(encoding.UvarintMarshalBinary(types.TxTypeCreateTokenAccount.ID()))

	buffer.Write(encoding.StringMarshalBinary(v.Url))

	buffer.Write(encoding.StringMarshalBinary(v.TokenUrl))

	buffer.Write(encoding.StringMarshalBinary(v.KeyBookUrl))

	return buffer.Bytes(), nil
}

func (v *TokenIssuer) MarshalBinary() ([]byte, error) {
	var buffer bytes.Buffer

	// Enforce sanity
	v.Type = types.ChainTypeTokenIssuer

	if b, err := v.ChainHeader.MarshalBinary(); err != nil {
		return nil, fmt.Errorf("error encoding header: %w", err)
	} else {
		buffer.Write(b)
	}
	buffer.Write(encoding.StringMarshalBinary(v.Symbol))

	buffer.Write(encoding.UvarintMarshalBinary(v.Precision))

	buffer.Write(encoding.StringMarshalBinary(v.Properties))

	return buffer.Bytes(), nil
}

func (v *UpdateKeyPage) MarshalBinary() ([]byte, error) {
	var buffer bytes.Buffer

	buffer.Write(encoding.UvarintMarshalBinary(types.TxTypeUpdateKeyPage.ID()))

	if b, err := v.Operation.MarshalBinary(); err != nil {
		return nil, fmt.Errorf("error encoding Operation: %w", err)
	} else {
		buffer.Write(b)
	}

	buffer.Write(encoding.BytesMarshalBinary(v.Key))

	buffer.Write(encoding.BytesMarshalBinary(v.NewKey))

	return buffer.Bytes(), nil
}

func (v *WriteData) MarshalBinary() ([]byte, error) {
	var buffer bytes.Buffer

	buffer.Write(encoding.UvarintMarshalBinary(types.TxTypeWriteData.ID()))

	buffer.Write(encoding.BytesMarshalBinary(v.Data))

	return buffer.Bytes(), nil
}

func (v *WriteDataTo) MarshalBinary() ([]byte, error) {
	var buffer bytes.Buffer

	buffer.Write(encoding.UvarintMarshalBinary(types.TxTypeWriteDataTo.ID()))

	buffer.Write(encoding.StringMarshalBinary(v.Recipient))

	buffer.Write(encoding.BytesMarshalBinary(v.Data))

	return buffer.Bytes(), nil
}

func (v *AcmeFaucet) UnmarshalBinary(data []byte) error {
	typ := types.TxTypeAcmeFaucet
	if v, err := encoding.UvarintUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding TX type: %w", err)
	} else if v != uint64(typ) {
		return fmt.Errorf("invalid TX type: want %v, got %v", typ, types.TransactionType(v))
	}
	data = data[encoding.UvarintBinarySize(uint64(typ)):]

	if x, err := encoding.StringUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding Url: %w", err)
	} else {
		v.Url = x
	}
	data = data[encoding.StringBinarySize(v.Url):]

	return nil
}

func (v *AddCredits) UnmarshalBinary(data []byte) error {
	typ := types.TxTypeAddCredits
	if v, err := encoding.UvarintUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding TX type: %w", err)
	} else if v != uint64(typ) {
		return fmt.Errorf("invalid TX type: want %v, got %v", typ, types.TransactionType(v))
	}
	data = data[encoding.UvarintBinarySize(uint64(typ)):]

	if x, err := encoding.StringUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding Recipient: %w", err)
	} else {
		v.Recipient = x
	}
	data = data[encoding.StringBinarySize(v.Recipient):]

	if x, err := encoding.UvarintUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding Amount: %w", err)
	} else {
		v.Amount = x
	}
	data = data[encoding.UvarintBinarySize(v.Amount):]

	return nil
}

func (v *AnonTokenAccount) UnmarshalBinary(data []byte) error {
	typ := types.ChainTypeLiteTokenAccount
	if err := v.ChainHeader.UnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding header: %w", err)
	} else if v.Type != typ {
		return fmt.Errorf("invalid chain type: want %v, got %v", typ, v.Type)
	}
	data = data[v.GetHeaderSize():]

	if x, err := encoding.StringUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding TokenUrl: %w", err)
	} else {
		v.TokenUrl = x
	}
	data = data[encoding.StringBinarySize(v.TokenUrl):]

	if x, err := encoding.BigintUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding Balance: %w", err)
	} else {
		v.Balance.Set(x)
	}
	data = data[encoding.BigintBinarySize(&v.Balance):]

	if x, err := encoding.UvarintUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding TxCount: %w", err)
	} else {
		v.TxCount = x
	}
	data = data[encoding.UvarintBinarySize(v.TxCount):]

	if x, err := encoding.UvarintUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding Nonce: %w", err)
	} else {
		v.Nonce = x
	}
	data = data[encoding.UvarintBinarySize(v.Nonce):]

	if x, err := encoding.BigintUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding CreditBalance: %w", err)
	} else {
		v.CreditBalance.Set(x)
	}
	data = data[encoding.BigintBinarySize(&v.CreditBalance):]

	return nil
}

func (v *BurnTokens) UnmarshalBinary(data []byte) error {
	typ := types.TxTypeBurnTokens
	if v, err := encoding.UvarintUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding TX type: %w", err)
	} else if v != uint64(typ) {
		return fmt.Errorf("invalid TX type: want %v, got %v", typ, types.TransactionType(v))
	}
	data = data[encoding.UvarintBinarySize(uint64(typ)):]

	if x, err := encoding.BigintUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding Amount: %w", err)
	} else {
		v.Amount.Set(x)
	}
	data = data[encoding.BigintBinarySize(&v.Amount):]

	return nil
}

func (v *ChainParams) UnmarshalBinary(data []byte) error {
	if x, err := encoding.BytesUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding Data: %w", err)
	} else {
		v.Data = x
	}
	data = data[encoding.BytesBinarySize(v.Data):]

	if x, err := encoding.BoolUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding IsUpdate: %w", err)
	} else {
		v.IsUpdate = x
	}
	data = data[encoding.BoolBinarySize(v.IsUpdate):]

	return nil
}

func (v *CreateDataAccount) UnmarshalBinary(data []byte) error {
	typ := types.TxTypeCreateDataAccount
	if v, err := encoding.UvarintUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding TX type: %w", err)
	} else if v != uint64(typ) {
		return fmt.Errorf("invalid TX type: want %v, got %v", typ, types.TransactionType(v))
	}
	data = data[encoding.UvarintBinarySize(uint64(typ)):]

	if x, err := encoding.StringUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding Url: %w", err)
	} else {
		v.Url = x
	}
	data = data[encoding.StringBinarySize(v.Url):]

	return nil
}

func (v *CreateSigSpec) UnmarshalBinary(data []byte) error {
	typ := types.TxTypeCreateKeyPage
	if v, err := encoding.UvarintUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding TX type: %w", err)
	} else if v != uint64(typ) {
		return fmt.Errorf("invalid TX type: want %v, got %v", typ, types.TransactionType(v))
	}
	data = data[encoding.UvarintBinarySize(uint64(typ)):]

	if x, err := encoding.StringUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding Url: %w", err)
	} else {
		v.Url = x
	}
	data = data[encoding.StringBinarySize(v.Url):]

	var lenKeys uint64
	if x, err := encoding.UvarintUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding Keys: %w", err)
	} else {
		lenKeys = x
	}
	data = data[encoding.UvarintBinarySize(lenKeys):]

	v.Keys = make([]*KeySpecParams, lenKeys)
	for i := range v.Keys {
		x := new(KeySpecParams)
		if err := x.UnmarshalBinary(data); err != nil {
			return fmt.Errorf("error decoding Keys[%d]: %w", i, err)
		}
		data = data[x.BinarySize():]

		v.Keys[i] = x
	}

	return nil
}

func (v *CreateSigSpecGroup) UnmarshalBinary(data []byte) error {
	typ := types.TxTypeCreateKeyBook
	if v, err := encoding.UvarintUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding TX type: %w", err)
	} else if v != uint64(typ) {
		return fmt.Errorf("invalid TX type: want %v, got %v", typ, types.TransactionType(v))
	}
	data = data[encoding.UvarintBinarySize(uint64(typ)):]

	if x, err := encoding.StringUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding Url: %w", err)
	} else {
		v.Url = x
	}
	data = data[encoding.StringBinarySize(v.Url):]

	if x, err := encoding.ChainSetUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding SigSpecs: %w", err)
	} else {
		v.SigSpecs = x
	}
	data = data[encoding.ChainSetBinarySize(v.SigSpecs):]

	return nil
}

func (v *CreateToken) UnmarshalBinary(data []byte) error {
	typ := types.TxTypeCreateToken
	if v, err := encoding.UvarintUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding TX type: %w", err)
	} else if v != uint64(typ) {
		return fmt.Errorf("invalid TX type: want %v, got %v", typ, types.TransactionType(v))
	}
	data = data[encoding.UvarintBinarySize(uint64(typ)):]

	if x, err := encoding.StringUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding Url: %w", err)
	} else {
		v.Url = x
	}
	data = data[encoding.StringBinarySize(v.Url):]

	if x, err := encoding.StringUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding Symbol: %w", err)
	} else {
		v.Symbol = x
	}
	data = data[encoding.StringBinarySize(v.Symbol):]

	if x, err := encoding.UvarintUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding Precision: %w", err)
	} else {
		v.Precision = x
	}
	data = data[encoding.UvarintBinarySize(v.Precision):]

	if x, err := encoding.StringUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding Properties: %w", err)
	} else {
		v.Properties = x
	}
	data = data[encoding.StringBinarySize(v.Properties):]

	return nil
}

func (v *DataAccount) UnmarshalBinary(data []byte) error {
	typ := types.ChainTypeDataAccount
	if err := v.ChainHeader.UnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding header: %w", err)
	} else if v.Type != typ {
		return fmt.Errorf("invalid chain type: want %v, got %v", typ, v.Type)
	}
	data = data[v.GetHeaderSize():]

	if x, err := encoding.BytesUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding Data: %w", err)
	} else {
		v.Data = x
	}
	data = data[encoding.BytesBinarySize(v.Data):]

	return nil
}

func (v *DirectoryIndexMetadata) UnmarshalBinary(data []byte) error {
	if x, err := encoding.UvarintUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding Count: %w", err)
	} else {
		v.Count = x
	}
	data = data[encoding.UvarintBinarySize(v.Count):]

	return nil
}

func (v *DirectoryQueryResult) UnmarshalBinary(data []byte) error {
	var lenEntries uint64
	if x, err := encoding.UvarintUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding Entries: %w", err)
	} else {
		lenEntries = x
	}
	data = data[encoding.UvarintBinarySize(lenEntries):]

	v.Entries = make([]string, lenEntries)
	for i := range v.Entries {
		if x, err := encoding.StringUnmarshalBinary(data); err != nil {
			return fmt.Errorf("error decoding Entries[%d]: %w", i, err)
		} else {
			v.Entries[i] = x
		}
		data = data[encoding.StringBinarySize(v.Entries[i]):]

	}

	return nil
}

func (v *IdentityCreate) UnmarshalBinary(data []byte) error {
	typ := types.TxTypeCreateIdentity
	if v, err := encoding.UvarintUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding TX type: %w", err)
	} else if v != uint64(typ) {
		return fmt.Errorf("invalid TX type: want %v, got %v", typ, types.TransactionType(v))
	}
	data = data[encoding.UvarintBinarySize(uint64(typ)):]

	if x, err := encoding.StringUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding Url: %w", err)
	} else {
		v.Url = x
	}
	data = data[encoding.StringBinarySize(v.Url):]

	if x, err := encoding.BytesUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding PublicKey: %w", err)
	} else {
		v.PublicKey = x
	}
	data = data[encoding.BytesBinarySize(v.PublicKey):]

	if x, err := encoding.StringUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding KeyBookName: %w", err)
	} else {
		v.KeyBookName = x
	}
	data = data[encoding.StringBinarySize(v.KeyBookName):]

	if x, err := encoding.StringUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding KeyPageName: %w", err)
	} else {
		v.KeyPageName = x
	}
	data = data[encoding.StringBinarySize(v.KeyPageName):]

	return nil
}

func (v *IssueTokens) UnmarshalBinary(data []byte) error {
	typ := types.TxTypeIssueTokens
	if v, err := encoding.UvarintUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding TX type: %w", err)
	} else if v != uint64(typ) {
		return fmt.Errorf("invalid TX type: want %v, got %v", typ, types.TransactionType(v))
	}
	data = data[encoding.UvarintBinarySize(uint64(typ)):]

	if x, err := encoding.StringUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding Recipient: %w", err)
	} else {
		v.Recipient = x
	}
	data = data[encoding.StringBinarySize(v.Recipient):]

	if x, err := encoding.BigintUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding Amount: %w", err)
	} else {
		v.Amount.Set(x)
	}
	data = data[encoding.BigintBinarySize(&v.Amount):]

	return nil
}

func (v *KeySpec) UnmarshalBinary(data []byte) error {
	if x, err := encoding.BytesUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding PublicKey: %w", err)
	} else {
		v.PublicKey = x
	}
	data = data[encoding.BytesBinarySize(v.PublicKey):]

	if x, err := encoding.UvarintUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding Nonce: %w", err)
	} else {
		v.Nonce = x
	}
	data = data[encoding.UvarintBinarySize(v.Nonce):]

	return nil
}

func (v *KeySpecParams) UnmarshalBinary(data []byte) error {
	if x, err := encoding.BytesUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding PublicKey: %w", err)
	} else {
		v.PublicKey = x
	}
	data = data[encoding.BytesBinarySize(v.PublicKey):]

	return nil
}

func (v *LiteDataAccount) UnmarshalBinary(data []byte) error {
	typ := types.ChainTypeLiteDataAccount
	if err := v.ChainHeader.UnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding header: %w", err)
	} else if v.Type != typ {
		return fmt.Errorf("invalid chain type: want %v, got %v", typ, v.Type)
	}
	data = data[v.GetHeaderSize():]

	if x, err := encoding.BytesUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding Data: %w", err)
	} else {
		v.Data = x
	}
	data = data[encoding.BytesBinarySize(v.Data):]

	return nil
}

func (v *MetricsRequest) UnmarshalBinary(data []byte) error {
	if x, err := encoding.StringUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding Metric: %w", err)
	} else {
		v.Metric = x
	}
	data = data[encoding.StringBinarySize(v.Metric):]

	if x, err := encoding.DurationUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding Duration: %w", err)
	} else {
		v.Duration = x
	}
	data = data[encoding.DurationBinarySize(v.Duration):]

	return nil
}

func (v *SigSpec) UnmarshalBinary(data []byte) error {
	typ := types.ChainTypeKeyPage
	if err := v.ChainHeader.UnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding header: %w", err)
	} else if v.Type != typ {
		return fmt.Errorf("invalid chain type: want %v, got %v", typ, v.Type)
	}
	data = data[v.GetHeaderSize():]

	if x, err := encoding.BigintUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding CreditBalance: %w", err)
	} else {
		v.CreditBalance.Set(x)
	}
	data = data[encoding.BigintBinarySize(&v.CreditBalance):]

	var lenKeys uint64
	if x, err := encoding.UvarintUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding Keys: %w", err)
	} else {
		lenKeys = x
	}
	data = data[encoding.UvarintBinarySize(lenKeys):]

	v.Keys = make([]*KeySpec, lenKeys)
	for i := range v.Keys {
		x := new(KeySpec)
		if err := x.UnmarshalBinary(data); err != nil {
			return fmt.Errorf("error decoding Keys[%d]: %w", i, err)
		}
		data = data[x.BinarySize():]

		v.Keys[i] = x
	}

	return nil
}

func (v *SigSpecGroup) UnmarshalBinary(data []byte) error {
	typ := types.ChainTypeKeyBook
	if err := v.ChainHeader.UnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding header: %w", err)
	} else if v.Type != typ {
		return fmt.Errorf("invalid chain type: want %v, got %v", typ, v.Type)
	}
	data = data[v.GetHeaderSize():]

	if x, err := encoding.ChainSetUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding SigSpecs: %w", err)
	} else {
		v.SigSpecs = x
	}
	data = data[encoding.ChainSetBinarySize(v.SigSpecs):]

	return nil
}

func (v *SyntheticBurnTokens) UnmarshalBinary(data []byte) error {
	typ := types.TxTypeSyntheticBurnTokens
	if v, err := encoding.UvarintUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding TX type: %w", err)
	} else if v != uint64(typ) {
		return fmt.Errorf("invalid TX type: want %v, got %v", typ, types.TransactionType(v))
	}
	data = data[encoding.UvarintBinarySize(uint64(typ)):]

	if x, err := encoding.BigintUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding Amount: %w", err)
	} else {
		v.Amount.Set(x)
	}
	data = data[encoding.BigintBinarySize(&v.Amount):]

	return nil
}

func (v *SyntheticCreateChain) UnmarshalBinary(data []byte) error {
	typ := types.TxTypeSyntheticCreateChain
	if v, err := encoding.UvarintUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding TX type: %w", err)
	} else if v != uint64(typ) {
		return fmt.Errorf("invalid TX type: want %v, got %v", typ, types.TransactionType(v))
	}
	data = data[encoding.UvarintBinarySize(uint64(typ)):]

	if x, err := encoding.ChainUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding Cause: %w", err)
	} else {
		v.Cause = x
	}
	data = data[encoding.ChainBinarySize(&v.Cause):]

	var lenChains uint64
	if x, err := encoding.UvarintUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding Chains: %w", err)
	} else {
		lenChains = x
	}
	data = data[encoding.UvarintBinarySize(lenChains):]

	v.Chains = make([]ChainParams, lenChains)
	for i := range v.Chains {
		if err := v.Chains[i].UnmarshalBinary(data); err != nil {
			return fmt.Errorf("error decoding Chains[%d]: %w", i, err)
		}
		data = data[v.Chains[i].BinarySize():]

	}

	return nil
}

func (v *SyntheticDepositCredits) UnmarshalBinary(data []byte) error {
	typ := types.TxTypeSyntheticDepositCredits
	if v, err := encoding.UvarintUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding TX type: %w", err)
	} else if v != uint64(typ) {
		return fmt.Errorf("invalid TX type: want %v, got %v", typ, types.TransactionType(v))
	}
	data = data[encoding.UvarintBinarySize(uint64(typ)):]

	if x, err := encoding.ChainUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding Cause: %w", err)
	} else {
		v.Cause = x
	}
	data = data[encoding.ChainBinarySize(&v.Cause):]

	if x, err := encoding.UvarintUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding Amount: %w", err)
	} else {
		v.Amount = x
	}
	data = data[encoding.UvarintBinarySize(v.Amount):]

	return nil
}

func (v *SyntheticGenesis) UnmarshalBinary(data []byte) error {
	typ := types.TxTypeSyntheticGenesis
	if v, err := encoding.UvarintUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding TX type: %w", err)
	} else if v != uint64(typ) {
		return fmt.Errorf("invalid TX type: want %v, got %v", typ, types.TransactionType(v))
	}
	data = data[encoding.UvarintBinarySize(uint64(typ)):]

	return nil
}

func (v *SyntheticSignTransactions) UnmarshalBinary(data []byte) error {
	typ := types.TxTypeSyntheticSignTransactions
	if v, err := encoding.UvarintUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding TX type: %w", err)
	} else if v != uint64(typ) {
		return fmt.Errorf("invalid TX type: want %v, got %v", typ, types.TransactionType(v))
	}
	data = data[encoding.UvarintBinarySize(uint64(typ)):]

	var lenTransactions uint64
	if x, err := encoding.UvarintUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding Transactions: %w", err)
	} else {
		lenTransactions = x
	}
	data = data[encoding.UvarintBinarySize(lenTransactions):]

	v.Transactions = make([]SyntheticSignature, lenTransactions)
	for i := range v.Transactions {
		if err := v.Transactions[i].UnmarshalBinary(data); err != nil {
			return fmt.Errorf("error decoding Transactions[%d]: %w", i, err)
		}
		data = data[v.Transactions[i].BinarySize():]

	}

	return nil
}

func (v *SyntheticSignature) UnmarshalBinary(data []byte) error {
	if x, err := encoding.ChainUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding Txid: %w", err)
	} else {
		v.Txid = x
	}
	data = data[encoding.ChainBinarySize(&v.Txid):]

	if x, err := encoding.BytesUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding Signature: %w", err)
	} else {
		v.Signature = x
	}
	data = data[encoding.BytesBinarySize(v.Signature):]

	if x, err := encoding.UvarintUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding Nonce: %w", err)
	} else {
		v.Nonce = x
	}
	data = data[encoding.UvarintBinarySize(v.Nonce):]

	return nil
}

func (v *SyntheticWriteData) UnmarshalBinary(data []byte) error {
	typ := types.TxTypeSyntheticWriteData
	if v, err := encoding.UvarintUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding TX type: %w", err)
	} else if v != uint64(typ) {
		return fmt.Errorf("invalid TX type: want %v, got %v", typ, types.TransactionType(v))
	}
	data = data[encoding.UvarintBinarySize(uint64(typ)):]

	if x, err := encoding.BytesUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding Data: %w", err)
	} else {
		v.Data = x
	}
	data = data[encoding.BytesBinarySize(v.Data):]

	return nil
}

func (v *TokenAccountCreate) UnmarshalBinary(data []byte) error {
	typ := types.TxTypeCreateTokenAccount
	if v, err := encoding.UvarintUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding TX type: %w", err)
	} else if v != uint64(typ) {
		return fmt.Errorf("invalid TX type: want %v, got %v", typ, types.TransactionType(v))
	}
	data = data[encoding.UvarintBinarySize(uint64(typ)):]

	if x, err := encoding.StringUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding Url: %w", err)
	} else {
		v.Url = x
	}
	data = data[encoding.StringBinarySize(v.Url):]

	if x, err := encoding.StringUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding TokenUrl: %w", err)
	} else {
		v.TokenUrl = x
	}
	data = data[encoding.StringBinarySize(v.TokenUrl):]

	if x, err := encoding.StringUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding KeyBookUrl: %w", err)
	} else {
		v.KeyBookUrl = x
	}
	data = data[encoding.StringBinarySize(v.KeyBookUrl):]

	return nil
}

func (v *TokenIssuer) UnmarshalBinary(data []byte) error {
	typ := types.ChainTypeTokenIssuer
	if err := v.ChainHeader.UnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding header: %w", err)
	} else if v.Type != typ {
		return fmt.Errorf("invalid chain type: want %v, got %v", typ, v.Type)
	}
	data = data[v.GetHeaderSize():]

	if x, err := encoding.StringUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding Symbol: %w", err)
	} else {
		v.Symbol = x
	}
	data = data[encoding.StringBinarySize(v.Symbol):]

	if x, err := encoding.UvarintUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding Precision: %w", err)
	} else {
		v.Precision = x
	}
	data = data[encoding.UvarintBinarySize(v.Precision):]

	if x, err := encoding.StringUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding Properties: %w", err)
	} else {
		v.Properties = x
	}
	data = data[encoding.StringBinarySize(v.Properties):]

	return nil
}

func (v *UpdateKeyPage) UnmarshalBinary(data []byte) error {
	typ := types.TxTypeUpdateKeyPage
	if v, err := encoding.UvarintUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding TX type: %w", err)
	} else if v != uint64(typ) {
		return fmt.Errorf("invalid TX type: want %v, got %v", typ, types.TransactionType(v))
	}
	data = data[encoding.UvarintBinarySize(uint64(typ)):]

	if err := v.Operation.UnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding Operation: %w", err)
	}
	data = data[v.Operation.BinarySize():]

	if x, err := encoding.BytesUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding Key: %w", err)
	} else {
		v.Key = x
	}
	data = data[encoding.BytesBinarySize(v.Key):]

	if x, err := encoding.BytesUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding NewKey: %w", err)
	} else {
		v.NewKey = x
	}
	data = data[encoding.BytesBinarySize(v.NewKey):]

	return nil
}

func (v *WriteData) UnmarshalBinary(data []byte) error {
	typ := types.TxTypeWriteData
	if v, err := encoding.UvarintUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding TX type: %w", err)
	} else if v != uint64(typ) {
		return fmt.Errorf("invalid TX type: want %v, got %v", typ, types.TransactionType(v))
	}
	data = data[encoding.UvarintBinarySize(uint64(typ)):]

	if x, err := encoding.BytesUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding Data: %w", err)
	} else {
		v.Data = x
	}
	data = data[encoding.BytesBinarySize(v.Data):]

	return nil
}

func (v *WriteDataTo) UnmarshalBinary(data []byte) error {
	typ := types.TxTypeWriteDataTo
	if v, err := encoding.UvarintUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding TX type: %w", err)
	} else if v != uint64(typ) {
		return fmt.Errorf("invalid TX type: want %v, got %v", typ, types.TransactionType(v))
	}
	data = data[encoding.UvarintBinarySize(uint64(typ)):]

	if x, err := encoding.StringUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding Recipient: %w", err)
	} else {
		v.Recipient = x
	}
	data = data[encoding.StringBinarySize(v.Recipient):]

	if x, err := encoding.BytesUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding Data: %w", err)
	} else {
		v.Data = x
	}
	data = data[encoding.BytesBinarySize(v.Data):]

	return nil
}

func (v *ChainParams) MarshalJSON() ([]byte, error) {
	u := struct {
		Data     *string `json:"data,omitempty"`
		IsUpdate bool    `json:"isUpdate,omitempty"`
	}{}
	u.Data = encoding.BytesToJSON(v.Data)
	u.IsUpdate = v.IsUpdate
	return json.Marshal(&u)
}

func (v *CreateSigSpecGroup) MarshalJSON() ([]byte, error) {
	u := struct {
		Url      string   `json:"url,omitempty"`
		SigSpecs []string `json:"sigSpecs,omitempty"`
	}{}
	u.Url = v.Url
	u.SigSpecs = encoding.ChainSetToJSON(v.SigSpecs)
	return json.Marshal(&u)
}

func (v *DataAccount) MarshalJSON() ([]byte, error) {
	u := struct {
		state.ChainHeader
		Data *string `json:"data,omitempty"`
	}{}
	u.ChainHeader = v.ChainHeader
	u.Data = encoding.BytesToJSON(v.Data)
	return json.Marshal(&u)
}

func (v *IdentityCreate) MarshalJSON() ([]byte, error) {
	u := struct {
		Url         string  `json:"url,omitempty"`
		PublicKey   *string `json:"publicKey,omitempty"`
		KeyBookName string  `json:"keyBookName,omitempty"`
		KeyPageName string  `json:"keyPageName,omitempty"`
	}{}
	u.Url = v.Url
	u.PublicKey = encoding.BytesToJSON(v.PublicKey)
	u.KeyBookName = v.KeyBookName
	u.KeyPageName = v.KeyPageName
	return json.Marshal(&u)
}

func (v *KeySpec) MarshalJSON() ([]byte, error) {
	u := struct {
		PublicKey *string `json:"publicKey,omitempty"`
		Nonce     uint64  `json:"nonce,omitempty"`
	}{}
	u.PublicKey = encoding.BytesToJSON(v.PublicKey)
	u.Nonce = v.Nonce
	return json.Marshal(&u)
}

func (v *KeySpecParams) MarshalJSON() ([]byte, error) {
	u := struct {
		PublicKey *string `json:"publicKey,omitempty"`
	}{}
	u.PublicKey = encoding.BytesToJSON(v.PublicKey)
	return json.Marshal(&u)
}

func (v *LiteDataAccount) MarshalJSON() ([]byte, error) {
	u := struct {
		state.ChainHeader
		Data *string `json:"data,omitempty"`
	}{}
	u.ChainHeader = v.ChainHeader
	u.Data = encoding.BytesToJSON(v.Data)
	return json.Marshal(&u)
}

func (v *MetricsRequest) MarshalJSON() ([]byte, error) {
	u := struct {
		Metric   string      `json:"metric,omitempty"`
		Duration interface{} `json:"duration,omitempty"`
	}{}
	u.Metric = v.Metric
	u.Duration = encoding.DurationToJSON(v.Duration)
	return json.Marshal(&u)
}

func (v *SigSpecGroup) MarshalJSON() ([]byte, error) {
	u := struct {
		state.ChainHeader
		SigSpecs []string `json:"sigSpecs,omitempty"`
	}{}
	u.ChainHeader = v.ChainHeader
	u.SigSpecs = encoding.ChainSetToJSON(v.SigSpecs)
	return json.Marshal(&u)
}

func (v *SyntheticCreateChain) MarshalJSON() ([]byte, error) {
	u := struct {
		Cause  string        `json:"cause,omitempty"`
		Chains []ChainParams `json:"chains,omitempty"`
	}{}
	u.Cause = encoding.ChainToJSON(v.Cause)
	u.Chains = v.Chains
	return json.Marshal(&u)
}

func (v *SyntheticDepositCredits) MarshalJSON() ([]byte, error) {
	u := struct {
		Cause  string `json:"cause,omitempty"`
		Amount uint64 `json:"amount,omitempty"`
	}{}
	u.Cause = encoding.ChainToJSON(v.Cause)
	u.Amount = v.Amount
	return json.Marshal(&u)
}

func (v *SyntheticSignature) MarshalJSON() ([]byte, error) {
	u := struct {
		Txid      string  `json:"txid,omitempty"`
		Signature *string `json:"signature,omitempty"`
		Nonce     uint64  `json:"nonce,omitempty"`
	}{}
	u.Txid = encoding.ChainToJSON(v.Txid)
	u.Signature = encoding.BytesToJSON(v.Signature)
	u.Nonce = v.Nonce
	return json.Marshal(&u)
}

func (v *SyntheticWriteData) MarshalJSON() ([]byte, error) {
	u := struct {
		Data *string `json:"data,omitempty"`
	}{}
	u.Data = encoding.BytesToJSON(v.Data)
	return json.Marshal(&u)
}

func (v *UpdateKeyPage) MarshalJSON() ([]byte, error) {
	u := struct {
		Operation KeyPageOperation `json:"operation,omitempty"`
		Key       *string          `json:"key,omitempty"`
		NewKey    *string          `json:"newKey,omitempty"`
	}{}
	u.Operation = v.Operation
	u.Key = encoding.BytesToJSON(v.Key)
	u.NewKey = encoding.BytesToJSON(v.NewKey)
	return json.Marshal(&u)
}

func (v *WriteData) MarshalJSON() ([]byte, error) {
	u := struct {
		Data *string `json:"data,omitempty"`
	}{}
	u.Data = encoding.BytesToJSON(v.Data)
	return json.Marshal(&u)
}

func (v *WriteDataTo) MarshalJSON() ([]byte, error) {
	u := struct {
		Recipient string  `json:"recipient,omitempty"`
		Data      *string `json:"data,omitempty"`
	}{}
	u.Recipient = v.Recipient
	u.Data = encoding.BytesToJSON(v.Data)
	return json.Marshal(&u)
}

func (v *ChainParams) UnmarshalJSON(data []byte) error {
	u := struct {
		Data     *string `json:"data,omitempty"`
		IsUpdate bool    `json:"isUpdate,omitempty"`
	}{}
	u.Data = encoding.BytesToJSON(v.Data)
	u.IsUpdate = v.IsUpdate
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	if x, err := encoding.BytesFromJSON(u.Data); err != nil {
		return fmt.Errorf("error decoding Data: %w", err)
	} else {
		v.Data = x
	}
	v.IsUpdate = u.IsUpdate
	return nil
}

func (v *CreateSigSpecGroup) UnmarshalJSON(data []byte) error {
	u := struct {
		Url      string   `json:"url,omitempty"`
		SigSpecs []string `json:"sigSpecs,omitempty"`
	}{}
	u.Url = v.Url
	u.SigSpecs = encoding.ChainSetToJSON(v.SigSpecs)
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	v.Url = u.Url
	if x, err := encoding.ChainSetFromJSON(u.SigSpecs); err != nil {
		return fmt.Errorf("error decoding SigSpecs: %w", err)
	} else {
		v.SigSpecs = x
	}
	return nil
}

func (v *DataAccount) UnmarshalJSON(data []byte) error {
	u := struct {
		state.ChainHeader
		Data *string `json:"data,omitempty"`
	}{}
	u.ChainHeader = v.ChainHeader
	u.Data = encoding.BytesToJSON(v.Data)
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	v.ChainHeader = u.ChainHeader
	if x, err := encoding.BytesFromJSON(u.Data); err != nil {
		return fmt.Errorf("error decoding Data: %w", err)
	} else {
		v.Data = x
	}
	return nil
}

func (v *IdentityCreate) UnmarshalJSON(data []byte) error {
	u := struct {
		Url         string  `json:"url,omitempty"`
		PublicKey   *string `json:"publicKey,omitempty"`
		KeyBookName string  `json:"keyBookName,omitempty"`
		KeyPageName string  `json:"keyPageName,omitempty"`
	}{}
	u.Url = v.Url
	u.PublicKey = encoding.BytesToJSON(v.PublicKey)
	u.KeyBookName = v.KeyBookName
	u.KeyPageName = v.KeyPageName
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	v.Url = u.Url
	if x, err := encoding.BytesFromJSON(u.PublicKey); err != nil {
		return fmt.Errorf("error decoding PublicKey: %w", err)
	} else {
		v.PublicKey = x
	}
	v.KeyBookName = u.KeyBookName
	v.KeyPageName = u.KeyPageName
	return nil
}

func (v *KeySpec) UnmarshalJSON(data []byte) error {
	u := struct {
		PublicKey *string `json:"publicKey,omitempty"`
		Nonce     uint64  `json:"nonce,omitempty"`
	}{}
	u.PublicKey = encoding.BytesToJSON(v.PublicKey)
	u.Nonce = v.Nonce
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	if x, err := encoding.BytesFromJSON(u.PublicKey); err != nil {
		return fmt.Errorf("error decoding PublicKey: %w", err)
	} else {
		v.PublicKey = x
	}
	v.Nonce = u.Nonce
	return nil
}

func (v *KeySpecParams) UnmarshalJSON(data []byte) error {
	u := struct {
		PublicKey *string `json:"publicKey,omitempty"`
	}{}
	u.PublicKey = encoding.BytesToJSON(v.PublicKey)
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	if x, err := encoding.BytesFromJSON(u.PublicKey); err != nil {
		return fmt.Errorf("error decoding PublicKey: %w", err)
	} else {
		v.PublicKey = x
	}
	return nil
}

func (v *LiteDataAccount) UnmarshalJSON(data []byte) error {
	u := struct {
		state.ChainHeader
		Data *string `json:"data,omitempty"`
	}{}
	u.ChainHeader = v.ChainHeader
	u.Data = encoding.BytesToJSON(v.Data)
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	v.ChainHeader = u.ChainHeader
	if x, err := encoding.BytesFromJSON(u.Data); err != nil {
		return fmt.Errorf("error decoding Data: %w", err)
	} else {
		v.Data = x
	}
	return nil
}

func (v *MetricsRequest) UnmarshalJSON(data []byte) error {
	u := struct {
		Metric   string      `json:"metric,omitempty"`
		Duration interface{} `json:"duration,omitempty"`
	}{}
	u.Metric = v.Metric
	u.Duration = encoding.DurationToJSON(v.Duration)
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	v.Metric = u.Metric
	if x, err := encoding.DurationFromJSON(u.Duration); err != nil {
		return fmt.Errorf("error decoding Duration: %w", err)
	} else {
		v.Duration = x
	}
	return nil
}

func (v *SigSpecGroup) UnmarshalJSON(data []byte) error {
	u := struct {
		state.ChainHeader
		SigSpecs []string `json:"sigSpecs,omitempty"`
	}{}
	u.ChainHeader = v.ChainHeader
	u.SigSpecs = encoding.ChainSetToJSON(v.SigSpecs)
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	v.ChainHeader = u.ChainHeader
	if x, err := encoding.ChainSetFromJSON(u.SigSpecs); err != nil {
		return fmt.Errorf("error decoding SigSpecs: %w", err)
	} else {
		v.SigSpecs = x
	}
	return nil
}

func (v *SyntheticCreateChain) UnmarshalJSON(data []byte) error {
	u := struct {
		Cause  string        `json:"cause,omitempty"`
		Chains []ChainParams `json:"chains,omitempty"`
	}{}
	u.Cause = encoding.ChainToJSON(v.Cause)
	u.Chains = v.Chains
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	if x, err := encoding.ChainFromJSON(u.Cause); err != nil {
		return fmt.Errorf("error decoding Cause: %w", err)
	} else {
		v.Cause = x
	}
	v.Chains = u.Chains
	return nil
}

func (v *SyntheticDepositCredits) UnmarshalJSON(data []byte) error {
	u := struct {
		Cause  string `json:"cause,omitempty"`
		Amount uint64 `json:"amount,omitempty"`
	}{}
	u.Cause = encoding.ChainToJSON(v.Cause)
	u.Amount = v.Amount
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	if x, err := encoding.ChainFromJSON(u.Cause); err != nil {
		return fmt.Errorf("error decoding Cause: %w", err)
	} else {
		v.Cause = x
	}
	v.Amount = u.Amount
	return nil
}

func (v *SyntheticSignature) UnmarshalJSON(data []byte) error {
	u := struct {
		Txid      string  `json:"txid,omitempty"`
		Signature *string `json:"signature,omitempty"`
		Nonce     uint64  `json:"nonce,omitempty"`
	}{}
	u.Txid = encoding.ChainToJSON(v.Txid)
	u.Signature = encoding.BytesToJSON(v.Signature)
	u.Nonce = v.Nonce
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	if x, err := encoding.ChainFromJSON(u.Txid); err != nil {
		return fmt.Errorf("error decoding Txid: %w", err)
	} else {
		v.Txid = x
	}
	if x, err := encoding.BytesFromJSON(u.Signature); err != nil {
		return fmt.Errorf("error decoding Signature: %w", err)
	} else {
		v.Signature = x
	}
	v.Nonce = u.Nonce
	return nil
}

func (v *SyntheticWriteData) UnmarshalJSON(data []byte) error {
	u := struct {
		Data *string `json:"data,omitempty"`
	}{}
	u.Data = encoding.BytesToJSON(v.Data)
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	if x, err := encoding.BytesFromJSON(u.Data); err != nil {
		return fmt.Errorf("error decoding Data: %w", err)
	} else {
		v.Data = x
	}
	return nil
}

func (v *UpdateKeyPage) UnmarshalJSON(data []byte) error {
	u := struct {
		Operation KeyPageOperation `json:"operation,omitempty"`
		Key       *string          `json:"key,omitempty"`
		NewKey    *string          `json:"newKey,omitempty"`
	}{}
	u.Operation = v.Operation
	u.Key = encoding.BytesToJSON(v.Key)
	u.NewKey = encoding.BytesToJSON(v.NewKey)
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	v.Operation = u.Operation
	if x, err := encoding.BytesFromJSON(u.Key); err != nil {
		return fmt.Errorf("error decoding Key: %w", err)
	} else {
		v.Key = x
	}
	if x, err := encoding.BytesFromJSON(u.NewKey); err != nil {
		return fmt.Errorf("error decoding NewKey: %w", err)
	} else {
		v.NewKey = x
	}
	return nil
}

func (v *WriteData) UnmarshalJSON(data []byte) error {
	u := struct {
		Data *string `json:"data,omitempty"`
	}{}
	u.Data = encoding.BytesToJSON(v.Data)
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	if x, err := encoding.BytesFromJSON(u.Data); err != nil {
		return fmt.Errorf("error decoding Data: %w", err)
	} else {
		v.Data = x
	}
	return nil
}

func (v *WriteDataTo) UnmarshalJSON(data []byte) error {
	u := struct {
		Recipient string  `json:"recipient,omitempty"`
		Data      *string `json:"data,omitempty"`
	}{}
	u.Recipient = v.Recipient
	u.Data = encoding.BytesToJSON(v.Data)
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	v.Recipient = u.Recipient
	if x, err := encoding.BytesFromJSON(u.Data); err != nil {
		return fmt.Errorf("error decoding Data: %w", err)
	} else {
		v.Data = x
	}
	return nil
}
