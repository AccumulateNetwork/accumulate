package protocol

// GENERATED BY go run ./tools/cmd/gen-types. DO NOT EDIT.

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"math/big"
	"strings"
	"time"

	"gitlab.com/accumulatenetwork/accumulate/internal/encoding"
	"gitlab.com/accumulatenetwork/accumulate/internal/url"
)

type ADI struct {
	fieldsSet []bool
	AccountHeader
}

type AccountHeader struct {
	fieldsSet      []bool
	Url            *url.URL `json:"url,omitempty" form:"url" query:"url" validate:"required"`
	KeyBook        *url.URL `json:"keyBook,omitempty" form:"keyBook" query:"keyBook" validate:"required"`
	ManagerKeyBook *url.URL `json:"managerKeyBook,omitempty" form:"managerKeyBook" query:"managerKeyBook" validate:"required"`
}

type AcmeFaucet struct {
	fieldsSet []bool
	Url       *url.URL `json:"url,omitempty" form:"url" query:"url" validate:"required"`
}

type AcmeOracle struct {
	fieldsSet []bool
	Price     uint64 `json:"price,omitempty" form:"price" query:"price" validate:"required"`
}

type AddCredits struct {
	fieldsSet []bool
	Recipient *url.URL `json:"recipient,omitempty" form:"recipient" query:"recipient" validate:"required"`
	Amount    big.Int  `json:"amount,omitempty" form:"amount" query:"amount" validate:"required"`
}

type Anchor struct {
	fieldsSet []bool
	AccountHeader
}

type AnchorMetadata struct {
	fieldsSet []bool
	ChainMetadata
	Account     *url.URL `json:"account,omitempty" form:"account" query:"account" validate:"required"`
	Index       uint64   `json:"index,omitempty" form:"index" query:"index" validate:"required"`
	SourceIndex uint64   `json:"sourceIndex,omitempty" form:"sourceIndex" query:"sourceIndex" validate:"required"`
	SourceBlock uint64   `json:"sourceBlock,omitempty" form:"sourceBlock" query:"sourceBlock" validate:"required"`
	Entry       []byte   `json:"entry,omitempty" form:"entry" query:"entry" validate:"required"`
}

type AnchoredRecord struct {
	fieldsSet []bool
	Record    []byte   `json:"record,omitempty" form:"record" query:"record" validate:"required"`
	Anchor    [32]byte `json:"anchor,omitempty" form:"anchor" query:"anchor" validate:"required"`
}

type BurnTokens struct {
	fieldsSet []bool
	Amount    big.Int `json:"amount,omitempty" form:"amount" query:"amount" validate:"required"`
}

type ChainMetadata struct {
	fieldsSet []bool
	Name      string    `json:"name,omitempty" form:"name" query:"name" validate:"required"`
	Type      ChainType `json:"type,omitempty" form:"type" query:"type" validate:"required"`
}

type ChainParams struct {
	fieldsSet []bool
	Data      []byte `json:"data,omitempty" form:"data" query:"data" validate:"required"`
	IsUpdate  bool   `json:"isUpdate,omitempty" form:"isUpdate" query:"isUpdate" validate:"required"`
}

type CreateDataAccount struct {
	fieldsSet         []bool
	Url               *url.URL `json:"url,omitempty" form:"url" query:"url" validate:"required"`
	KeyBookUrl        *url.URL `json:"keyBookUrl,omitempty" form:"keyBookUrl" query:"keyBookUrl"`
	ManagerKeyBookUrl *url.URL `json:"managerKeyBookUrl,omitempty" form:"managerKeyBookUrl" query:"managerKeyBookUrl"`
	Scratch           bool     `json:"scratch,omitempty" form:"scratch" query:"scratch"`
}

type CreateIdentity struct {
	fieldsSet   []bool
	Url         *url.URL `json:"url,omitempty" form:"url" query:"url" validate:"required"`
	PublicKey   []byte   `json:"publicKey,omitempty" form:"publicKey" query:"publicKey" validate:"required"`
	KeyBookName string   `json:"keyBookName,omitempty" form:"keyBookName" query:"keyBookName"`
	KeyPageName string   `json:"keyPageName,omitempty" form:"keyPageName" query:"keyPageName"`
	Manager     *url.URL `json:"manager,omitempty" form:"manager" query:"manager"`
}

type CreateKeyBook struct {
	fieldsSet []bool
	Url       *url.URL   `json:"url,omitempty" form:"url" query:"url" validate:"required"`
	Pages     []*url.URL `json:"pages,omitempty" form:"pages" query:"pages" validate:"required"`
	Manager   *url.URL   `json:"manager,omitempty" form:"manager" query:"manager"`
}

type CreateKeyPage struct {
	fieldsSet []bool
	Url       *url.URL         `json:"url,omitempty" form:"url" query:"url" validate:"required"`
	Keys      []*KeySpecParams `json:"keys,omitempty" form:"keys" query:"keys" validate:"required"`
	Manager   *url.URL         `json:"manager,omitempty" form:"manager" query:"manager"`
}

type CreateToken struct {
	fieldsSet      []bool
	Url            *url.URL `json:"url,omitempty" form:"url" query:"url" validate:"required"`
	KeyBookUrl     *url.URL `json:"keyBookUrl,omitempty" form:"keyBookUrl" query:"keyBookUrl"`
	Symbol         string   `json:"symbol,omitempty" form:"symbol" query:"symbol" validate:"required"`
	Precision      uint64   `json:"precision,omitempty" form:"precision" query:"precision" validate:"required"`
	Properties     *url.URL `json:"properties,omitempty" form:"properties" query:"properties"`
	InitialSupply  big.Int  `json:"initialSupply,omitempty" form:"initialSupply" query:"initialSupply"`
	HasSupplyLimit bool     `json:"hasSupplyLimit,omitempty" form:"hasSupplyLimit" query:"hasSupplyLimit"`
	Manager        *url.URL `json:"manager,omitempty" form:"manager" query:"manager"`
}

type CreateTokenAccount struct {
	fieldsSet  []bool
	Url        *url.URL `json:"url,omitempty" form:"url" query:"url" validate:"required"`
	TokenUrl   *url.URL `json:"tokenUrl,omitempty" form:"tokenUrl" query:"tokenUrl" validate:"required"`
	KeyBookUrl *url.URL `json:"keyBookUrl,omitempty" form:"keyBookUrl" query:"keyBookUrl"`
	Scratch    bool     `json:"scratch,omitempty" form:"scratch" query:"scratch"`
	Manager    *url.URL `json:"manager,omitempty" form:"manager" query:"manager"`
}

type DataAccount struct {
	fieldsSet []bool
	AccountHeader
	Scratch bool `json:"scratch,omitempty" form:"scratch" query:"scratch"`
}

type DataEntry struct {
	fieldsSet []bool
	ExtIds    [][]byte `json:"extIds,omitempty" form:"extIds" query:"extIds"`
	Data      []byte   `json:"data,omitempty" form:"data" query:"data"`
}

type DirectoryIndexMetadata struct {
	fieldsSet []bool
	Count     uint64 `json:"count,omitempty" form:"count" query:"count" validate:"required"`
}

type DirectoryQueryResult struct {
	fieldsSet       []bool
	Entries         []string  `json:"entries,omitempty" form:"entries" query:"entries"`
	ExpandedEntries []*Object `json:"expandedEntries,omitempty" form:"expandedEntries" query:"expandedEntries"`
	Total           uint64    `json:"total" form:"total" query:"total" validate:"required"`
}

type ED25519Signature struct {
	fieldsSet []bool
	PublicKey []byte `json:"publicKey,omitempty" form:"publicKey" query:"publicKey" validate:"required"`
	Signature []byte `json:"signature,omitempty" form:"signature" query:"signature" validate:"required"`
}

type EmptyResult struct {
	fieldsSet []bool
}

type Envelope struct {
	fieldsSet   []bool
	Signatures  []Signature  `json:"signatures,omitempty" form:"signatures" query:"signatures" validate:"required"`
	TxHash      []byte       `json:"txHash,omitempty" form:"txHash" query:"txHash"`
	Transaction *Transaction `json:"transaction,omitempty" form:"transaction" query:"transaction"`
	hash        []byte
}

type InternalGenesis struct {
	fieldsSet []bool
}

type InternalLedger struct {
	fieldsSet []bool
	AccountHeader
	Index         int64            `json:"index,omitempty" form:"index" query:"index" validate:"required"`
	Timestamp     time.Time        `json:"timestamp,omitempty" form:"timestamp" query:"timestamp" validate:"required"`
	Synthetic     SyntheticLedger  `json:"synthetic,omitempty" form:"synthetic" query:"synthetic" validate:"required"`
	PendingOracle uint64           `json:"pendingOracle,omitempty" form:"pendingOracle" query:"pendingOracle" validate:"required"`
	ActiveOracle  uint64           `json:"activeOracle,omitempty" form:"activeOracle" query:"activeOracle" validate:"required"`
	Updates       []AnchorMetadata `json:"updates,omitempty" form:"updates" query:"updates" validate:"required"`
}

type InternalSendTransactions struct {
	fieldsSet    []bool
	Transactions []SendTransaction `json:"transactions,omitempty" form:"transactions" query:"transactions" validate:"required"`
}

type InternalTransactionsSent struct {
	fieldsSet    []bool
	Transactions [][32]byte `json:"transactions,omitempty" form:"transactions" query:"transactions" validate:"required"`
}

type InternalTransactionsSigned struct {
	fieldsSet    []bool
	Transactions []TransactionSignature `json:"transactions,omitempty" form:"transactions" query:"transactions" validate:"required"`
}

type IssueTokens struct {
	fieldsSet []bool
	Recipient *url.URL `json:"recipient,omitempty" form:"recipient" query:"recipient" validate:"required"`
	Amount    big.Int  `json:"amount,omitempty" form:"amount" query:"amount" validate:"required"`
}

type KeyBook struct {
	fieldsSet []bool
	AccountHeader
	Pages []*url.URL `json:"pages,omitempty" form:"pages" query:"pages" validate:"required"`
}

type KeyPage struct {
	fieldsSet []bool
	AccountHeader
	CreditBalance big.Int    `json:"creditBalance,omitempty" form:"creditBalance" query:"creditBalance" validate:"required"`
	Threshold     uint64     `json:"threshold,omitempty" form:"threshold" query:"threshold" validate:"required"`
	Keys          []*KeySpec `json:"keys,omitempty" form:"keys" query:"keys" validate:"required"`
}

type KeySpec struct {
	fieldsSet []bool
	PublicKey []byte   `json:"publicKey,omitempty" form:"publicKey" query:"publicKey" validate:"required"`
	Nonce     uint64   `json:"nonce,omitempty" form:"nonce" query:"nonce" validate:"required"`
	Owner     *url.URL `json:"owner,omitempty" form:"owner" query:"owner" validate:"required"`
}

type KeySpecParams struct {
	fieldsSet []bool
	PublicKey []byte `json:"publicKey,omitempty" form:"publicKey" query:"publicKey" validate:"required"`
}

type LegacyED25519Signature struct {
	fieldsSet []bool
	Nonce     uint64 `json:"nonce,omitempty" form:"nonce" query:"nonce" validate:"required"`
	PublicKey []byte `json:"publicKey,omitempty" form:"publicKey" query:"publicKey" validate:"required"`
	Signature []byte `json:"signature,omitempty" form:"signature" query:"signature" validate:"required"`
}

type LiteDataAccount struct {
	fieldsSet []bool
	AccountHeader
	Tail []byte `json:"tail,omitempty" form:"tail" query:"tail" validate:"required"`
}

type LiteIdentity struct {
	fieldsSet []bool
	AccountHeader
}

type LiteTokenAccount struct {
	fieldsSet []bool
	AccountHeader
	TokenUrl      *url.URL `json:"tokenUrl,omitempty" form:"tokenUrl" query:"tokenUrl" validate:"required"`
	Balance       big.Int  `json:"balance,omitempty" form:"balance" query:"balance" validate:"required"`
	Nonce         uint64   `json:"nonce,omitempty" form:"nonce" query:"nonce" validate:"required"`
	CreditBalance big.Int  `json:"creditBalance,omitempty" form:"creditBalance" query:"creditBalance" validate:"required"`
}

type MetricsRequest struct {
	fieldsSet []bool
	Metric    string        `json:"metric,omitempty" form:"metric" query:"metric" validate:"required"`
	Duration  time.Duration `json:"duration,omitempty" form:"duration" query:"duration" validate:"required"`
}

type MetricsResponse struct {
	Value interface{} `json:"value,omitempty" form:"value" query:"value" validate:"required"`
}

type Object struct {
	fieldsSet []bool
	Entry     []byte   `json:"entry,omitempty" form:"entry" query:"entry" validate:"required"`
	Height    uint64   `json:"height,omitempty" form:"height" query:"height" validate:"required"`
	Roots     [][]byte `json:"roots,omitempty" form:"roots" query:"roots" validate:"required"`
}

type ObjectMetadata struct {
	fieldsSet []bool
	Type      ObjectType      `json:"type,omitempty" form:"type" query:"type" validate:"required"`
	Chains    []ChainMetadata `json:"chains,omitempty" form:"chains" query:"chains" validate:"required"`
}

type PendingTransactionState struct {
	fieldsSet []bool
	AccountHeader
	Signature        []Signature     `json:"signature,omitempty" form:"signature" query:"signature" validate:"required"`
	TransactionState *TxState        `json:"transactionState,omitempty" form:"transactionState" query:"transactionState" validate:"required"`
	Status           json.RawMessage `json:"status,omitempty" form:"status" query:"status" validate:"required"`
}

type Receipt struct {
	fieldsSet []bool
	Start     []byte         `json:"start,omitempty" form:"start" query:"start" validate:"required"`
	Entries   []ReceiptEntry `json:"entries,omitempty" form:"entries" query:"entries" validate:"required"`
}

type ReceiptEntry struct {
	fieldsSet []bool
	Right     bool   `json:"right,omitempty" form:"right" query:"right" validate:"required"`
	Hash      []byte `json:"hash,omitempty" form:"hash" query:"hash" validate:"required"`
}

type RemoveManager struct {
	fieldsSet []bool
}

type RequestDataEntry struct {
	fieldsSet []bool
	Url       *url.URL `json:"url,omitempty" form:"url" query:"url" validate:"required"`
	EntryHash [32]byte `json:"entryHash,omitempty" form:"entryHash" query:"entryHash"`
}

type RequestDataEntrySet struct {
	fieldsSet    []bool
	Url          *url.URL `json:"url,omitempty" form:"url" query:"url" validate:"required"`
	Start        uint64   `json:"start,omitempty" form:"start" query:"start" validate:"required"`
	Count        uint64   `json:"count,omitempty" form:"count" query:"count" validate:"required"`
	ExpandChains bool     `json:"expandChains,omitempty" form:"expandChains" query:"expandChains"`
}

type ResponseDataEntry struct {
	fieldsSet []bool
	EntryHash [32]byte  `json:"entryHash,omitempty" form:"entryHash" query:"entryHash" validate:"required"`
	Entry     DataEntry `json:"entry,omitempty" form:"entry" query:"entry" validate:"required"`
}

type ResponseDataEntrySet struct {
	fieldsSet   []bool
	DataEntries []ResponseDataEntry `json:"dataEntries,omitempty" form:"dataEntries" query:"dataEntries" validate:"required"`
	Total       uint64              `json:"total,omitempty" form:"total" query:"total" validate:"required"`
}

type SegWitDataEntry struct {
	fieldsSet []bool
	Cause     [32]byte `json:"cause,omitempty" form:"cause" query:"cause" validate:"required"`
	EntryUrl  *url.URL `json:"entryUrl,omitempty" form:"entryUrl" query:"entryUrl" validate:"required"`
	EntryHash [32]byte `json:"entryHash,omitempty" form:"entryHash" query:"entryHash" validate:"required"`
}

type SendTokens struct {
	fieldsSet []bool
	Hash      [32]byte          `json:"hash,omitempty" form:"hash" query:"hash"`
	Meta      json.RawMessage   `json:"meta,omitempty" form:"meta" query:"meta"`
	To        []*TokenRecipient `json:"to,omitempty" form:"to" query:"to" validate:"required"`
}

type SendTransaction struct {
	fieldsSet []bool
	Payload   TransactionPayload `json:"payload,omitempty" form:"payload" query:"payload" validate:"required"`
	Recipient *url.URL           `json:"recipient,omitempty" form:"recipient" query:"recipient" validate:"required"`
}

type SignPending struct {
	fieldsSet []bool
}

type SyntheticAnchor struct {
	fieldsSet       []bool
	Source          *url.URL `json:"source,omitempty" form:"source" query:"source" validate:"required"`
	Major           bool     `json:"major,omitempty" form:"major" query:"major" validate:"required"`
	RootAnchor      [32]byte `json:"rootAnchor,omitempty" form:"rootAnchor" query:"rootAnchor" validate:"required"`
	RootIndex       uint64   `json:"rootIndex,omitempty" form:"rootIndex" query:"rootIndex" validate:"required"`
	Block           uint64   `json:"block,omitempty" form:"block" query:"block" validate:"required"`
	SourceIndex     uint64   `json:"sourceIndex,omitempty" form:"sourceIndex" query:"sourceIndex" validate:"required"`
	SourceBlock     uint64   `json:"sourceBlock,omitempty" form:"sourceBlock" query:"sourceBlock" validate:"required"`
	AcmeOraclePrice uint64   `json:"acmeOraclePrice,omitempty" form:"acmeOraclePrice" query:"acmeOraclePrice" validate:"required"`
	Receipt         Receipt  `json:"receipt,omitempty" form:"receipt" query:"receipt" validate:"required"`
}

type SyntheticBurnTokens struct {
	fieldsSet []bool
	Cause     [32]byte `json:"cause,omitempty" form:"cause" query:"cause" validate:"required"`
	Amount    big.Int  `json:"amount,omitempty" form:"amount" query:"amount" validate:"required"`
}

type SyntheticCreateChain struct {
	fieldsSet []bool
	Cause     [32]byte      `json:"cause,omitempty" form:"cause" query:"cause" validate:"required"`
	Chains    []ChainParams `json:"chains,omitempty" form:"chains" query:"chains" validate:"required"`
}

type SyntheticDepositCredits struct {
	fieldsSet []bool
	Cause     [32]byte `json:"cause,omitempty" form:"cause" query:"cause" validate:"required"`
	Amount    uint64   `json:"amount,omitempty" form:"amount" query:"amount" validate:"required"`
}

type SyntheticDepositTokens struct {
	fieldsSet []bool
	Cause     [32]byte `json:"cause,omitempty" form:"cause" query:"cause" validate:"required"`
	Token     *url.URL `json:"token,omitempty" form:"token" query:"token" validate:"required"`
	Amount    big.Int  `json:"amount,omitempty" form:"amount" query:"amount" validate:"required"`
}

type SyntheticLedger struct {
	fieldsSet []bool
	Nonce     uint64     `json:"nonce,omitempty" form:"nonce" query:"nonce" validate:"required"`
	Produced  [][32]byte `json:"produced,omitempty" form:"produced" query:"produced" validate:"required"`
	Unsigned  [][32]byte `json:"unsigned,omitempty" form:"unsigned" query:"unsigned" validate:"required"`
	Unsent    [][32]byte `json:"unsent,omitempty" form:"unsent" query:"unsent" validate:"required"`
}

type SyntheticMirror struct {
	fieldsSet []bool
	Objects   []AnchoredRecord `json:"objects,omitempty" form:"objects" query:"objects" validate:"required"`
}

type SyntheticWriteData struct {
	fieldsSet []bool
	Cause     [32]byte  `json:"cause,omitempty" form:"cause" query:"cause" validate:"required"`
	Entry     DataEntry `json:"entry,omitempty" form:"entry" query:"entry" validate:"required"`
}

type TokenAccount struct {
	fieldsSet []bool
	AccountHeader
	TokenUrl *url.URL `json:"tokenUrl,omitempty" form:"tokenUrl" query:"tokenUrl" validate:"required"`
	Balance  big.Int  `json:"balance,omitempty" form:"balance" query:"balance" validate:"required"`
	Scratch  bool     `json:"scratch,omitempty" form:"scratch" query:"scratch"`
}

type TokenIssuer struct {
	fieldsSet []bool
	AccountHeader
	Symbol         string   `json:"symbol,omitempty" form:"symbol" query:"symbol" validate:"required"`
	Precision      uint64   `json:"precision,omitempty" form:"precision" query:"precision" validate:"required"`
	Properties     *url.URL `json:"properties,omitempty" form:"properties" query:"properties" validate:"required"`
	Supply         big.Int  `json:"supply,omitempty" form:"supply" query:"supply"`
	HasSupplyLimit bool     `json:"hasSupplyLimit,omitempty" form:"hasSupplyLimit" query:"hasSupplyLimit"`
}

type TokenRecipient struct {
	fieldsSet []bool
	Url       *url.URL `json:"url,omitempty" form:"url" query:"url" validate:"required"`
	Amount    big.Int  `json:"amount,omitempty" form:"amount" query:"amount" validate:"required"`
}

type Transaction struct {
	fieldsSet []bool
	TransactionHeader
	Body TransactionPayload `json:"body,omitempty" form:"body" query:"body" validate:"required"`
	hash []byte
}

type TransactionHeader struct {
	fieldsSet     []bool
	Origin        *url.URL `json:"origin,omitempty" form:"origin" query:"origin" validate:"required"`
	KeyPageHeight uint64   `json:"keyPageHeight,omitempty" form:"keyPageHeight" query:"keyPageHeight" validate:"required"`
	KeyPageIndex  uint64   `json:"keyPageIndex,omitempty" form:"keyPageIndex" query:"keyPageIndex" validate:"required"`
	Nonce         uint64   `json:"nonce,omitempty" form:"nonce" query:"nonce" validate:"required"`
}

type TransactionSignature struct {
	fieldsSet   []bool
	Transaction [32]byte  `json:"transaction,omitempty" form:"transaction" query:"transaction" validate:"required"`
	Signature   Signature `json:"signature,omitempty" form:"signature" query:"signature" validate:"required"`
}

type TransactionState struct {
	fieldsSet []bool
	AccountHeader
	TxState
}

type TransactionStatus struct {
	fieldsSet []bool
	Remote    bool              `json:"remote,omitempty" form:"remote" query:"remote" validate:"required"`
	Delivered bool              `json:"delivered,omitempty" form:"delivered" query:"delivered" validate:"required"`
	Pending   bool              `json:"pending,omitempty" form:"pending" query:"pending" validate:"required"`
	Code      uint64            `json:"code,omitempty" form:"code" query:"code" validate:"required"`
	Message   string            `json:"message,omitempty" form:"message" query:"message" validate:"required"`
	Result    TransactionResult `json:"result,omitempty" form:"result" query:"result"`
}

type TxState struct {
	fieldsSet       []bool
	SigInfo         *TransactionHeader `json:"sigInfo,omitempty" form:"sigInfo" query:"sigInfo" validate:"required"`
	Transaction     TransactionPayload `json:"transaction,omitempty" form:"transaction" query:"transaction" validate:"required"`
	TransactionHash [32]byte
}

type UpdateKeyPage struct {
	fieldsSet []bool
	Operation KeyPageOperation `json:"operation,omitempty" form:"operation" query:"operation" validate:"required"`
	Key       []byte           `json:"key,omitempty" form:"key" query:"key"`
	NewKey    []byte           `json:"newKey,omitempty" form:"newKey" query:"newKey"`
	Owner     *url.URL         `json:"owner,omitempty" form:"owner" query:"owner"`
	Threshold uint64           `json:"threshold,omitempty" form:"threshold" query:"threshold"`
}

type UpdateManager struct {
	fieldsSet      []bool
	ManagerKeyBook *url.URL `json:"managerKeyBook,omitempty" form:"managerKeyBook" query:"managerKeyBook" validate:"required"`
}

type WriteData struct {
	fieldsSet []bool
	Entry     DataEntry `json:"entry,omitempty" form:"entry" query:"entry" validate:"required"`
}

type WriteDataResult struct {
	fieldsSet  []bool
	EntryHash  [32]byte `json:"entryHash,omitempty" form:"entryHash" query:"entryHash" validate:"required"`
	AccountUrl *url.URL `json:"accountUrl,omitempty" form:"accountUrl" query:"accountUrl" validate:"required"`
	AccountID  []byte   `json:"accountID,omitempty" form:"accountID" query:"accountID" validate:"required"`
}

type WriteDataTo struct {
	fieldsSet []bool
	Recipient *url.URL  `json:"recipient,omitempty" form:"recipient" query:"recipient" validate:"required"`
	Entry     DataEntry `json:"entry,omitempty" form:"entry" query:"entry" validate:"required"`
}

// Deprated: use new(ADI)
func NewADI() *ADI {
	return new(ADI)
}

// Deprated: use new(Anchor)
func NewAnchor() *Anchor {
	return new(Anchor)
}

// Deprated: use new(DataAccount)
func NewDataAccount() *DataAccount {
	return new(DataAccount)
}

// Deprated: use new(InternalLedger)
func NewInternalLedger() *InternalLedger {
	return new(InternalLedger)
}

// Deprated: use new(KeyBook)
func NewKeyBook() *KeyBook {
	return new(KeyBook)
}

// Deprated: use new(KeyPage)
func NewKeyPage() *KeyPage {
	return new(KeyPage)
}

// Deprated: use new(LiteDataAccount)
func NewLiteDataAccount() *LiteDataAccount {
	return new(LiteDataAccount)
}

// Deprated: use new(LiteIdentity)
func NewLiteIdentity() *LiteIdentity {
	return new(LiteIdentity)
}

// Deprated: use new(LiteTokenAccount)
func NewLiteTokenAccount() *LiteTokenAccount {
	return new(LiteTokenAccount)
}

// Deprated: use new(TokenAccount)
func NewTokenAccount() *TokenAccount {
	return new(TokenAccount)
}

// Deprated: use new(TokenIssuer)
func NewTokenIssuer() *TokenIssuer {
	return new(TokenIssuer)
}

func (*ADI) Type() AccountType { return AccountTypeIdentity }

func (*ADI) GetType() AccountType { return AccountTypeIdentity }

func (*AcmeFaucet) Type() TransactionType { return TransactionTypeAcmeFaucet }

func (*AcmeFaucet) GetType() TransactionType { return TransactionTypeAcmeFaucet }

func (*AddCredits) Type() TransactionType { return TransactionTypeAddCredits }

func (*AddCredits) GetType() TransactionType { return TransactionTypeAddCredits }

func (*Anchor) Type() AccountType { return AccountTypeAnchor }

func (*Anchor) GetType() AccountType { return AccountTypeAnchor }

func (*BurnTokens) Type() TransactionType { return TransactionTypeBurnTokens }

func (*BurnTokens) GetType() TransactionType { return TransactionTypeBurnTokens }

func (*CreateDataAccount) Type() TransactionType { return TransactionTypeCreateDataAccount }

func (*CreateDataAccount) GetType() TransactionType { return TransactionTypeCreateDataAccount }

func (*CreateIdentity) Type() TransactionType { return TransactionTypeCreateIdentity }

func (*CreateIdentity) GetType() TransactionType { return TransactionTypeCreateIdentity }

func (*CreateKeyBook) Type() TransactionType { return TransactionTypeCreateKeyBook }

func (*CreateKeyBook) GetType() TransactionType { return TransactionTypeCreateKeyBook }

func (*CreateKeyPage) Type() TransactionType { return TransactionTypeCreateKeyPage }

func (*CreateKeyPage) GetType() TransactionType { return TransactionTypeCreateKeyPage }

func (*CreateToken) Type() TransactionType { return TransactionTypeCreateToken }

func (*CreateToken) GetType() TransactionType { return TransactionTypeCreateToken }

func (*CreateTokenAccount) Type() TransactionType { return TransactionTypeCreateTokenAccount }

func (*CreateTokenAccount) GetType() TransactionType { return TransactionTypeCreateTokenAccount }

func (*DataAccount) Type() AccountType { return AccountTypeDataAccount }

func (*DataAccount) GetType() AccountType { return AccountTypeDataAccount }

func (*ED25519Signature) Type() SignatureType { return SignatureTypeED25519 }

func (*EmptyResult) Type() TransactionType { return TransactionTypeUnknown }

func (*EmptyResult) GetType() TransactionType { return TransactionTypeUnknown }

func (*InternalGenesis) Type() TransactionType { return TransactionTypeInternalGenesis }

func (*InternalGenesis) GetType() TransactionType { return TransactionTypeInternalGenesis }

func (*InternalLedger) Type() AccountType { return AccountTypeInternalLedger }

func (*InternalLedger) GetType() AccountType { return AccountTypeInternalLedger }

func (*InternalSendTransactions) Type() TransactionType {
	return TransactionTypeInternalSendTransactions
}

func (*InternalSendTransactions) GetType() TransactionType {
	return TransactionTypeInternalSendTransactions
}

func (*InternalTransactionsSent) Type() TransactionType {
	return TransactionTypeInternalTransactionsSent
}

func (*InternalTransactionsSent) GetType() TransactionType {
	return TransactionTypeInternalTransactionsSent
}

func (*InternalTransactionsSigned) Type() TransactionType {
	return TransactionTypeInternalTransactionsSigned
}

func (*InternalTransactionsSigned) GetType() TransactionType {
	return TransactionTypeInternalTransactionsSigned
}

func (*IssueTokens) Type() TransactionType { return TransactionTypeIssueTokens }

func (*IssueTokens) GetType() TransactionType { return TransactionTypeIssueTokens }

func (*KeyBook) Type() AccountType { return AccountTypeKeyBook }

func (*KeyBook) GetType() AccountType { return AccountTypeKeyBook }

func (*KeyPage) Type() AccountType { return AccountTypeKeyPage }

func (*KeyPage) GetType() AccountType { return AccountTypeKeyPage }

func (*LegacyED25519Signature) Type() SignatureType { return SignatureTypeLegacyED25519 }

func (*LiteDataAccount) Type() AccountType { return AccountTypeLiteDataAccount }

func (*LiteDataAccount) GetType() AccountType { return AccountTypeLiteDataAccount }

func (*LiteIdentity) Type() AccountType { return AccountTypeLiteIdentity }

func (*LiteIdentity) GetType() AccountType { return AccountTypeLiteIdentity }

func (*LiteTokenAccount) Type() AccountType { return AccountTypeLiteTokenAccount }

func (*LiteTokenAccount) GetType() AccountType { return AccountTypeLiteTokenAccount }

func (*PendingTransactionState) Type() AccountType { return AccountTypePendingTransaction }

func (*PendingTransactionState) GetType() AccountType { return AccountTypePendingTransaction }

func (*RemoveManager) Type() TransactionType { return TransactionTypeRemoveManager }

func (*RemoveManager) GetType() TransactionType { return TransactionTypeRemoveManager }

func (*SegWitDataEntry) Type() TransactionType { return TransactionTypeSegWitDataEntry }

func (*SegWitDataEntry) GetType() TransactionType { return TransactionTypeSegWitDataEntry }

func (*SendTokens) Type() TransactionType { return TransactionTypeSendTokens }

func (*SendTokens) GetType() TransactionType { return TransactionTypeSendTokens }

func (*SignPending) Type() TransactionType { return TransactionTypeSignPending }

func (*SignPending) GetType() TransactionType { return TransactionTypeSignPending }

func (*SyntheticAnchor) Type() TransactionType { return TransactionTypeSyntheticAnchor }

func (*SyntheticAnchor) GetType() TransactionType { return TransactionTypeSyntheticAnchor }

func (*SyntheticBurnTokens) Type() TransactionType { return TransactionTypeSyntheticBurnTokens }

func (*SyntheticBurnTokens) GetType() TransactionType { return TransactionTypeSyntheticBurnTokens }

func (*SyntheticCreateChain) Type() TransactionType { return TransactionTypeSyntheticCreateChain }

func (*SyntheticCreateChain) GetType() TransactionType { return TransactionTypeSyntheticCreateChain }

func (*SyntheticDepositCredits) Type() TransactionType { return TransactionTypeSyntheticDepositCredits }

func (*SyntheticDepositCredits) GetType() TransactionType {
	return TransactionTypeSyntheticDepositCredits
}

func (*SyntheticDepositTokens) Type() TransactionType { return TransactionTypeSyntheticDepositTokens }

func (*SyntheticDepositTokens) GetType() TransactionType {
	return TransactionTypeSyntheticDepositTokens
}

func (*SyntheticMirror) Type() TransactionType { return TransactionTypeSyntheticMirror }

func (*SyntheticMirror) GetType() TransactionType { return TransactionTypeSyntheticMirror }

func (*SyntheticWriteData) Type() TransactionType { return TransactionTypeSyntheticWriteData }

func (*SyntheticWriteData) GetType() TransactionType { return TransactionTypeSyntheticWriteData }

func (*TokenAccount) Type() AccountType { return AccountTypeTokenAccount }

func (*TokenAccount) GetType() AccountType { return AccountTypeTokenAccount }

func (*TokenIssuer) Type() AccountType { return AccountTypeTokenIssuer }

func (*TokenIssuer) GetType() AccountType { return AccountTypeTokenIssuer }

func (*TransactionState) Type() AccountType { return AccountTypeTransaction }

func (*TransactionState) GetType() AccountType { return AccountTypeTransaction }

func (*UpdateKeyPage) Type() TransactionType { return TransactionTypeUpdateKeyPage }

func (*UpdateKeyPage) GetType() TransactionType { return TransactionTypeUpdateKeyPage }

func (*UpdateManager) Type() TransactionType { return TransactionTypeUpdateManager }

func (*UpdateManager) GetType() TransactionType { return TransactionTypeUpdateManager }

func (*WriteData) Type() TransactionType { return TransactionTypeWriteData }

func (*WriteData) GetType() TransactionType { return TransactionTypeWriteData }

func (*WriteDataResult) Type() TransactionType { return TransactionTypeWriteData }

func (*WriteDataResult) GetType() TransactionType { return TransactionTypeWriteData }

func (*WriteDataTo) Type() TransactionType { return TransactionTypeWriteDataTo }

func (*WriteDataTo) GetType() TransactionType { return TransactionTypeWriteDataTo }

func (v *ADI) Equal(u *ADI) bool {
	if !v.AccountHeader.Equal(&u.AccountHeader) {
		return false
	}

	return true
}

func (v *AccountHeader) Equal(u *AccountHeader) bool {
	if !((v.Url).Equal(u.Url)) {
		return false
	}
	if !((v.KeyBook).Equal(u.KeyBook)) {
		return false
	}
	if !((v.ManagerKeyBook).Equal(u.ManagerKeyBook)) {
		return false
	}

	return true
}

func (v *AcmeFaucet) Equal(u *AcmeFaucet) bool {
	if !((v.Url).Equal(u.Url)) {
		return false
	}

	return true
}

func (v *AcmeOracle) Equal(u *AcmeOracle) bool {
	if !(v.Price == u.Price) {
		return false
	}

	return true
}

func (v *AddCredits) Equal(u *AddCredits) bool {
	if !((v.Recipient).Equal(u.Recipient)) {
		return false
	}
	if !((&v.Amount).Cmp(&u.Amount) == 0) {
		return false
	}

	return true
}

func (v *Anchor) Equal(u *Anchor) bool {
	if !v.AccountHeader.Equal(&u.AccountHeader) {
		return false
	}

	return true
}

func (v *AnchorMetadata) Equal(u *AnchorMetadata) bool {
	if !v.ChainMetadata.Equal(&u.ChainMetadata) {
		return false
	}
	if !((v.Account).Equal(u.Account)) {
		return false
	}
	if !(v.Index == u.Index) {
		return false
	}
	if !(v.SourceIndex == u.SourceIndex) {
		return false
	}
	if !(v.SourceBlock == u.SourceBlock) {
		return false
	}
	if !(bytes.Equal(v.Entry, u.Entry)) {
		return false
	}

	return true
}

func (v *AnchoredRecord) Equal(u *AnchoredRecord) bool {
	if !(bytes.Equal(v.Record, u.Record)) {
		return false
	}
	if !(v.Anchor == u.Anchor) {
		return false
	}

	return true
}

func (v *BurnTokens) Equal(u *BurnTokens) bool {
	if !((&v.Amount).Cmp(&u.Amount) == 0) {
		return false
	}

	return true
}

func (v *ChainMetadata) Equal(u *ChainMetadata) bool {
	if !(v.Name == u.Name) {
		return false
	}
	if !(v.Type == u.Type) {
		return false
	}

	return true
}

func (v *ChainParams) Equal(u *ChainParams) bool {
	if !(bytes.Equal(v.Data, u.Data)) {
		return false
	}
	if !(v.IsUpdate == u.IsUpdate) {
		return false
	}

	return true
}

func (v *CreateDataAccount) Equal(u *CreateDataAccount) bool {
	if !((v.Url).Equal(u.Url)) {
		return false
	}
	if !((v.KeyBookUrl).Equal(u.KeyBookUrl)) {
		return false
	}
	if !((v.ManagerKeyBookUrl).Equal(u.ManagerKeyBookUrl)) {
		return false
	}
	if !(v.Scratch == u.Scratch) {
		return false
	}

	return true
}

func (v *CreateIdentity) Equal(u *CreateIdentity) bool {
	if !((v.Url).Equal(u.Url)) {
		return false
	}
	if !(bytes.Equal(v.PublicKey, u.PublicKey)) {
		return false
	}
	if !(v.KeyBookName == u.KeyBookName) {
		return false
	}
	if !(v.KeyPageName == u.KeyPageName) {
		return false
	}
	if !((v.Manager).Equal(u.Manager)) {
		return false
	}

	return true
}

func (v *CreateKeyBook) Equal(u *CreateKeyBook) bool {
	if !((v.Url).Equal(u.Url)) {
		return false
	}
	if len(v.Pages) != len(u.Pages) {
		return false
	}
	for i := range v.Pages {
		if !((v.Pages[i]).Equal(u.Pages[i])) {
			return false
		}
	}
	if !((v.Manager).Equal(u.Manager)) {
		return false
	}

	return true
}

func (v *CreateKeyPage) Equal(u *CreateKeyPage) bool {
	if !((v.Url).Equal(u.Url)) {
		return false
	}
	if len(v.Keys) != len(u.Keys) {
		return false
	}
	for i := range v.Keys {
		if !((v.Keys[i]).Equal(u.Keys[i])) {
			return false
		}
	}
	if !((v.Manager).Equal(u.Manager)) {
		return false
	}

	return true
}

func (v *CreateToken) Equal(u *CreateToken) bool {
	if !((v.Url).Equal(u.Url)) {
		return false
	}
	if !((v.KeyBookUrl).Equal(u.KeyBookUrl)) {
		return false
	}
	if !(v.Symbol == u.Symbol) {
		return false
	}
	if !(v.Precision == u.Precision) {
		return false
	}
	if !((v.Properties).Equal(u.Properties)) {
		return false
	}
	if !((&v.InitialSupply).Cmp(&u.InitialSupply) == 0) {
		return false
	}
	if !(v.HasSupplyLimit == u.HasSupplyLimit) {
		return false
	}
	if !((v.Manager).Equal(u.Manager)) {
		return false
	}

	return true
}

func (v *CreateTokenAccount) Equal(u *CreateTokenAccount) bool {
	if !((v.Url).Equal(u.Url)) {
		return false
	}
	if !((v.TokenUrl).Equal(u.TokenUrl)) {
		return false
	}
	if !((v.KeyBookUrl).Equal(u.KeyBookUrl)) {
		return false
	}
	if !(v.Scratch == u.Scratch) {
		return false
	}
	if !((v.Manager).Equal(u.Manager)) {
		return false
	}

	return true
}

func (v *DataAccount) Equal(u *DataAccount) bool {
	if !v.AccountHeader.Equal(&u.AccountHeader) {
		return false
	}
	if !(v.Scratch == u.Scratch) {
		return false
	}

	return true
}

func (v *DataEntry) Equal(u *DataEntry) bool {
	if len(v.ExtIds) != len(u.ExtIds) {
		return false
	}
	for i := range v.ExtIds {
		if !(bytes.Equal(v.ExtIds[i], u.ExtIds[i])) {
			return false
		}
	}
	if !(bytes.Equal(v.Data, u.Data)) {
		return false
	}

	return true
}

func (v *DirectoryIndexMetadata) Equal(u *DirectoryIndexMetadata) bool {
	if !(v.Count == u.Count) {
		return false
	}

	return true
}

func (v *DirectoryQueryResult) Equal(u *DirectoryQueryResult) bool {
	if len(v.Entries) != len(u.Entries) {
		return false
	}
	for i := range v.Entries {
		if !(v.Entries[i] == u.Entries[i]) {
			return false
		}
	}
	if len(v.ExpandedEntries) != len(u.ExpandedEntries) {
		return false
	}
	for i := range v.ExpandedEntries {
		if !((v.ExpandedEntries[i]).Equal(u.ExpandedEntries[i])) {
			return false
		}
	}
	if !(v.Total == u.Total) {
		return false
	}

	return true
}

func (v *ED25519Signature) Equal(u *ED25519Signature) bool {
	if !(bytes.Equal(v.PublicKey, u.PublicKey)) {
		return false
	}
	if !(bytes.Equal(v.Signature, u.Signature)) {
		return false
	}

	return true
}

func (v *EmptyResult) Equal(u *EmptyResult) bool {

	return true
}

func (v *Envelope) Equal(u *Envelope) bool {
	if len(v.Signatures) != len(u.Signatures) {
		return false
	}
	for i := range v.Signatures {
		if !(v.Signatures[i] == u.Signatures[i]) {
			return false
		}
	}
	if !(bytes.Equal(v.TxHash, u.TxHash)) {
		return false
	}
	if !((v.Transaction).Equal(u.Transaction)) {
		return false
	}

	return true
}

func (v *InternalGenesis) Equal(u *InternalGenesis) bool {

	return true
}

func (v *InternalLedger) Equal(u *InternalLedger) bool {
	if !v.AccountHeader.Equal(&u.AccountHeader) {
		return false
	}
	if !(v.Index == u.Index) {
		return false
	}
	if !(v.Timestamp == u.Timestamp) {
		return false
	}
	if !((&v.Synthetic).Equal(&u.Synthetic)) {
		return false
	}
	if !(v.PendingOracle == u.PendingOracle) {
		return false
	}
	if !(v.ActiveOracle == u.ActiveOracle) {
		return false
	}
	if len(v.Updates) != len(u.Updates) {
		return false
	}
	for i := range v.Updates {
		if !((&v.Updates[i]).Equal(&u.Updates[i])) {
			return false
		}
	}

	return true
}

func (v *InternalTransactionsSent) Equal(u *InternalTransactionsSent) bool {
	if len(v.Transactions) != len(u.Transactions) {
		return false
	}
	for i := range v.Transactions {
		if !(v.Transactions[i] == u.Transactions[i]) {
			return false
		}
	}

	return true
}

func (v *InternalTransactionsSigned) Equal(u *InternalTransactionsSigned) bool {
	if len(v.Transactions) != len(u.Transactions) {
		return false
	}
	for i := range v.Transactions {
		if !((&v.Transactions[i]).Equal(&u.Transactions[i])) {
			return false
		}
	}

	return true
}

func (v *IssueTokens) Equal(u *IssueTokens) bool {
	if !((v.Recipient).Equal(u.Recipient)) {
		return false
	}
	if !((&v.Amount).Cmp(&u.Amount) == 0) {
		return false
	}

	return true
}

func (v *KeyBook) Equal(u *KeyBook) bool {
	if !v.AccountHeader.Equal(&u.AccountHeader) {
		return false
	}
	if len(v.Pages) != len(u.Pages) {
		return false
	}
	for i := range v.Pages {
		if !((v.Pages[i]).Equal(u.Pages[i])) {
			return false
		}
	}

	return true
}

func (v *KeyPage) Equal(u *KeyPage) bool {
	if !v.AccountHeader.Equal(&u.AccountHeader) {
		return false
	}
	if !((&v.CreditBalance).Cmp(&u.CreditBalance) == 0) {
		return false
	}
	if !(v.Threshold == u.Threshold) {
		return false
	}
	if len(v.Keys) != len(u.Keys) {
		return false
	}
	for i := range v.Keys {
		if !((v.Keys[i]).Equal(u.Keys[i])) {
			return false
		}
	}

	return true
}

func (v *KeySpec) Equal(u *KeySpec) bool {
	if !(bytes.Equal(v.PublicKey, u.PublicKey)) {
		return false
	}
	if !(v.Nonce == u.Nonce) {
		return false
	}
	if !((v.Owner).Equal(u.Owner)) {
		return false
	}

	return true
}

func (v *KeySpecParams) Equal(u *KeySpecParams) bool {
	if !(bytes.Equal(v.PublicKey, u.PublicKey)) {
		return false
	}

	return true
}

func (v *LegacyED25519Signature) Equal(u *LegacyED25519Signature) bool {
	if !(v.Nonce == u.Nonce) {
		return false
	}
	if !(bytes.Equal(v.PublicKey, u.PublicKey)) {
		return false
	}
	if !(bytes.Equal(v.Signature, u.Signature)) {
		return false
	}

	return true
}

func (v *LiteDataAccount) Equal(u *LiteDataAccount) bool {
	if !v.AccountHeader.Equal(&u.AccountHeader) {
		return false
	}
	if !(bytes.Equal(v.Tail, u.Tail)) {
		return false
	}

	return true
}

func (v *LiteIdentity) Equal(u *LiteIdentity) bool {
	if !v.AccountHeader.Equal(&u.AccountHeader) {
		return false
	}

	return true
}

func (v *LiteTokenAccount) Equal(u *LiteTokenAccount) bool {
	if !v.AccountHeader.Equal(&u.AccountHeader) {
		return false
	}
	if !((v.TokenUrl).Equal(u.TokenUrl)) {
		return false
	}
	if !((&v.Balance).Cmp(&u.Balance) == 0) {
		return false
	}
	if !(v.Nonce == u.Nonce) {
		return false
	}
	if !((&v.CreditBalance).Cmp(&u.CreditBalance) == 0) {
		return false
	}

	return true
}

func (v *MetricsRequest) Equal(u *MetricsRequest) bool {
	if !(v.Metric == u.Metric) {
		return false
	}
	if !(v.Duration == u.Duration) {
		return false
	}

	return true
}

func (v *Object) Equal(u *Object) bool {
	if !(bytes.Equal(v.Entry, u.Entry)) {
		return false
	}
	if !(v.Height == u.Height) {
		return false
	}
	if len(v.Roots) != len(u.Roots) {
		return false
	}
	for i := range v.Roots {
		if !(bytes.Equal(v.Roots[i], u.Roots[i])) {
			return false
		}
	}

	return true
}

func (v *ObjectMetadata) Equal(u *ObjectMetadata) bool {
	if !(v.Type == u.Type) {
		return false
	}
	if len(v.Chains) != len(u.Chains) {
		return false
	}
	for i := range v.Chains {
		if !((&v.Chains[i]).Equal(&u.Chains[i])) {
			return false
		}
	}

	return true
}

func (v *PendingTransactionState) Equal(u *PendingTransactionState) bool {
	if !v.AccountHeader.Equal(&u.AccountHeader) {
		return false
	}
	if len(v.Signature) != len(u.Signature) {
		return false
	}
	for i := range v.Signature {
		if !(v.Signature[i] == u.Signature[i]) {
			return false
		}
	}
	if !((v.TransactionState).Equal(u.TransactionState)) {
		return false
	}
	if !(bytes.Equal(v.Status, u.Status)) {
		return false
	}

	return true
}

func (v *Receipt) Equal(u *Receipt) bool {
	if !(bytes.Equal(v.Start, u.Start)) {
		return false
	}
	if len(v.Entries) != len(u.Entries) {
		return false
	}
	for i := range v.Entries {
		if !((&v.Entries[i]).Equal(&u.Entries[i])) {
			return false
		}
	}

	return true
}

func (v *ReceiptEntry) Equal(u *ReceiptEntry) bool {
	if !(v.Right == u.Right) {
		return false
	}
	if !(bytes.Equal(v.Hash, u.Hash)) {
		return false
	}

	return true
}

func (v *RemoveManager) Equal(u *RemoveManager) bool {

	return true
}

func (v *RequestDataEntry) Equal(u *RequestDataEntry) bool {
	if !((v.Url).Equal(u.Url)) {
		return false
	}
	if !(v.EntryHash == u.EntryHash) {
		return false
	}

	return true
}

func (v *RequestDataEntrySet) Equal(u *RequestDataEntrySet) bool {
	if !((v.Url).Equal(u.Url)) {
		return false
	}
	if !(v.Start == u.Start) {
		return false
	}
	if !(v.Count == u.Count) {
		return false
	}
	if !(v.ExpandChains == u.ExpandChains) {
		return false
	}

	return true
}

func (v *ResponseDataEntry) Equal(u *ResponseDataEntry) bool {
	if !(v.EntryHash == u.EntryHash) {
		return false
	}
	if !((&v.Entry).Equal(&u.Entry)) {
		return false
	}

	return true
}

func (v *ResponseDataEntrySet) Equal(u *ResponseDataEntrySet) bool {
	if len(v.DataEntries) != len(u.DataEntries) {
		return false
	}
	for i := range v.DataEntries {
		if !((&v.DataEntries[i]).Equal(&u.DataEntries[i])) {
			return false
		}
	}
	if !(v.Total == u.Total) {
		return false
	}

	return true
}

func (v *SegWitDataEntry) Equal(u *SegWitDataEntry) bool {
	if !(v.Cause == u.Cause) {
		return false
	}
	if !((v.EntryUrl).Equal(u.EntryUrl)) {
		return false
	}
	if !(v.EntryHash == u.EntryHash) {
		return false
	}

	return true
}

func (v *SendTokens) Equal(u *SendTokens) bool {
	if !(v.Hash == u.Hash) {
		return false
	}
	if !(bytes.Equal(v.Meta, u.Meta)) {
		return false
	}
	if len(v.To) != len(u.To) {
		return false
	}
	for i := range v.To {
		if !((v.To[i]).Equal(u.To[i])) {
			return false
		}
	}

	return true
}

func (v *SignPending) Equal(u *SignPending) bool {

	return true
}

func (v *SyntheticAnchor) Equal(u *SyntheticAnchor) bool {
	if !((v.Source).Equal(u.Source)) {
		return false
	}
	if !(v.Major == u.Major) {
		return false
	}
	if !(v.RootAnchor == u.RootAnchor) {
		return false
	}
	if !(v.RootIndex == u.RootIndex) {
		return false
	}
	if !(v.Block == u.Block) {
		return false
	}
	if !(v.SourceIndex == u.SourceIndex) {
		return false
	}
	if !(v.SourceBlock == u.SourceBlock) {
		return false
	}
	if !(v.AcmeOraclePrice == u.AcmeOraclePrice) {
		return false
	}
	if !((&v.Receipt).Equal(&u.Receipt)) {
		return false
	}

	return true
}

func (v *SyntheticBurnTokens) Equal(u *SyntheticBurnTokens) bool {
	if !(v.Cause == u.Cause) {
		return false
	}
	if !((&v.Amount).Cmp(&u.Amount) == 0) {
		return false
	}

	return true
}

func (v *SyntheticCreateChain) Equal(u *SyntheticCreateChain) bool {
	if !(v.Cause == u.Cause) {
		return false
	}
	if len(v.Chains) != len(u.Chains) {
		return false
	}
	for i := range v.Chains {
		if !((&v.Chains[i]).Equal(&u.Chains[i])) {
			return false
		}
	}

	return true
}

func (v *SyntheticDepositCredits) Equal(u *SyntheticDepositCredits) bool {
	if !(v.Cause == u.Cause) {
		return false
	}
	if !(v.Amount == u.Amount) {
		return false
	}

	return true
}

func (v *SyntheticDepositTokens) Equal(u *SyntheticDepositTokens) bool {
	if !(v.Cause == u.Cause) {
		return false
	}
	if !((v.Token).Equal(u.Token)) {
		return false
	}
	if !((&v.Amount).Cmp(&u.Amount) == 0) {
		return false
	}

	return true
}

func (v *SyntheticLedger) Equal(u *SyntheticLedger) bool {
	if !(v.Nonce == u.Nonce) {
		return false
	}
	if len(v.Produced) != len(u.Produced) {
		return false
	}
	for i := range v.Produced {
		if !(v.Produced[i] == u.Produced[i]) {
			return false
		}
	}
	if len(v.Unsigned) != len(u.Unsigned) {
		return false
	}
	for i := range v.Unsigned {
		if !(v.Unsigned[i] == u.Unsigned[i]) {
			return false
		}
	}
	if len(v.Unsent) != len(u.Unsent) {
		return false
	}
	for i := range v.Unsent {
		if !(v.Unsent[i] == u.Unsent[i]) {
			return false
		}
	}

	return true
}

func (v *SyntheticMirror) Equal(u *SyntheticMirror) bool {
	if len(v.Objects) != len(u.Objects) {
		return false
	}
	for i := range v.Objects {
		if !((&v.Objects[i]).Equal(&u.Objects[i])) {
			return false
		}
	}

	return true
}

func (v *SyntheticWriteData) Equal(u *SyntheticWriteData) bool {
	if !(v.Cause == u.Cause) {
		return false
	}
	if !((&v.Entry).Equal(&u.Entry)) {
		return false
	}

	return true
}

func (v *TokenAccount) Equal(u *TokenAccount) bool {
	if !v.AccountHeader.Equal(&u.AccountHeader) {
		return false
	}
	if !((v.TokenUrl).Equal(u.TokenUrl)) {
		return false
	}
	if !((&v.Balance).Cmp(&u.Balance) == 0) {
		return false
	}
	if !(v.Scratch == u.Scratch) {
		return false
	}

	return true
}

func (v *TokenIssuer) Equal(u *TokenIssuer) bool {
	if !v.AccountHeader.Equal(&u.AccountHeader) {
		return false
	}
	if !(v.Symbol == u.Symbol) {
		return false
	}
	if !(v.Precision == u.Precision) {
		return false
	}
	if !((v.Properties).Equal(u.Properties)) {
		return false
	}
	if !((&v.Supply).Cmp(&u.Supply) == 0) {
		return false
	}
	if !(v.HasSupplyLimit == u.HasSupplyLimit) {
		return false
	}

	return true
}

func (v *TokenRecipient) Equal(u *TokenRecipient) bool {
	if !((v.Url).Equal(u.Url)) {
		return false
	}
	if !((&v.Amount).Cmp(&u.Amount) == 0) {
		return false
	}

	return true
}

func (v *Transaction) Equal(u *Transaction) bool {
	if !v.TransactionHeader.Equal(&u.TransactionHeader) {
		return false
	}
	if !(v.Body == u.Body) {
		return false
	}

	return true
}

func (v *TransactionHeader) Equal(u *TransactionHeader) bool {
	if !((v.Origin).Equal(u.Origin)) {
		return false
	}
	if !(v.KeyPageHeight == u.KeyPageHeight) {
		return false
	}
	if !(v.KeyPageIndex == u.KeyPageIndex) {
		return false
	}
	if !(v.Nonce == u.Nonce) {
		return false
	}

	return true
}

func (v *TransactionSignature) Equal(u *TransactionSignature) bool {
	if !(v.Transaction == u.Transaction) {
		return false
	}
	if !(v.Signature == u.Signature) {
		return false
	}

	return true
}

func (v *TransactionState) Equal(u *TransactionState) bool {
	if !v.AccountHeader.Equal(&u.AccountHeader) {
		return false
	}
	if !v.TxState.Equal(&u.TxState) {
		return false
	}

	return true
}

func (v *TransactionStatus) Equal(u *TransactionStatus) bool {
	if !(v.Remote == u.Remote) {
		return false
	}
	if !(v.Delivered == u.Delivered) {
		return false
	}
	if !(v.Pending == u.Pending) {
		return false
	}
	if !(v.Code == u.Code) {
		return false
	}
	if !(v.Message == u.Message) {
		return false
	}
	if !(v.Result == u.Result) {
		return false
	}

	return true
}

func (v *TxState) Equal(u *TxState) bool {
	if !((v.SigInfo).Equal(u.SigInfo)) {
		return false
	}
	if !(v.Transaction == u.Transaction) {
		return false
	}

	return true
}

func (v *UpdateKeyPage) Equal(u *UpdateKeyPage) bool {
	if !(v.Operation == u.Operation) {
		return false
	}
	if !(bytes.Equal(v.Key, u.Key)) {
		return false
	}
	if !(bytes.Equal(v.NewKey, u.NewKey)) {
		return false
	}
	if !((v.Owner).Equal(u.Owner)) {
		return false
	}
	if !(v.Threshold == u.Threshold) {
		return false
	}

	return true
}

func (v *UpdateManager) Equal(u *UpdateManager) bool {
	if !((v.ManagerKeyBook).Equal(u.ManagerKeyBook)) {
		return false
	}

	return true
}

func (v *WriteData) Equal(u *WriteData) bool {
	if !((&v.Entry).Equal(&u.Entry)) {
		return false
	}

	return true
}

func (v *WriteDataResult) Equal(u *WriteDataResult) bool {
	if !(v.EntryHash == u.EntryHash) {
		return false
	}
	if !((v.AccountUrl).Equal(u.AccountUrl)) {
		return false
	}
	if !(bytes.Equal(v.AccountID, u.AccountID)) {
		return false
	}

	return true
}

func (v *WriteDataTo) Equal(u *WriteDataTo) bool {
	if !((v.Recipient).Equal(u.Recipient)) {
		return false
	}
	if !((&v.Entry).Equal(&u.Entry)) {
		return false
	}

	return true
}

var fieldNames_ADI = []string{
	1: "Type",
	2: "AccountHeader",
}

func (v *ADI) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	writer.WriteUint(1, AccountTypeIdentity.ID())
	writer.WriteValue(2, &v.AccountHeader)

	_, _, err := writer.Reset(fieldNames_ADI)
	return buffer.Bytes(), err
}

func (v *ADI) IsValid() error {
	var errs []string

	if err := v.AccountHeader.IsValid(); err != nil {
		errs = append(errs, err.Error())
	}

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

var fieldNames_AccountHeader = []string{
	1: "Url",
	2: "KeyBook",
	3: "ManagerKeyBook",
}

func (v *AccountHeader) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	if !(v.Url == nil) {
		writer.WriteUrl(1, v.Url)
	}
	if !(v.KeyBook == nil) {
		writer.WriteUrl(2, v.KeyBook)
	}
	if !(v.ManagerKeyBook == nil) {
		writer.WriteUrl(3, v.ManagerKeyBook)
	}

	_, _, err := writer.Reset(fieldNames_AccountHeader)
	return buffer.Bytes(), err
}

func (v *AccountHeader) IsValid() error {
	var errs []string

	if len(v.fieldsSet) > 1 && !v.fieldsSet[1] {
		errs = append(errs, "field Url is missing")
	} else if v.Url == nil {
		errs = append(errs, "field Url is not set")
	}
	if len(v.fieldsSet) > 2 && !v.fieldsSet[2] {
		errs = append(errs, "field KeyBook is missing")
	} else if v.KeyBook == nil {
		errs = append(errs, "field KeyBook is not set")
	}
	if len(v.fieldsSet) > 3 && !v.fieldsSet[3] {
		errs = append(errs, "field ManagerKeyBook is missing")
	} else if v.ManagerKeyBook == nil {
		errs = append(errs, "field ManagerKeyBook is not set")
	}

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

var fieldNames_AcmeFaucet = []string{
	1: "Type",
	2: "Url",
}

func (v *AcmeFaucet) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	writer.WriteUint(1, TransactionTypeAcmeFaucet.ID())
	if !(v.Url == nil) {
		writer.WriteUrl(2, v.Url)
	}

	_, _, err := writer.Reset(fieldNames_AcmeFaucet)
	return buffer.Bytes(), err
}

func (v *AcmeFaucet) IsValid() error {
	var errs []string

	if len(v.fieldsSet) > 2 && !v.fieldsSet[2] {
		errs = append(errs, "field Url is missing")
	} else if v.Url == nil {
		errs = append(errs, "field Url is not set")
	}

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

var fieldNames_AcmeOracle = []string{
	1: "Price",
}

func (v *AcmeOracle) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	if !(v.Price == 0) {
		writer.WriteUint(1, v.Price)
	}

	_, _, err := writer.Reset(fieldNames_AcmeOracle)
	return buffer.Bytes(), err
}

func (v *AcmeOracle) IsValid() error {
	var errs []string

	if len(v.fieldsSet) > 1 && !v.fieldsSet[1] {
		errs = append(errs, "field Price is missing")
	} else if v.Price == 0 {
		errs = append(errs, "field Price is not set")
	}

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

var fieldNames_AddCredits = []string{
	1: "Type",
	2: "Recipient",
	3: "Amount",
}

func (v *AddCredits) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	writer.WriteUint(1, TransactionTypeAddCredits.ID())
	if !(v.Recipient == nil) {
		writer.WriteUrl(2, v.Recipient)
	}
	if !((v.Amount).Cmp(new(big.Int)) == 0) {
		writer.WriteBigInt(3, &v.Amount)
	}

	_, _, err := writer.Reset(fieldNames_AddCredits)
	return buffer.Bytes(), err
}

func (v *AddCredits) IsValid() error {
	var errs []string

	if len(v.fieldsSet) > 2 && !v.fieldsSet[2] {
		errs = append(errs, "field Recipient is missing")
	} else if v.Recipient == nil {
		errs = append(errs, "field Recipient is not set")
	}
	if len(v.fieldsSet) > 3 && !v.fieldsSet[3] {
		errs = append(errs, "field Amount is missing")
	} else if (v.Amount).Cmp(new(big.Int)) == 0 {
		errs = append(errs, "field Amount is not set")
	}

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

var fieldNames_Anchor = []string{
	1: "Type",
	2: "AccountHeader",
}

func (v *Anchor) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	writer.WriteUint(1, AccountTypeAnchor.ID())
	writer.WriteValue(2, &v.AccountHeader)

	_, _, err := writer.Reset(fieldNames_Anchor)
	return buffer.Bytes(), err
}

func (v *Anchor) IsValid() error {
	var errs []string

	if err := v.AccountHeader.IsValid(); err != nil {
		errs = append(errs, err.Error())
	}

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

var fieldNames_AnchorMetadata = []string{
	1: "ChainMetadata",
	2: "Account",
	3: "Index",
	4: "SourceIndex",
	5: "SourceBlock",
	6: "Entry",
}

func (v *AnchorMetadata) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	writer.WriteValue(1, &v.ChainMetadata)
	if !(v.Account == nil) {
		writer.WriteUrl(2, v.Account)
	}
	if !(v.Index == 0) {
		writer.WriteUint(3, v.Index)
	}
	if !(v.SourceIndex == 0) {
		writer.WriteUint(4, v.SourceIndex)
	}
	if !(v.SourceBlock == 0) {
		writer.WriteUint(5, v.SourceBlock)
	}
	if !(len(v.Entry) == 0) {
		writer.WriteBytes(6, v.Entry)
	}

	_, _, err := writer.Reset(fieldNames_AnchorMetadata)
	return buffer.Bytes(), err
}

func (v *AnchorMetadata) IsValid() error {
	var errs []string

	if err := v.ChainMetadata.IsValid(); err != nil {
		errs = append(errs, err.Error())
	}
	if len(v.fieldsSet) > 2 && !v.fieldsSet[2] {
		errs = append(errs, "field Account is missing")
	} else if v.Account == nil {
		errs = append(errs, "field Account is not set")
	}
	if len(v.fieldsSet) > 3 && !v.fieldsSet[3] {
		errs = append(errs, "field Index is missing")
	} else if v.Index == 0 {
		errs = append(errs, "field Index is not set")
	}
	if len(v.fieldsSet) > 4 && !v.fieldsSet[4] {
		errs = append(errs, "field SourceIndex is missing")
	} else if v.SourceIndex == 0 {
		errs = append(errs, "field SourceIndex is not set")
	}
	if len(v.fieldsSet) > 5 && !v.fieldsSet[5] {
		errs = append(errs, "field SourceBlock is missing")
	} else if v.SourceBlock == 0 {
		errs = append(errs, "field SourceBlock is not set")
	}
	if len(v.fieldsSet) > 6 && !v.fieldsSet[6] {
		errs = append(errs, "field Entry is missing")
	} else if len(v.Entry) == 0 {
		errs = append(errs, "field Entry is not set")
	}

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

var fieldNames_AnchoredRecord = []string{
	1: "Record",
	2: "Anchor",
}

func (v *AnchoredRecord) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	if !(len(v.Record) == 0) {
		writer.WriteBytes(1, v.Record)
	}
	if !(v.Anchor == ([32]byte{})) {
		writer.WriteHash(2, &v.Anchor)
	}

	_, _, err := writer.Reset(fieldNames_AnchoredRecord)
	return buffer.Bytes(), err
}

func (v *AnchoredRecord) IsValid() error {
	var errs []string

	if len(v.fieldsSet) > 1 && !v.fieldsSet[1] {
		errs = append(errs, "field Record is missing")
	} else if len(v.Record) == 0 {
		errs = append(errs, "field Record is not set")
	}
	if len(v.fieldsSet) > 2 && !v.fieldsSet[2] {
		errs = append(errs, "field Anchor is missing")
	} else if v.Anchor == ([32]byte{}) {
		errs = append(errs, "field Anchor is not set")
	}

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

var fieldNames_BurnTokens = []string{
	1: "Type",
	2: "Amount",
}

func (v *BurnTokens) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	writer.WriteUint(1, TransactionTypeBurnTokens.ID())
	if !((v.Amount).Cmp(new(big.Int)) == 0) {
		writer.WriteBigInt(2, &v.Amount)
	}

	_, _, err := writer.Reset(fieldNames_BurnTokens)
	return buffer.Bytes(), err
}

func (v *BurnTokens) IsValid() error {
	var errs []string

	if len(v.fieldsSet) > 2 && !v.fieldsSet[2] {
		errs = append(errs, "field Amount is missing")
	} else if (v.Amount).Cmp(new(big.Int)) == 0 {
		errs = append(errs, "field Amount is not set")
	}

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

var fieldNames_ChainMetadata = []string{
	1: "Name",
	2: "Type",
}

func (v *ChainMetadata) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	if !(len(v.Name) == 0) {
		writer.WriteString(1, v.Name)
	}
	if !(v.Type == 0) {
		writer.WriteEnum(2, v.Type)
	}

	_, _, err := writer.Reset(fieldNames_ChainMetadata)
	return buffer.Bytes(), err
}

func (v *ChainMetadata) IsValid() error {
	var errs []string

	if len(v.fieldsSet) > 1 && !v.fieldsSet[1] {
		errs = append(errs, "field Name is missing")
	} else if len(v.Name) == 0 {
		errs = append(errs, "field Name is not set")
	}
	if len(v.fieldsSet) > 2 && !v.fieldsSet[2] {
		errs = append(errs, "field Type is missing")
	} else if v.Type == 0 {
		errs = append(errs, "field Type is not set")
	}

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

var fieldNames_ChainParams = []string{
	1: "Data",
	2: "IsUpdate",
}

func (v *ChainParams) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	if !(len(v.Data) == 0) {
		writer.WriteBytes(1, v.Data)
	}
	if !(!v.IsUpdate) {
		writer.WriteBool(2, v.IsUpdate)
	}

	_, _, err := writer.Reset(fieldNames_ChainParams)
	return buffer.Bytes(), err
}

func (v *ChainParams) IsValid() error {
	var errs []string

	if len(v.fieldsSet) > 1 && !v.fieldsSet[1] {
		errs = append(errs, "field Data is missing")
	} else if len(v.Data) == 0 {
		errs = append(errs, "field Data is not set")
	}
	if len(v.fieldsSet) > 2 && !v.fieldsSet[2] {
		errs = append(errs, "field IsUpdate is missing")
	} else if !v.IsUpdate {
		errs = append(errs, "field IsUpdate is not set")
	}

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

var fieldNames_CreateDataAccount = []string{
	1: "Type",
	2: "Url",
	3: "KeyBookUrl",
	4: "ManagerKeyBookUrl",
	5: "Scratch",
}

func (v *CreateDataAccount) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	writer.WriteUint(1, TransactionTypeCreateDataAccount.ID())
	if !(v.Url == nil) {
		writer.WriteUrl(2, v.Url)
	}
	if !(v.KeyBookUrl == nil) {
		writer.WriteUrl(3, v.KeyBookUrl)
	}
	if !(v.ManagerKeyBookUrl == nil) {
		writer.WriteUrl(4, v.ManagerKeyBookUrl)
	}
	if !(!v.Scratch) {
		writer.WriteBool(5, v.Scratch)
	}

	_, _, err := writer.Reset(fieldNames_CreateDataAccount)
	return buffer.Bytes(), err
}

func (v *CreateDataAccount) IsValid() error {
	var errs []string

	if len(v.fieldsSet) > 2 && !v.fieldsSet[2] {
		errs = append(errs, "field Url is missing")
	} else if v.Url == nil {
		errs = append(errs, "field Url is not set")
	}

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

var fieldNames_CreateIdentity = []string{
	1: "Type",
	2: "Url",
	3: "PublicKey",
	4: "KeyBookName",
	5: "KeyPageName",
	6: "Manager",
}

func (v *CreateIdentity) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	writer.WriteUint(1, TransactionTypeCreateIdentity.ID())
	if !(v.Url == nil) {
		writer.WriteUrl(2, v.Url)
	}
	if !(len(v.PublicKey) == 0) {
		writer.WriteBytes(3, v.PublicKey)
	}
	if !(len(v.KeyBookName) == 0) {
		writer.WriteString(4, v.KeyBookName)
	}
	if !(len(v.KeyPageName) == 0) {
		writer.WriteString(5, v.KeyPageName)
	}
	if !(v.Manager == nil) {
		writer.WriteUrl(6, v.Manager)
	}

	_, _, err := writer.Reset(fieldNames_CreateIdentity)
	return buffer.Bytes(), err
}

func (v *CreateIdentity) IsValid() error {
	var errs []string

	if len(v.fieldsSet) > 2 && !v.fieldsSet[2] {
		errs = append(errs, "field Url is missing")
	} else if v.Url == nil {
		errs = append(errs, "field Url is not set")
	}
	if len(v.fieldsSet) > 3 && !v.fieldsSet[3] {
		errs = append(errs, "field PublicKey is missing")
	} else if len(v.PublicKey) == 0 {
		errs = append(errs, "field PublicKey is not set")
	}

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

var fieldNames_CreateKeyBook = []string{
	1: "Type",
	2: "Url",
	3: "Pages",
	4: "Manager",
}

func (v *CreateKeyBook) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	writer.WriteUint(1, TransactionTypeCreateKeyBook.ID())
	if !(v.Url == nil) {
		writer.WriteUrl(2, v.Url)
	}
	if !(len(v.Pages) == 0) {
		for _, v := range v.Pages {
			writer.WriteUrl(3, v)
		}
	}
	if !(v.Manager == nil) {
		writer.WriteUrl(4, v.Manager)
	}

	_, _, err := writer.Reset(fieldNames_CreateKeyBook)
	return buffer.Bytes(), err
}

func (v *CreateKeyBook) IsValid() error {
	var errs []string

	if len(v.fieldsSet) > 2 && !v.fieldsSet[2] {
		errs = append(errs, "field Url is missing")
	} else if v.Url == nil {
		errs = append(errs, "field Url is not set")
	}
	if len(v.fieldsSet) > 3 && !v.fieldsSet[3] {
		errs = append(errs, "field Pages is missing")
	} else if len(v.Pages) == 0 {
		errs = append(errs, "field Pages is not set")
	}

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

var fieldNames_CreateKeyPage = []string{
	1: "Type",
	2: "Url",
	3: "Keys",
	4: "Manager",
}

func (v *CreateKeyPage) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	writer.WriteUint(1, TransactionTypeCreateKeyPage.ID())
	if !(v.Url == nil) {
		writer.WriteUrl(2, v.Url)
	}
	if !(len(v.Keys) == 0) {
		for _, v := range v.Keys {
			writer.WriteValue(3, v)
		}
	}
	if !(v.Manager == nil) {
		writer.WriteUrl(4, v.Manager)
	}

	_, _, err := writer.Reset(fieldNames_CreateKeyPage)
	return buffer.Bytes(), err
}

func (v *CreateKeyPage) IsValid() error {
	var errs []string

	if len(v.fieldsSet) > 2 && !v.fieldsSet[2] {
		errs = append(errs, "field Url is missing")
	} else if v.Url == nil {
		errs = append(errs, "field Url is not set")
	}
	if len(v.fieldsSet) > 3 && !v.fieldsSet[3] {
		errs = append(errs, "field Keys is missing")
	} else if len(v.Keys) == 0 {
		errs = append(errs, "field Keys is not set")
	}

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

var fieldNames_CreateToken = []string{
	1: "Type",
	2: "Url",
	3: "KeyBookUrl",
	4: "Symbol",
	5: "Precision",
	6: "Properties",
	7: "InitialSupply",
	8: "HasSupplyLimit",
	9: "Manager",
}

func (v *CreateToken) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	writer.WriteUint(1, TransactionTypeCreateToken.ID())
	if !(v.Url == nil) {
		writer.WriteUrl(2, v.Url)
	}
	if !(v.KeyBookUrl == nil) {
		writer.WriteUrl(3, v.KeyBookUrl)
	}
	if !(len(v.Symbol) == 0) {
		writer.WriteString(4, v.Symbol)
	}
	if !(v.Precision == 0) {
		writer.WriteUint(5, v.Precision)
	}
	if !(v.Properties == nil) {
		writer.WriteUrl(6, v.Properties)
	}
	if !((v.InitialSupply).Cmp(new(big.Int)) == 0) {
		writer.WriteBigInt(7, &v.InitialSupply)
	}
	if !(!v.HasSupplyLimit) {
		writer.WriteBool(8, v.HasSupplyLimit)
	}
	if !(v.Manager == nil) {
		writer.WriteUrl(9, v.Manager)
	}

	_, _, err := writer.Reset(fieldNames_CreateToken)
	return buffer.Bytes(), err
}

func (v *CreateToken) IsValid() error {
	var errs []string

	if len(v.fieldsSet) > 2 && !v.fieldsSet[2] {
		errs = append(errs, "field Url is missing")
	} else if v.Url == nil {
		errs = append(errs, "field Url is not set")
	}
	if len(v.fieldsSet) > 4 && !v.fieldsSet[4] {
		errs = append(errs, "field Symbol is missing")
	} else if len(v.Symbol) == 0 {
		errs = append(errs, "field Symbol is not set")
	}
	if len(v.fieldsSet) > 5 && !v.fieldsSet[5] {
		errs = append(errs, "field Precision is missing")
	} else if v.Precision == 0 {
		errs = append(errs, "field Precision is not set")
	}

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

var fieldNames_CreateTokenAccount = []string{
	1: "Type",
	2: "Url",
	3: "TokenUrl",
	4: "KeyBookUrl",
	5: "Scratch",
	6: "Manager",
}

func (v *CreateTokenAccount) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	writer.WriteUint(1, TransactionTypeCreateTokenAccount.ID())
	if !(v.Url == nil) {
		writer.WriteUrl(2, v.Url)
	}
	if !(v.TokenUrl == nil) {
		writer.WriteUrl(3, v.TokenUrl)
	}
	if !(v.KeyBookUrl == nil) {
		writer.WriteUrl(4, v.KeyBookUrl)
	}
	if !(!v.Scratch) {
		writer.WriteBool(5, v.Scratch)
	}
	if !(v.Manager == nil) {
		writer.WriteUrl(6, v.Manager)
	}

	_, _, err := writer.Reset(fieldNames_CreateTokenAccount)
	return buffer.Bytes(), err
}

func (v *CreateTokenAccount) IsValid() error {
	var errs []string

	if len(v.fieldsSet) > 2 && !v.fieldsSet[2] {
		errs = append(errs, "field Url is missing")
	} else if v.Url == nil {
		errs = append(errs, "field Url is not set")
	}
	if len(v.fieldsSet) > 3 && !v.fieldsSet[3] {
		errs = append(errs, "field TokenUrl is missing")
	} else if v.TokenUrl == nil {
		errs = append(errs, "field TokenUrl is not set")
	}

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

var fieldNames_DataAccount = []string{
	1: "Type",
	2: "AccountHeader",
	3: "Scratch",
}

func (v *DataAccount) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	writer.WriteUint(1, AccountTypeDataAccount.ID())
	writer.WriteValue(2, &v.AccountHeader)
	if !(!v.Scratch) {
		writer.WriteBool(3, v.Scratch)
	}

	_, _, err := writer.Reset(fieldNames_DataAccount)
	return buffer.Bytes(), err
}

func (v *DataAccount) IsValid() error {
	var errs []string

	if err := v.AccountHeader.IsValid(); err != nil {
		errs = append(errs, err.Error())
	}

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

var fieldNames_DataEntry = []string{
	1: "ExtIds",
	2: "Data",
}

func (v *DataEntry) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	if !(len(v.ExtIds) == 0) {
		for _, v := range v.ExtIds {
			writer.WriteBytes(1, v)
		}
	}
	if !(len(v.Data) == 0) {
		writer.WriteBytes(2, v.Data)
	}

	_, _, err := writer.Reset(fieldNames_DataEntry)
	return buffer.Bytes(), err
}

func (v *DataEntry) IsValid() error {
	var errs []string

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

var fieldNames_DirectoryIndexMetadata = []string{
	1: "Count",
}

func (v *DirectoryIndexMetadata) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	if !(v.Count == 0) {
		writer.WriteUint(1, v.Count)
	}

	_, _, err := writer.Reset(fieldNames_DirectoryIndexMetadata)
	return buffer.Bytes(), err
}

func (v *DirectoryIndexMetadata) IsValid() error {
	var errs []string

	if len(v.fieldsSet) > 1 && !v.fieldsSet[1] {
		errs = append(errs, "field Count is missing")
	} else if v.Count == 0 {
		errs = append(errs, "field Count is not set")
	}

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

var fieldNames_DirectoryQueryResult = []string{
	1: "Entries",
	2: "ExpandedEntries",
	3: "Total",
}

func (v *DirectoryQueryResult) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	if !(len(v.Entries) == 0) {
		for _, v := range v.Entries {
			writer.WriteString(1, v)
		}
	}
	if !(len(v.ExpandedEntries) == 0) {
		for _, v := range v.ExpandedEntries {
			writer.WriteValue(2, v)
		}
	}
	writer.WriteUint(3, v.Total)

	_, _, err := writer.Reset(fieldNames_DirectoryQueryResult)
	return buffer.Bytes(), err
}

func (v *DirectoryQueryResult) IsValid() error {
	var errs []string

	if len(v.fieldsSet) > 3 && !v.fieldsSet[3] {
		errs = append(errs, "field Total is missing")
	} else if v.Total == 0 {
		errs = append(errs, "field Total is not set")
	}

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

var fieldNames_ED25519Signature = []string{
	1: "Type",
	2: "PublicKey",
	3: "Signature",
}

func (v *ED25519Signature) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	writer.WriteUint(1, SignatureTypeED25519.ID())
	if !(len(v.PublicKey) == 0) {
		writer.WriteBytes(2, v.PublicKey)
	}
	if !(len(v.Signature) == 0) {
		writer.WriteBytes(3, v.Signature)
	}

	_, _, err := writer.Reset(fieldNames_ED25519Signature)
	return buffer.Bytes(), err
}

func (v *ED25519Signature) IsValid() error {
	var errs []string

	if len(v.fieldsSet) > 2 && !v.fieldsSet[2] {
		errs = append(errs, "field PublicKey is missing")
	} else if len(v.PublicKey) == 0 {
		errs = append(errs, "field PublicKey is not set")
	}
	if len(v.fieldsSet) > 3 && !v.fieldsSet[3] {
		errs = append(errs, "field Signature is missing")
	} else if len(v.Signature) == 0 {
		errs = append(errs, "field Signature is not set")
	}

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

var fieldNames_EmptyResult = []string{
	1: "Type",
}

func (v *EmptyResult) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	writer.WriteUint(1, TransactionTypeUnknown.ID())

	_, _, err := writer.Reset(fieldNames_EmptyResult)
	return buffer.Bytes(), err
}

func (v *EmptyResult) IsValid() error {
	var errs []string

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

var fieldNames_Envelope = []string{
	1: "Signatures",
	2: "TxHash",
	3: "Transaction",
}

func (v *Envelope) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	if !(len(v.Signatures) == 0) {
		for _, v := range v.Signatures {
			writer.WriteValue(1, v)
		}
	}
	if !(len(v.TxHash) == 0) {
		writer.WriteBytes(2, v.TxHash)
	}
	if !(v.Transaction == nil) {
		writer.WriteValue(3, v.Transaction)
	}

	_, _, err := writer.Reset(fieldNames_Envelope)
	return buffer.Bytes(), err
}

func (v *Envelope) IsValid() error {
	var errs []string

	if len(v.fieldsSet) > 1 && !v.fieldsSet[1] {
		errs = append(errs, "field Signatures is missing")
	} else if len(v.Signatures) == 0 {
		errs = append(errs, "field Signatures is not set")
	}

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

var fieldNames_InternalGenesis = []string{
	1: "Type",
}

func (v *InternalGenesis) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	writer.WriteUint(1, TransactionTypeInternalGenesis.ID())

	_, _, err := writer.Reset(fieldNames_InternalGenesis)
	return buffer.Bytes(), err
}

func (v *InternalGenesis) IsValid() error {
	var errs []string

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

var fieldNames_InternalLedger = []string{
	1: "Type",
	2: "AccountHeader",
	3: "Index",
	4: "Timestamp",
	5: "Synthetic",
	6: "PendingOracle",
	7: "ActiveOracle",
	8: "Updates",
}

func (v *InternalLedger) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	writer.WriteUint(1, AccountTypeInternalLedger.ID())
	writer.WriteValue(2, &v.AccountHeader)
	if !(v.Index == 0) {
		writer.WriteInt(3, v.Index)
	}
	if !(v.Timestamp == (time.Time{})) {
		writer.WriteTime(4, v.Timestamp)
	}
	if !((v.Synthetic).Equal(new(SyntheticLedger))) {
		writer.WriteValue(5, &v.Synthetic)
	}
	if !(v.PendingOracle == 0) {
		writer.WriteUint(6, v.PendingOracle)
	}
	if !(v.ActiveOracle == 0) {
		writer.WriteUint(7, v.ActiveOracle)
	}
	if !(len(v.Updates) == 0) {
		for _, v := range v.Updates {
			writer.WriteValue(8, &v)
		}
	}

	_, _, err := writer.Reset(fieldNames_InternalLedger)
	return buffer.Bytes(), err
}

func (v *InternalLedger) IsValid() error {
	var errs []string

	if err := v.AccountHeader.IsValid(); err != nil {
		errs = append(errs, err.Error())
	}
	if len(v.fieldsSet) > 3 && !v.fieldsSet[3] {
		errs = append(errs, "field Index is missing")
	} else if v.Index == 0 {
		errs = append(errs, "field Index is not set")
	}
	if len(v.fieldsSet) > 4 && !v.fieldsSet[4] {
		errs = append(errs, "field Timestamp is missing")
	} else if v.Timestamp == (time.Time{}) {
		errs = append(errs, "field Timestamp is not set")
	}
	if len(v.fieldsSet) > 5 && !v.fieldsSet[5] {
		errs = append(errs, "field Synthetic is missing")
	} else if (v.Synthetic).Equal(new(SyntheticLedger)) {
		errs = append(errs, "field Synthetic is not set")
	}
	if len(v.fieldsSet) > 6 && !v.fieldsSet[6] {
		errs = append(errs, "field PendingOracle is missing")
	} else if v.PendingOracle == 0 {
		errs = append(errs, "field PendingOracle is not set")
	}
	if len(v.fieldsSet) > 7 && !v.fieldsSet[7] {
		errs = append(errs, "field ActiveOracle is missing")
	} else if v.ActiveOracle == 0 {
		errs = append(errs, "field ActiveOracle is not set")
	}
	if len(v.fieldsSet) > 8 && !v.fieldsSet[8] {
		errs = append(errs, "field Updates is missing")
	} else if len(v.Updates) == 0 {
		errs = append(errs, "field Updates is not set")
	}

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

var fieldNames_InternalSendTransactions = []string{
	1: "Type",
	2: "Transactions",
}

func (v *InternalSendTransactions) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	writer.WriteUint(1, TransactionTypeInternalSendTransactions.ID())
	if !(len(v.Transactions) == 0) {
		for _, v := range v.Transactions {
			writer.WriteValue(2, &v)
		}
	}

	_, _, err := writer.Reset(fieldNames_InternalSendTransactions)
	return buffer.Bytes(), err
}

func (v *InternalSendTransactions) IsValid() error {
	var errs []string

	if len(v.fieldsSet) > 2 && !v.fieldsSet[2] {
		errs = append(errs, "field Transactions is missing")
	} else if len(v.Transactions) == 0 {
		errs = append(errs, "field Transactions is not set")
	}

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

var fieldNames_InternalTransactionsSent = []string{
	1: "Type",
	2: "Transactions",
}

func (v *InternalTransactionsSent) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	writer.WriteUint(1, TransactionTypeInternalTransactionsSent.ID())
	if !(len(v.Transactions) == 0) {
		for _, v := range v.Transactions {
			writer.WriteHash(2, &v)
		}
	}

	_, _, err := writer.Reset(fieldNames_InternalTransactionsSent)
	return buffer.Bytes(), err
}

func (v *InternalTransactionsSent) IsValid() error {
	var errs []string

	if len(v.fieldsSet) > 2 && !v.fieldsSet[2] {
		errs = append(errs, "field Transactions is missing")
	} else if len(v.Transactions) == 0 {
		errs = append(errs, "field Transactions is not set")
	}

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

var fieldNames_InternalTransactionsSigned = []string{
	1: "Type",
	2: "Transactions",
}

func (v *InternalTransactionsSigned) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	writer.WriteUint(1, TransactionTypeInternalTransactionsSigned.ID())
	if !(len(v.Transactions) == 0) {
		for _, v := range v.Transactions {
			writer.WriteValue(2, &v)
		}
	}

	_, _, err := writer.Reset(fieldNames_InternalTransactionsSigned)
	return buffer.Bytes(), err
}

func (v *InternalTransactionsSigned) IsValid() error {
	var errs []string

	if len(v.fieldsSet) > 2 && !v.fieldsSet[2] {
		errs = append(errs, "field Transactions is missing")
	} else if len(v.Transactions) == 0 {
		errs = append(errs, "field Transactions is not set")
	}

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

var fieldNames_IssueTokens = []string{
	1: "Type",
	2: "Recipient",
	3: "Amount",
}

func (v *IssueTokens) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	writer.WriteUint(1, TransactionTypeIssueTokens.ID())
	if !(v.Recipient == nil) {
		writer.WriteUrl(2, v.Recipient)
	}
	if !((v.Amount).Cmp(new(big.Int)) == 0) {
		writer.WriteBigInt(3, &v.Amount)
	}

	_, _, err := writer.Reset(fieldNames_IssueTokens)
	return buffer.Bytes(), err
}

func (v *IssueTokens) IsValid() error {
	var errs []string

	if len(v.fieldsSet) > 2 && !v.fieldsSet[2] {
		errs = append(errs, "field Recipient is missing")
	} else if v.Recipient == nil {
		errs = append(errs, "field Recipient is not set")
	}
	if len(v.fieldsSet) > 3 && !v.fieldsSet[3] {
		errs = append(errs, "field Amount is missing")
	} else if (v.Amount).Cmp(new(big.Int)) == 0 {
		errs = append(errs, "field Amount is not set")
	}

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

var fieldNames_KeyBook = []string{
	1: "Type",
	2: "AccountHeader",
	3: "Pages",
}

func (v *KeyBook) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	writer.WriteUint(1, AccountTypeKeyBook.ID())
	writer.WriteValue(2, &v.AccountHeader)
	if !(len(v.Pages) == 0) {
		for _, v := range v.Pages {
			writer.WriteUrl(3, v)
		}
	}

	_, _, err := writer.Reset(fieldNames_KeyBook)
	return buffer.Bytes(), err
}

func (v *KeyBook) IsValid() error {
	var errs []string

	if err := v.AccountHeader.IsValid(); err != nil {
		errs = append(errs, err.Error())
	}
	if len(v.fieldsSet) > 3 && !v.fieldsSet[3] {
		errs = append(errs, "field Pages is missing")
	} else if len(v.Pages) == 0 {
		errs = append(errs, "field Pages is not set")
	}

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

var fieldNames_KeyPage = []string{
	1: "Type",
	2: "AccountHeader",
	3: "CreditBalance",
	4: "Threshold",
	5: "Keys",
}

func (v *KeyPage) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	writer.WriteUint(1, AccountTypeKeyPage.ID())
	writer.WriteValue(2, &v.AccountHeader)
	if !((v.CreditBalance).Cmp(new(big.Int)) == 0) {
		writer.WriteBigInt(3, &v.CreditBalance)
	}
	if !(v.Threshold == 0) {
		writer.WriteUint(4, v.Threshold)
	}
	if !(len(v.Keys) == 0) {
		for _, v := range v.Keys {
			writer.WriteValue(5, v)
		}
	}

	_, _, err := writer.Reset(fieldNames_KeyPage)
	return buffer.Bytes(), err
}

func (v *KeyPage) IsValid() error {
	var errs []string

	if err := v.AccountHeader.IsValid(); err != nil {
		errs = append(errs, err.Error())
	}
	if len(v.fieldsSet) > 3 && !v.fieldsSet[3] {
		errs = append(errs, "field CreditBalance is missing")
	} else if (v.CreditBalance).Cmp(new(big.Int)) == 0 {
		errs = append(errs, "field CreditBalance is not set")
	}
	if len(v.fieldsSet) > 4 && !v.fieldsSet[4] {
		errs = append(errs, "field Threshold is missing")
	} else if v.Threshold == 0 {
		errs = append(errs, "field Threshold is not set")
	}
	if len(v.fieldsSet) > 5 && !v.fieldsSet[5] {
		errs = append(errs, "field Keys is missing")
	} else if len(v.Keys) == 0 {
		errs = append(errs, "field Keys is not set")
	}

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

var fieldNames_KeySpec = []string{
	1: "PublicKey",
	2: "Nonce",
	3: "Owner",
}

func (v *KeySpec) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	if !(len(v.PublicKey) == 0) {
		writer.WriteBytes(1, v.PublicKey)
	}
	if !(v.Nonce == 0) {
		writer.WriteUint(2, v.Nonce)
	}
	if !(v.Owner == nil) {
		writer.WriteUrl(3, v.Owner)
	}

	_, _, err := writer.Reset(fieldNames_KeySpec)
	return buffer.Bytes(), err
}

func (v *KeySpec) IsValid() error {
	var errs []string

	if len(v.fieldsSet) > 1 && !v.fieldsSet[1] {
		errs = append(errs, "field PublicKey is missing")
	} else if len(v.PublicKey) == 0 {
		errs = append(errs, "field PublicKey is not set")
	}
	if len(v.fieldsSet) > 2 && !v.fieldsSet[2] {
		errs = append(errs, "field Nonce is missing")
	} else if v.Nonce == 0 {
		errs = append(errs, "field Nonce is not set")
	}
	if len(v.fieldsSet) > 3 && !v.fieldsSet[3] {
		errs = append(errs, "field Owner is missing")
	} else if v.Owner == nil {
		errs = append(errs, "field Owner is not set")
	}

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

var fieldNames_KeySpecParams = []string{
	1: "PublicKey",
}

func (v *KeySpecParams) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	if !(len(v.PublicKey) == 0) {
		writer.WriteBytes(1, v.PublicKey)
	}

	_, _, err := writer.Reset(fieldNames_KeySpecParams)
	return buffer.Bytes(), err
}

func (v *KeySpecParams) IsValid() error {
	var errs []string

	if len(v.fieldsSet) > 1 && !v.fieldsSet[1] {
		errs = append(errs, "field PublicKey is missing")
	} else if len(v.PublicKey) == 0 {
		errs = append(errs, "field PublicKey is not set")
	}

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

var fieldNames_LegacyED25519Signature = []string{
	1: "Type",
	2: "Nonce",
	3: "PublicKey",
	4: "Signature",
}

func (v *LegacyED25519Signature) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	writer.WriteUint(1, SignatureTypeLegacyED25519.ID())
	if !(v.Nonce == 0) {
		writer.WriteUint(2, v.Nonce)
	}
	if !(len(v.PublicKey) == 0) {
		writer.WriteBytes(3, v.PublicKey)
	}
	if !(len(v.Signature) == 0) {
		writer.WriteBytes(4, v.Signature)
	}

	_, _, err := writer.Reset(fieldNames_LegacyED25519Signature)
	return buffer.Bytes(), err
}

func (v *LegacyED25519Signature) IsValid() error {
	var errs []string

	if len(v.fieldsSet) > 2 && !v.fieldsSet[2] {
		errs = append(errs, "field Nonce is missing")
	} else if v.Nonce == 0 {
		errs = append(errs, "field Nonce is not set")
	}
	if len(v.fieldsSet) > 3 && !v.fieldsSet[3] {
		errs = append(errs, "field PublicKey is missing")
	} else if len(v.PublicKey) == 0 {
		errs = append(errs, "field PublicKey is not set")
	}
	if len(v.fieldsSet) > 4 && !v.fieldsSet[4] {
		errs = append(errs, "field Signature is missing")
	} else if len(v.Signature) == 0 {
		errs = append(errs, "field Signature is not set")
	}

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

var fieldNames_LiteDataAccount = []string{
	1: "Type",
	2: "AccountHeader",
	3: "Tail",
}

func (v *LiteDataAccount) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	writer.WriteUint(1, AccountTypeLiteDataAccount.ID())
	writer.WriteValue(2, &v.AccountHeader)
	if !(len(v.Tail) == 0) {
		writer.WriteBytes(3, v.Tail)
	}

	_, _, err := writer.Reset(fieldNames_LiteDataAccount)
	return buffer.Bytes(), err
}

func (v *LiteDataAccount) IsValid() error {
	var errs []string

	if err := v.AccountHeader.IsValid(); err != nil {
		errs = append(errs, err.Error())
	}
	if len(v.fieldsSet) > 3 && !v.fieldsSet[3] {
		errs = append(errs, "field Tail is missing")
	} else if len(v.Tail) == 0 {
		errs = append(errs, "field Tail is not set")
	}

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

var fieldNames_LiteIdentity = []string{
	1: "Type",
	2: "AccountHeader",
}

func (v *LiteIdentity) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	writer.WriteUint(1, AccountTypeLiteIdentity.ID())
	writer.WriteValue(2, &v.AccountHeader)

	_, _, err := writer.Reset(fieldNames_LiteIdentity)
	return buffer.Bytes(), err
}

func (v *LiteIdentity) IsValid() error {
	var errs []string

	if err := v.AccountHeader.IsValid(); err != nil {
		errs = append(errs, err.Error())
	}

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

var fieldNames_LiteTokenAccount = []string{
	1: "Type",
	2: "AccountHeader",
	3: "TokenUrl",
	4: "Balance",
	5: "Nonce",
	6: "CreditBalance",
}

func (v *LiteTokenAccount) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	writer.WriteUint(1, AccountTypeLiteTokenAccount.ID())
	writer.WriteValue(2, &v.AccountHeader)
	if !(v.TokenUrl == nil) {
		writer.WriteUrl(3, v.TokenUrl)
	}
	if !((v.Balance).Cmp(new(big.Int)) == 0) {
		writer.WriteBigInt(4, &v.Balance)
	}
	if !(v.Nonce == 0) {
		writer.WriteUint(5, v.Nonce)
	}
	if !((v.CreditBalance).Cmp(new(big.Int)) == 0) {
		writer.WriteBigInt(6, &v.CreditBalance)
	}

	_, _, err := writer.Reset(fieldNames_LiteTokenAccount)
	return buffer.Bytes(), err
}

func (v *LiteTokenAccount) IsValid() error {
	var errs []string

	if err := v.AccountHeader.IsValid(); err != nil {
		errs = append(errs, err.Error())
	}
	if len(v.fieldsSet) > 3 && !v.fieldsSet[3] {
		errs = append(errs, "field TokenUrl is missing")
	} else if v.TokenUrl == nil {
		errs = append(errs, "field TokenUrl is not set")
	}
	if len(v.fieldsSet) > 4 && !v.fieldsSet[4] {
		errs = append(errs, "field Balance is missing")
	} else if (v.Balance).Cmp(new(big.Int)) == 0 {
		errs = append(errs, "field Balance is not set")
	}
	if len(v.fieldsSet) > 5 && !v.fieldsSet[5] {
		errs = append(errs, "field Nonce is missing")
	} else if v.Nonce == 0 {
		errs = append(errs, "field Nonce is not set")
	}
	if len(v.fieldsSet) > 6 && !v.fieldsSet[6] {
		errs = append(errs, "field CreditBalance is missing")
	} else if (v.CreditBalance).Cmp(new(big.Int)) == 0 {
		errs = append(errs, "field CreditBalance is not set")
	}

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

var fieldNames_MetricsRequest = []string{
	1: "Metric",
	2: "Duration",
}

func (v *MetricsRequest) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	if !(len(v.Metric) == 0) {
		writer.WriteString(1, v.Metric)
	}
	if !(v.Duration == 0) {
		writer.WriteDuration(2, v.Duration)
	}

	_, _, err := writer.Reset(fieldNames_MetricsRequest)
	return buffer.Bytes(), err
}

func (v *MetricsRequest) IsValid() error {
	var errs []string

	if len(v.fieldsSet) > 1 && !v.fieldsSet[1] {
		errs = append(errs, "field Metric is missing")
	} else if len(v.Metric) == 0 {
		errs = append(errs, "field Metric is not set")
	}
	if len(v.fieldsSet) > 2 && !v.fieldsSet[2] {
		errs = append(errs, "field Duration is missing")
	} else if v.Duration == 0 {
		errs = append(errs, "field Duration is not set")
	}

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

var fieldNames_Object = []string{
	1: "Entry",
	2: "Height",
	3: "Roots",
}

func (v *Object) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	if !(len(v.Entry) == 0) {
		writer.WriteBytes(1, v.Entry)
	}
	if !(v.Height == 0) {
		writer.WriteUint(2, v.Height)
	}
	if !(len(v.Roots) == 0) {
		for _, v := range v.Roots {
			writer.WriteBytes(3, v)
		}
	}

	_, _, err := writer.Reset(fieldNames_Object)
	return buffer.Bytes(), err
}

func (v *Object) IsValid() error {
	var errs []string

	if len(v.fieldsSet) > 1 && !v.fieldsSet[1] {
		errs = append(errs, "field Entry is missing")
	} else if len(v.Entry) == 0 {
		errs = append(errs, "field Entry is not set")
	}
	if len(v.fieldsSet) > 2 && !v.fieldsSet[2] {
		errs = append(errs, "field Height is missing")
	} else if v.Height == 0 {
		errs = append(errs, "field Height is not set")
	}
	if len(v.fieldsSet) > 3 && !v.fieldsSet[3] {
		errs = append(errs, "field Roots is missing")
	} else if len(v.Roots) == 0 {
		errs = append(errs, "field Roots is not set")
	}

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

var fieldNames_ObjectMetadata = []string{
	1: "Type",
	2: "Chains",
}

func (v *ObjectMetadata) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	if !(v.Type == 0) {
		writer.WriteEnum(1, v.Type)
	}
	if !(len(v.Chains) == 0) {
		for _, v := range v.Chains {
			writer.WriteValue(2, &v)
		}
	}

	_, _, err := writer.Reset(fieldNames_ObjectMetadata)
	return buffer.Bytes(), err
}

func (v *ObjectMetadata) IsValid() error {
	var errs []string

	if len(v.fieldsSet) > 1 && !v.fieldsSet[1] {
		errs = append(errs, "field Type is missing")
	} else if v.Type == 0 {
		errs = append(errs, "field Type is not set")
	}
	if len(v.fieldsSet) > 2 && !v.fieldsSet[2] {
		errs = append(errs, "field Chains is missing")
	} else if len(v.Chains) == 0 {
		errs = append(errs, "field Chains is not set")
	}

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

var fieldNames_PendingTransactionState = []string{
	1: "Type",
	2: "AccountHeader",
	3: "Signature",
	4: "TransactionState",
	5: "Status",
}

func (v *PendingTransactionState) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	writer.WriteUint(1, AccountTypePendingTransaction.ID())
	writer.WriteValue(2, &v.AccountHeader)
	if !(len(v.Signature) == 0) {
		for _, v := range v.Signature {
			writer.WriteValue(3, v)
		}
	}
	if !(v.TransactionState == nil) {
		writer.WriteValue(4, v.TransactionState)
	}
	if !(len(v.Status) == 0) {
		writer.WriteBytes(5, v.Status)
	}

	_, _, err := writer.Reset(fieldNames_PendingTransactionState)
	return buffer.Bytes(), err
}

func (v *PendingTransactionState) IsValid() error {
	var errs []string

	if err := v.AccountHeader.IsValid(); err != nil {
		errs = append(errs, err.Error())
	}
	if len(v.fieldsSet) > 3 && !v.fieldsSet[3] {
		errs = append(errs, "field Signature is missing")
	} else if len(v.Signature) == 0 {
		errs = append(errs, "field Signature is not set")
	}
	if len(v.fieldsSet) > 4 && !v.fieldsSet[4] {
		errs = append(errs, "field TransactionState is missing")
	} else if v.TransactionState == nil {
		errs = append(errs, "field TransactionState is not set")
	}
	if len(v.fieldsSet) > 5 && !v.fieldsSet[5] {
		errs = append(errs, "field Status is missing")
	} else if len(v.Status) == 0 {
		errs = append(errs, "field Status is not set")
	}

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

var fieldNames_Receipt = []string{
	1: "Start",
	2: "Entries",
}

func (v *Receipt) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	if !(len(v.Start) == 0) {
		writer.WriteBytes(1, v.Start)
	}
	if !(len(v.Entries) == 0) {
		for _, v := range v.Entries {
			writer.WriteValue(2, &v)
		}
	}

	_, _, err := writer.Reset(fieldNames_Receipt)
	return buffer.Bytes(), err
}

func (v *Receipt) IsValid() error {
	var errs []string

	if len(v.fieldsSet) > 1 && !v.fieldsSet[1] {
		errs = append(errs, "field Start is missing")
	} else if len(v.Start) == 0 {
		errs = append(errs, "field Start is not set")
	}
	if len(v.fieldsSet) > 2 && !v.fieldsSet[2] {
		errs = append(errs, "field Entries is missing")
	} else if len(v.Entries) == 0 {
		errs = append(errs, "field Entries is not set")
	}

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

var fieldNames_ReceiptEntry = []string{
	1: "Right",
	2: "Hash",
}

func (v *ReceiptEntry) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	if !(!v.Right) {
		writer.WriteBool(1, v.Right)
	}
	if !(len(v.Hash) == 0) {
		writer.WriteBytes(2, v.Hash)
	}

	_, _, err := writer.Reset(fieldNames_ReceiptEntry)
	return buffer.Bytes(), err
}

func (v *ReceiptEntry) IsValid() error {
	var errs []string

	if len(v.fieldsSet) > 1 && !v.fieldsSet[1] {
		errs = append(errs, "field Right is missing")
	} else if !v.Right {
		errs = append(errs, "field Right is not set")
	}
	if len(v.fieldsSet) > 2 && !v.fieldsSet[2] {
		errs = append(errs, "field Hash is missing")
	} else if len(v.Hash) == 0 {
		errs = append(errs, "field Hash is not set")
	}

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

var fieldNames_RemoveManager = []string{
	1: "Type",
}

func (v *RemoveManager) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	writer.WriteUint(1, TransactionTypeRemoveManager.ID())

	_, _, err := writer.Reset(fieldNames_RemoveManager)
	return buffer.Bytes(), err
}

func (v *RemoveManager) IsValid() error {
	var errs []string

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

var fieldNames_RequestDataEntry = []string{
	1: "Url",
	2: "EntryHash",
}

func (v *RequestDataEntry) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	if !(v.Url == nil) {
		writer.WriteUrl(1, v.Url)
	}
	if !(v.EntryHash == ([32]byte{})) {
		writer.WriteHash(2, &v.EntryHash)
	}

	_, _, err := writer.Reset(fieldNames_RequestDataEntry)
	return buffer.Bytes(), err
}

func (v *RequestDataEntry) IsValid() error {
	var errs []string

	if len(v.fieldsSet) > 1 && !v.fieldsSet[1] {
		errs = append(errs, "field Url is missing")
	} else if v.Url == nil {
		errs = append(errs, "field Url is not set")
	}

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

var fieldNames_RequestDataEntrySet = []string{
	1: "Url",
	2: "Start",
	3: "Count",
	4: "ExpandChains",
}

func (v *RequestDataEntrySet) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	if !(v.Url == nil) {
		writer.WriteUrl(1, v.Url)
	}
	if !(v.Start == 0) {
		writer.WriteUint(2, v.Start)
	}
	if !(v.Count == 0) {
		writer.WriteUint(3, v.Count)
	}
	if !(!v.ExpandChains) {
		writer.WriteBool(4, v.ExpandChains)
	}

	_, _, err := writer.Reset(fieldNames_RequestDataEntrySet)
	return buffer.Bytes(), err
}

func (v *RequestDataEntrySet) IsValid() error {
	var errs []string

	if len(v.fieldsSet) > 1 && !v.fieldsSet[1] {
		errs = append(errs, "field Url is missing")
	} else if v.Url == nil {
		errs = append(errs, "field Url is not set")
	}
	if len(v.fieldsSet) > 2 && !v.fieldsSet[2] {
		errs = append(errs, "field Start is missing")
	} else if v.Start == 0 {
		errs = append(errs, "field Start is not set")
	}
	if len(v.fieldsSet) > 3 && !v.fieldsSet[3] {
		errs = append(errs, "field Count is missing")
	} else if v.Count == 0 {
		errs = append(errs, "field Count is not set")
	}

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

var fieldNames_ResponseDataEntry = []string{
	1: "EntryHash",
	2: "Entry",
}

func (v *ResponseDataEntry) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	if !(v.EntryHash == ([32]byte{})) {
		writer.WriteHash(1, &v.EntryHash)
	}
	if !((v.Entry).Equal(new(DataEntry))) {
		writer.WriteValue(2, &v.Entry)
	}

	_, _, err := writer.Reset(fieldNames_ResponseDataEntry)
	return buffer.Bytes(), err
}

func (v *ResponseDataEntry) IsValid() error {
	var errs []string

	if len(v.fieldsSet) > 1 && !v.fieldsSet[1] {
		errs = append(errs, "field EntryHash is missing")
	} else if v.EntryHash == ([32]byte{}) {
		errs = append(errs, "field EntryHash is not set")
	}
	if len(v.fieldsSet) > 2 && !v.fieldsSet[2] {
		errs = append(errs, "field Entry is missing")
	} else if (v.Entry).Equal(new(DataEntry)) {
		errs = append(errs, "field Entry is not set")
	}

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

var fieldNames_ResponseDataEntrySet = []string{
	1: "DataEntries",
	2: "Total",
}

func (v *ResponseDataEntrySet) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	if !(len(v.DataEntries) == 0) {
		for _, v := range v.DataEntries {
			writer.WriteValue(1, &v)
		}
	}
	if !(v.Total == 0) {
		writer.WriteUint(2, v.Total)
	}

	_, _, err := writer.Reset(fieldNames_ResponseDataEntrySet)
	return buffer.Bytes(), err
}

func (v *ResponseDataEntrySet) IsValid() error {
	var errs []string

	if len(v.fieldsSet) > 1 && !v.fieldsSet[1] {
		errs = append(errs, "field DataEntries is missing")
	} else if len(v.DataEntries) == 0 {
		errs = append(errs, "field DataEntries is not set")
	}
	if len(v.fieldsSet) > 2 && !v.fieldsSet[2] {
		errs = append(errs, "field Total is missing")
	} else if v.Total == 0 {
		errs = append(errs, "field Total is not set")
	}

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

var fieldNames_SegWitDataEntry = []string{
	1: "Type",
	2: "Cause",
	3: "EntryUrl",
	4: "EntryHash",
}

func (v *SegWitDataEntry) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	writer.WriteUint(1, TransactionTypeSegWitDataEntry.ID())
	if !(v.Cause == ([32]byte{})) {
		writer.WriteHash(2, &v.Cause)
	}
	if !(v.EntryUrl == nil) {
		writer.WriteUrl(3, v.EntryUrl)
	}
	if !(v.EntryHash == ([32]byte{})) {
		writer.WriteHash(4, &v.EntryHash)
	}

	_, _, err := writer.Reset(fieldNames_SegWitDataEntry)
	return buffer.Bytes(), err
}

func (v *SegWitDataEntry) IsValid() error {
	var errs []string

	if len(v.fieldsSet) > 2 && !v.fieldsSet[2] {
		errs = append(errs, "field Cause is missing")
	} else if v.Cause == ([32]byte{}) {
		errs = append(errs, "field Cause is not set")
	}
	if len(v.fieldsSet) > 3 && !v.fieldsSet[3] {
		errs = append(errs, "field EntryUrl is missing")
	} else if v.EntryUrl == nil {
		errs = append(errs, "field EntryUrl is not set")
	}
	if len(v.fieldsSet) > 4 && !v.fieldsSet[4] {
		errs = append(errs, "field EntryHash is missing")
	} else if v.EntryHash == ([32]byte{}) {
		errs = append(errs, "field EntryHash is not set")
	}

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

var fieldNames_SendTokens = []string{
	1: "Type",
	2: "Hash",
	3: "Meta",
	4: "To",
}

func (v *SendTokens) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	writer.WriteUint(1, TransactionTypeSendTokens.ID())
	if !(v.Hash == ([32]byte{})) {
		writer.WriteHash(2, &v.Hash)
	}
	if !(len(v.Meta) == 0) {
		writer.WriteBytes(3, v.Meta)
	}
	if !(len(v.To) == 0) {
		for _, v := range v.To {
			writer.WriteValue(4, v)
		}
	}

	_, _, err := writer.Reset(fieldNames_SendTokens)
	return buffer.Bytes(), err
}

func (v *SendTokens) IsValid() error {
	var errs []string

	if len(v.fieldsSet) > 4 && !v.fieldsSet[4] {
		errs = append(errs, "field To is missing")
	} else if len(v.To) == 0 {
		errs = append(errs, "field To is not set")
	}

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

var fieldNames_SendTransaction = []string{
	1: "Payload",
	2: "Recipient",
}

func (v *SendTransaction) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	if !(v.Payload == (nil)) {
		writer.WriteValue(1, v.Payload)
	}
	if !(v.Recipient == nil) {
		writer.WriteUrl(2, v.Recipient)
	}

	_, _, err := writer.Reset(fieldNames_SendTransaction)
	return buffer.Bytes(), err
}

func (v *SendTransaction) IsValid() error {
	var errs []string

	if len(v.fieldsSet) > 1 && !v.fieldsSet[1] {
		errs = append(errs, "field Payload is missing")
	} else if v.Payload == (nil) {
		errs = append(errs, "field Payload is not set")
	}
	if len(v.fieldsSet) > 2 && !v.fieldsSet[2] {
		errs = append(errs, "field Recipient is missing")
	} else if v.Recipient == nil {
		errs = append(errs, "field Recipient is not set")
	}

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

var fieldNames_SignPending = []string{
	1: "Type",
}

func (v *SignPending) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	writer.WriteUint(1, TransactionTypeSignPending.ID())

	_, _, err := writer.Reset(fieldNames_SignPending)
	return buffer.Bytes(), err
}

func (v *SignPending) IsValid() error {
	var errs []string

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

var fieldNames_SyntheticAnchor = []string{
	1:  "Type",
	2:  "Source",
	3:  "Major",
	4:  "RootAnchor",
	5:  "RootIndex",
	6:  "Block",
	7:  "SourceIndex",
	8:  "SourceBlock",
	9:  "AcmeOraclePrice",
	10: "Receipt",
}

func (v *SyntheticAnchor) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	writer.WriteUint(1, TransactionTypeSyntheticAnchor.ID())
	if !(v.Source == nil) {
		writer.WriteUrl(2, v.Source)
	}
	if !(!v.Major) {
		writer.WriteBool(3, v.Major)
	}
	if !(v.RootAnchor == ([32]byte{})) {
		writer.WriteHash(4, &v.RootAnchor)
	}
	if !(v.RootIndex == 0) {
		writer.WriteUint(5, v.RootIndex)
	}
	if !(v.Block == 0) {
		writer.WriteUint(6, v.Block)
	}
	if !(v.SourceIndex == 0) {
		writer.WriteUint(7, v.SourceIndex)
	}
	if !(v.SourceBlock == 0) {
		writer.WriteUint(8, v.SourceBlock)
	}
	if !(v.AcmeOraclePrice == 0) {
		writer.WriteUint(9, v.AcmeOraclePrice)
	}
	if !((v.Receipt).Equal(new(Receipt))) {
		writer.WriteValue(10, &v.Receipt)
	}

	_, _, err := writer.Reset(fieldNames_SyntheticAnchor)
	return buffer.Bytes(), err
}

func (v *SyntheticAnchor) IsValid() error {
	var errs []string

	if len(v.fieldsSet) > 2 && !v.fieldsSet[2] {
		errs = append(errs, "field Source is missing")
	} else if v.Source == nil {
		errs = append(errs, "field Source is not set")
	}
	if len(v.fieldsSet) > 3 && !v.fieldsSet[3] {
		errs = append(errs, "field Major is missing")
	} else if !v.Major {
		errs = append(errs, "field Major is not set")
	}
	if len(v.fieldsSet) > 4 && !v.fieldsSet[4] {
		errs = append(errs, "field RootAnchor is missing")
	} else if v.RootAnchor == ([32]byte{}) {
		errs = append(errs, "field RootAnchor is not set")
	}
	if len(v.fieldsSet) > 5 && !v.fieldsSet[5] {
		errs = append(errs, "field RootIndex is missing")
	} else if v.RootIndex == 0 {
		errs = append(errs, "field RootIndex is not set")
	}
	if len(v.fieldsSet) > 6 && !v.fieldsSet[6] {
		errs = append(errs, "field Block is missing")
	} else if v.Block == 0 {
		errs = append(errs, "field Block is not set")
	}
	if len(v.fieldsSet) > 7 && !v.fieldsSet[7] {
		errs = append(errs, "field SourceIndex is missing")
	} else if v.SourceIndex == 0 {
		errs = append(errs, "field SourceIndex is not set")
	}
	if len(v.fieldsSet) > 8 && !v.fieldsSet[8] {
		errs = append(errs, "field SourceBlock is missing")
	} else if v.SourceBlock == 0 {
		errs = append(errs, "field SourceBlock is not set")
	}
	if len(v.fieldsSet) > 9 && !v.fieldsSet[9] {
		errs = append(errs, "field AcmeOraclePrice is missing")
	} else if v.AcmeOraclePrice == 0 {
		errs = append(errs, "field AcmeOraclePrice is not set")
	}
	if len(v.fieldsSet) > 10 && !v.fieldsSet[10] {
		errs = append(errs, "field Receipt is missing")
	} else if (v.Receipt).Equal(new(Receipt)) {
		errs = append(errs, "field Receipt is not set")
	}

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

var fieldNames_SyntheticBurnTokens = []string{
	1: "Type",
	2: "Cause",
	3: "Amount",
}

func (v *SyntheticBurnTokens) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	writer.WriteUint(1, TransactionTypeSyntheticBurnTokens.ID())
	if !(v.Cause == ([32]byte{})) {
		writer.WriteHash(2, &v.Cause)
	}
	if !((v.Amount).Cmp(new(big.Int)) == 0) {
		writer.WriteBigInt(3, &v.Amount)
	}

	_, _, err := writer.Reset(fieldNames_SyntheticBurnTokens)
	return buffer.Bytes(), err
}

func (v *SyntheticBurnTokens) IsValid() error {
	var errs []string

	if len(v.fieldsSet) > 2 && !v.fieldsSet[2] {
		errs = append(errs, "field Cause is missing")
	} else if v.Cause == ([32]byte{}) {
		errs = append(errs, "field Cause is not set")
	}
	if len(v.fieldsSet) > 3 && !v.fieldsSet[3] {
		errs = append(errs, "field Amount is missing")
	} else if (v.Amount).Cmp(new(big.Int)) == 0 {
		errs = append(errs, "field Amount is not set")
	}

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

var fieldNames_SyntheticCreateChain = []string{
	1: "Type",
	2: "Cause",
	3: "Chains",
}

func (v *SyntheticCreateChain) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	writer.WriteUint(1, TransactionTypeSyntheticCreateChain.ID())
	if !(v.Cause == ([32]byte{})) {
		writer.WriteHash(2, &v.Cause)
	}
	if !(len(v.Chains) == 0) {
		for _, v := range v.Chains {
			writer.WriteValue(3, &v)
		}
	}

	_, _, err := writer.Reset(fieldNames_SyntheticCreateChain)
	return buffer.Bytes(), err
}

func (v *SyntheticCreateChain) IsValid() error {
	var errs []string

	if len(v.fieldsSet) > 2 && !v.fieldsSet[2] {
		errs = append(errs, "field Cause is missing")
	} else if v.Cause == ([32]byte{}) {
		errs = append(errs, "field Cause is not set")
	}
	if len(v.fieldsSet) > 3 && !v.fieldsSet[3] {
		errs = append(errs, "field Chains is missing")
	} else if len(v.Chains) == 0 {
		errs = append(errs, "field Chains is not set")
	}

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

var fieldNames_SyntheticDepositCredits = []string{
	1: "Type",
	2: "Cause",
	3: "Amount",
}

func (v *SyntheticDepositCredits) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	writer.WriteUint(1, TransactionTypeSyntheticDepositCredits.ID())
	if !(v.Cause == ([32]byte{})) {
		writer.WriteHash(2, &v.Cause)
	}
	if !(v.Amount == 0) {
		writer.WriteUint(3, v.Amount)
	}

	_, _, err := writer.Reset(fieldNames_SyntheticDepositCredits)
	return buffer.Bytes(), err
}

func (v *SyntheticDepositCredits) IsValid() error {
	var errs []string

	if len(v.fieldsSet) > 2 && !v.fieldsSet[2] {
		errs = append(errs, "field Cause is missing")
	} else if v.Cause == ([32]byte{}) {
		errs = append(errs, "field Cause is not set")
	}
	if len(v.fieldsSet) > 3 && !v.fieldsSet[3] {
		errs = append(errs, "field Amount is missing")
	} else if v.Amount == 0 {
		errs = append(errs, "field Amount is not set")
	}

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

var fieldNames_SyntheticDepositTokens = []string{
	1: "Type",
	2: "Cause",
	3: "Token",
	4: "Amount",
}

func (v *SyntheticDepositTokens) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	writer.WriteUint(1, TransactionTypeSyntheticDepositTokens.ID())
	if !(v.Cause == ([32]byte{})) {
		writer.WriteHash(2, &v.Cause)
	}
	if !(v.Token == nil) {
		writer.WriteUrl(3, v.Token)
	}
	if !((v.Amount).Cmp(new(big.Int)) == 0) {
		writer.WriteBigInt(4, &v.Amount)
	}

	_, _, err := writer.Reset(fieldNames_SyntheticDepositTokens)
	return buffer.Bytes(), err
}

func (v *SyntheticDepositTokens) IsValid() error {
	var errs []string

	if len(v.fieldsSet) > 2 && !v.fieldsSet[2] {
		errs = append(errs, "field Cause is missing")
	} else if v.Cause == ([32]byte{}) {
		errs = append(errs, "field Cause is not set")
	}
	if len(v.fieldsSet) > 3 && !v.fieldsSet[3] {
		errs = append(errs, "field Token is missing")
	} else if v.Token == nil {
		errs = append(errs, "field Token is not set")
	}
	if len(v.fieldsSet) > 4 && !v.fieldsSet[4] {
		errs = append(errs, "field Amount is missing")
	} else if (v.Amount).Cmp(new(big.Int)) == 0 {
		errs = append(errs, "field Amount is not set")
	}

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

var fieldNames_SyntheticLedger = []string{
	1: "Nonce",
	2: "Produced",
	3: "Unsigned",
	4: "Unsent",
}

func (v *SyntheticLedger) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	if !(v.Nonce == 0) {
		writer.WriteUint(1, v.Nonce)
	}
	if !(len(v.Produced) == 0) {
		for _, v := range v.Produced {
			writer.WriteHash(2, &v)
		}
	}
	if !(len(v.Unsigned) == 0) {
		for _, v := range v.Unsigned {
			writer.WriteHash(3, &v)
		}
	}
	if !(len(v.Unsent) == 0) {
		for _, v := range v.Unsent {
			writer.WriteHash(4, &v)
		}
	}

	_, _, err := writer.Reset(fieldNames_SyntheticLedger)
	return buffer.Bytes(), err
}

func (v *SyntheticLedger) IsValid() error {
	var errs []string

	if len(v.fieldsSet) > 1 && !v.fieldsSet[1] {
		errs = append(errs, "field Nonce is missing")
	} else if v.Nonce == 0 {
		errs = append(errs, "field Nonce is not set")
	}
	if len(v.fieldsSet) > 2 && !v.fieldsSet[2] {
		errs = append(errs, "field Produced is missing")
	} else if len(v.Produced) == 0 {
		errs = append(errs, "field Produced is not set")
	}
	if len(v.fieldsSet) > 3 && !v.fieldsSet[3] {
		errs = append(errs, "field Unsigned is missing")
	} else if len(v.Unsigned) == 0 {
		errs = append(errs, "field Unsigned is not set")
	}
	if len(v.fieldsSet) > 4 && !v.fieldsSet[4] {
		errs = append(errs, "field Unsent is missing")
	} else if len(v.Unsent) == 0 {
		errs = append(errs, "field Unsent is not set")
	}

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

var fieldNames_SyntheticMirror = []string{
	1: "Type",
	2: "Objects",
}

func (v *SyntheticMirror) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	writer.WriteUint(1, TransactionTypeSyntheticMirror.ID())
	if !(len(v.Objects) == 0) {
		for _, v := range v.Objects {
			writer.WriteValue(2, &v)
		}
	}

	_, _, err := writer.Reset(fieldNames_SyntheticMirror)
	return buffer.Bytes(), err
}

func (v *SyntheticMirror) IsValid() error {
	var errs []string

	if len(v.fieldsSet) > 2 && !v.fieldsSet[2] {
		errs = append(errs, "field Objects is missing")
	} else if len(v.Objects) == 0 {
		errs = append(errs, "field Objects is not set")
	}

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

var fieldNames_SyntheticWriteData = []string{
	1: "Type",
	2: "Cause",
	3: "Entry",
}

func (v *SyntheticWriteData) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	writer.WriteUint(1, TransactionTypeSyntheticWriteData.ID())
	if !(v.Cause == ([32]byte{})) {
		writer.WriteHash(2, &v.Cause)
	}
	if !((v.Entry).Equal(new(DataEntry))) {
		writer.WriteValue(3, &v.Entry)
	}

	_, _, err := writer.Reset(fieldNames_SyntheticWriteData)
	return buffer.Bytes(), err
}

func (v *SyntheticWriteData) IsValid() error {
	var errs []string

	if len(v.fieldsSet) > 2 && !v.fieldsSet[2] {
		errs = append(errs, "field Cause is missing")
	} else if v.Cause == ([32]byte{}) {
		errs = append(errs, "field Cause is not set")
	}
	if len(v.fieldsSet) > 3 && !v.fieldsSet[3] {
		errs = append(errs, "field Entry is missing")
	} else if (v.Entry).Equal(new(DataEntry)) {
		errs = append(errs, "field Entry is not set")
	}

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

var fieldNames_TokenAccount = []string{
	1: "Type",
	2: "AccountHeader",
	3: "TokenUrl",
	4: "Balance",
	5: "Scratch",
}

func (v *TokenAccount) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	writer.WriteUint(1, AccountTypeTokenAccount.ID())
	writer.WriteValue(2, &v.AccountHeader)
	if !(v.TokenUrl == nil) {
		writer.WriteUrl(3, v.TokenUrl)
	}
	if !((v.Balance).Cmp(new(big.Int)) == 0) {
		writer.WriteBigInt(4, &v.Balance)
	}
	if !(!v.Scratch) {
		writer.WriteBool(5, v.Scratch)
	}

	_, _, err := writer.Reset(fieldNames_TokenAccount)
	return buffer.Bytes(), err
}

func (v *TokenAccount) IsValid() error {
	var errs []string

	if err := v.AccountHeader.IsValid(); err != nil {
		errs = append(errs, err.Error())
	}
	if len(v.fieldsSet) > 3 && !v.fieldsSet[3] {
		errs = append(errs, "field TokenUrl is missing")
	} else if v.TokenUrl == nil {
		errs = append(errs, "field TokenUrl is not set")
	}
	if len(v.fieldsSet) > 4 && !v.fieldsSet[4] {
		errs = append(errs, "field Balance is missing")
	} else if (v.Balance).Cmp(new(big.Int)) == 0 {
		errs = append(errs, "field Balance is not set")
	}

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

var fieldNames_TokenIssuer = []string{
	1: "Type",
	2: "AccountHeader",
	3: "Symbol",
	4: "Precision",
	5: "Properties",
	6: "Supply",
	7: "HasSupplyLimit",
}

func (v *TokenIssuer) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	writer.WriteUint(1, AccountTypeTokenIssuer.ID())
	writer.WriteValue(2, &v.AccountHeader)
	if !(len(v.Symbol) == 0) {
		writer.WriteString(3, v.Symbol)
	}
	if !(v.Precision == 0) {
		writer.WriteUint(4, v.Precision)
	}
	if !(v.Properties == nil) {
		writer.WriteUrl(5, v.Properties)
	}
	if !((v.Supply).Cmp(new(big.Int)) == 0) {
		writer.WriteBigInt(6, &v.Supply)
	}
	if !(!v.HasSupplyLimit) {
		writer.WriteBool(7, v.HasSupplyLimit)
	}

	_, _, err := writer.Reset(fieldNames_TokenIssuer)
	return buffer.Bytes(), err
}

func (v *TokenIssuer) IsValid() error {
	var errs []string

	if err := v.AccountHeader.IsValid(); err != nil {
		errs = append(errs, err.Error())
	}
	if len(v.fieldsSet) > 3 && !v.fieldsSet[3] {
		errs = append(errs, "field Symbol is missing")
	} else if len(v.Symbol) == 0 {
		errs = append(errs, "field Symbol is not set")
	}
	if len(v.fieldsSet) > 4 && !v.fieldsSet[4] {
		errs = append(errs, "field Precision is missing")
	} else if v.Precision == 0 {
		errs = append(errs, "field Precision is not set")
	}
	if len(v.fieldsSet) > 5 && !v.fieldsSet[5] {
		errs = append(errs, "field Properties is missing")
	} else if v.Properties == nil {
		errs = append(errs, "field Properties is not set")
	}

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

var fieldNames_TokenRecipient = []string{
	1: "Url",
	2: "Amount",
}

func (v *TokenRecipient) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	if !(v.Url == nil) {
		writer.WriteUrl(1, v.Url)
	}
	if !((v.Amount).Cmp(new(big.Int)) == 0) {
		writer.WriteBigInt(2, &v.Amount)
	}

	_, _, err := writer.Reset(fieldNames_TokenRecipient)
	return buffer.Bytes(), err
}

func (v *TokenRecipient) IsValid() error {
	var errs []string

	if len(v.fieldsSet) > 1 && !v.fieldsSet[1] {
		errs = append(errs, "field Url is missing")
	} else if v.Url == nil {
		errs = append(errs, "field Url is not set")
	}
	if len(v.fieldsSet) > 2 && !v.fieldsSet[2] {
		errs = append(errs, "field Amount is missing")
	} else if (v.Amount).Cmp(new(big.Int)) == 0 {
		errs = append(errs, "field Amount is not set")
	}

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

var fieldNames_Transaction = []string{
	1: "TransactionHeader",
	2: "Body",
}

func (v *Transaction) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	writer.WriteValue(1, &v.TransactionHeader)
	if !(v.Body == (nil)) {
		writer.WriteValue(2, v.Body)
	}

	_, _, err := writer.Reset(fieldNames_Transaction)
	return buffer.Bytes(), err
}

func (v *Transaction) IsValid() error {
	var errs []string

	if err := v.TransactionHeader.IsValid(); err != nil {
		errs = append(errs, err.Error())
	}
	if len(v.fieldsSet) > 2 && !v.fieldsSet[2] {
		errs = append(errs, "field Body is missing")
	} else if v.Body == (nil) {
		errs = append(errs, "field Body is not set")
	}

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

var fieldNames_TransactionHeader = []string{
	1: "Origin",
	2: "KeyPageHeight",
	3: "KeyPageIndex",
	4: "Nonce",
}

func (v *TransactionHeader) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	if !(v.Origin == nil) {
		writer.WriteUrl(1, v.Origin)
	}
	if !(v.KeyPageHeight == 0) {
		writer.WriteUint(2, v.KeyPageHeight)
	}
	if !(v.KeyPageIndex == 0) {
		writer.WriteUint(3, v.KeyPageIndex)
	}
	if !(v.Nonce == 0) {
		writer.WriteUint(4, v.Nonce)
	}

	_, _, err := writer.Reset(fieldNames_TransactionHeader)
	return buffer.Bytes(), err
}

func (v *TransactionHeader) IsValid() error {
	var errs []string

	if len(v.fieldsSet) > 1 && !v.fieldsSet[1] {
		errs = append(errs, "field Origin is missing")
	} else if v.Origin == nil {
		errs = append(errs, "field Origin is not set")
	}
	if len(v.fieldsSet) > 2 && !v.fieldsSet[2] {
		errs = append(errs, "field KeyPageHeight is missing")
	} else if v.KeyPageHeight == 0 {
		errs = append(errs, "field KeyPageHeight is not set")
	}
	if len(v.fieldsSet) > 3 && !v.fieldsSet[3] {
		errs = append(errs, "field KeyPageIndex is missing")
	} else if v.KeyPageIndex == 0 {
		errs = append(errs, "field KeyPageIndex is not set")
	}
	if len(v.fieldsSet) > 4 && !v.fieldsSet[4] {
		errs = append(errs, "field Nonce is missing")
	} else if v.Nonce == 0 {
		errs = append(errs, "field Nonce is not set")
	}

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

var fieldNames_TransactionSignature = []string{
	1: "Transaction",
	2: "Signature",
}

func (v *TransactionSignature) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	if !(v.Transaction == ([32]byte{})) {
		writer.WriteHash(1, &v.Transaction)
	}
	if !(v.Signature == (nil)) {
		writer.WriteValue(2, v.Signature)
	}

	_, _, err := writer.Reset(fieldNames_TransactionSignature)
	return buffer.Bytes(), err
}

func (v *TransactionSignature) IsValid() error {
	var errs []string

	if len(v.fieldsSet) > 1 && !v.fieldsSet[1] {
		errs = append(errs, "field Transaction is missing")
	} else if v.Transaction == ([32]byte{}) {
		errs = append(errs, "field Transaction is not set")
	}
	if len(v.fieldsSet) > 2 && !v.fieldsSet[2] {
		errs = append(errs, "field Signature is missing")
	} else if v.Signature == (nil) {
		errs = append(errs, "field Signature is not set")
	}

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

var fieldNames_TransactionState = []string{
	1: "Type",
	2: "AccountHeader",
	3: "TxState",
}

func (v *TransactionState) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	writer.WriteUint(1, AccountTypeTransaction.ID())
	writer.WriteValue(2, &v.AccountHeader)
	writer.WriteValue(3, &v.TxState)

	_, _, err := writer.Reset(fieldNames_TransactionState)
	return buffer.Bytes(), err
}

func (v *TransactionState) IsValid() error {
	var errs []string

	if err := v.AccountHeader.IsValid(); err != nil {
		errs = append(errs, err.Error())
	}
	if err := v.TxState.IsValid(); err != nil {
		errs = append(errs, err.Error())
	}

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

var fieldNames_TransactionStatus = []string{
	1: "Remote",
	2: "Delivered",
	3: "Pending",
	4: "Code",
	5: "Message",
	6: "Result",
}

func (v *TransactionStatus) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	if !(!v.Remote) {
		writer.WriteBool(1, v.Remote)
	}
	if !(!v.Delivered) {
		writer.WriteBool(2, v.Delivered)
	}
	if !(!v.Pending) {
		writer.WriteBool(3, v.Pending)
	}
	if !(v.Code == 0) {
		writer.WriteUint(4, v.Code)
	}
	if !(len(v.Message) == 0) {
		writer.WriteString(5, v.Message)
	}
	if !(v.Result == (nil)) {
		writer.WriteValue(6, v.Result)
	}

	_, _, err := writer.Reset(fieldNames_TransactionStatus)
	return buffer.Bytes(), err
}

func (v *TransactionStatus) IsValid() error {
	var errs []string

	if len(v.fieldsSet) > 1 && !v.fieldsSet[1] {
		errs = append(errs, "field Remote is missing")
	} else if !v.Remote {
		errs = append(errs, "field Remote is not set")
	}
	if len(v.fieldsSet) > 2 && !v.fieldsSet[2] {
		errs = append(errs, "field Delivered is missing")
	} else if !v.Delivered {
		errs = append(errs, "field Delivered is not set")
	}
	if len(v.fieldsSet) > 3 && !v.fieldsSet[3] {
		errs = append(errs, "field Pending is missing")
	} else if !v.Pending {
		errs = append(errs, "field Pending is not set")
	}
	if len(v.fieldsSet) > 4 && !v.fieldsSet[4] {
		errs = append(errs, "field Code is missing")
	} else if v.Code == 0 {
		errs = append(errs, "field Code is not set")
	}
	if len(v.fieldsSet) > 5 && !v.fieldsSet[5] {
		errs = append(errs, "field Message is missing")
	} else if len(v.Message) == 0 {
		errs = append(errs, "field Message is not set")
	}

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

var fieldNames_TxState = []string{
	1: "SigInfo",
	2: "Transaction",
}

func (v *TxState) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	if !(v.SigInfo == nil) {
		writer.WriteValue(1, v.SigInfo)
	}
	if !(v.Transaction == (nil)) {
		writer.WriteValue(2, v.Transaction)
	}

	_, _, err := writer.Reset(fieldNames_TxState)
	return buffer.Bytes(), err
}

func (v *TxState) IsValid() error {
	var errs []string

	if len(v.fieldsSet) > 1 && !v.fieldsSet[1] {
		errs = append(errs, "field SigInfo is missing")
	} else if v.SigInfo == nil {
		errs = append(errs, "field SigInfo is not set")
	}
	if len(v.fieldsSet) > 2 && !v.fieldsSet[2] {
		errs = append(errs, "field Transaction is missing")
	} else if v.Transaction == (nil) {
		errs = append(errs, "field Transaction is not set")
	}

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

var fieldNames_UpdateKeyPage = []string{
	1: "Type",
	2: "Operation",
	3: "Key",
	4: "NewKey",
	5: "Owner",
	6: "Threshold",
}

func (v *UpdateKeyPage) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	writer.WriteUint(1, TransactionTypeUpdateKeyPage.ID())
	if !(v.Operation == 0) {
		writer.WriteEnum(2, v.Operation)
	}
	if !(len(v.Key) == 0) {
		writer.WriteBytes(3, v.Key)
	}
	if !(len(v.NewKey) == 0) {
		writer.WriteBytes(4, v.NewKey)
	}
	if !(v.Owner == nil) {
		writer.WriteUrl(5, v.Owner)
	}
	if !(v.Threshold == 0) {
		writer.WriteUint(6, v.Threshold)
	}

	_, _, err := writer.Reset(fieldNames_UpdateKeyPage)
	return buffer.Bytes(), err
}

func (v *UpdateKeyPage) IsValid() error {
	var errs []string

	if len(v.fieldsSet) > 2 && !v.fieldsSet[2] {
		errs = append(errs, "field Operation is missing")
	} else if v.Operation == 0 {
		errs = append(errs, "field Operation is not set")
	}

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

var fieldNames_UpdateManager = []string{
	1: "Type",
	2: "ManagerKeyBook",
}

func (v *UpdateManager) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	writer.WriteUint(1, TransactionTypeUpdateManager.ID())
	if !(v.ManagerKeyBook == nil) {
		writer.WriteUrl(2, v.ManagerKeyBook)
	}

	_, _, err := writer.Reset(fieldNames_UpdateManager)
	return buffer.Bytes(), err
}

func (v *UpdateManager) IsValid() error {
	var errs []string

	if len(v.fieldsSet) > 2 && !v.fieldsSet[2] {
		errs = append(errs, "field ManagerKeyBook is missing")
	} else if v.ManagerKeyBook == nil {
		errs = append(errs, "field ManagerKeyBook is not set")
	}

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

var fieldNames_WriteData = []string{
	1: "Type",
	2: "Entry",
}

func (v *WriteData) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	writer.WriteUint(1, TransactionTypeWriteData.ID())
	if !((v.Entry).Equal(new(DataEntry))) {
		writer.WriteValue(2, &v.Entry)
	}

	_, _, err := writer.Reset(fieldNames_WriteData)
	return buffer.Bytes(), err
}

func (v *WriteData) IsValid() error {
	var errs []string

	if len(v.fieldsSet) > 2 && !v.fieldsSet[2] {
		errs = append(errs, "field Entry is missing")
	} else if (v.Entry).Equal(new(DataEntry)) {
		errs = append(errs, "field Entry is not set")
	}

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

var fieldNames_WriteDataResult = []string{
	1: "Type",
	2: "EntryHash",
	3: "AccountUrl",
	4: "AccountID",
}

func (v *WriteDataResult) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	writer.WriteUint(1, TransactionTypeWriteData.ID())
	if !(v.EntryHash == ([32]byte{})) {
		writer.WriteHash(2, &v.EntryHash)
	}
	if !(v.AccountUrl == nil) {
		writer.WriteUrl(3, v.AccountUrl)
	}
	if !(len(v.AccountID) == 0) {
		writer.WriteBytes(4, v.AccountID)
	}

	_, _, err := writer.Reset(fieldNames_WriteDataResult)
	return buffer.Bytes(), err
}

func (v *WriteDataResult) IsValid() error {
	var errs []string

	if len(v.fieldsSet) > 2 && !v.fieldsSet[2] {
		errs = append(errs, "field EntryHash is missing")
	} else if v.EntryHash == ([32]byte{}) {
		errs = append(errs, "field EntryHash is not set")
	}
	if len(v.fieldsSet) > 3 && !v.fieldsSet[3] {
		errs = append(errs, "field AccountUrl is missing")
	} else if v.AccountUrl == nil {
		errs = append(errs, "field AccountUrl is not set")
	}
	if len(v.fieldsSet) > 4 && !v.fieldsSet[4] {
		errs = append(errs, "field AccountID is missing")
	} else if len(v.AccountID) == 0 {
		errs = append(errs, "field AccountID is not set")
	}

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

var fieldNames_WriteDataTo = []string{
	1: "Type",
	2: "Recipient",
	3: "Entry",
}

func (v *WriteDataTo) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	writer.WriteUint(1, TransactionTypeWriteDataTo.ID())
	if !(v.Recipient == nil) {
		writer.WriteUrl(2, v.Recipient)
	}
	if !((v.Entry).Equal(new(DataEntry))) {
		writer.WriteValue(3, &v.Entry)
	}

	_, _, err := writer.Reset(fieldNames_WriteDataTo)
	return buffer.Bytes(), err
}

func (v *WriteDataTo) IsValid() error {
	var errs []string

	if len(v.fieldsSet) > 2 && !v.fieldsSet[2] {
		errs = append(errs, "field Recipient is missing")
	} else if v.Recipient == nil {
		errs = append(errs, "field Recipient is not set")
	}
	if len(v.fieldsSet) > 3 && !v.fieldsSet[3] {
		errs = append(errs, "field Entry is missing")
	} else if (v.Entry).Equal(new(DataEntry)) {
		errs = append(errs, "field Entry is not set")
	}

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

func (v *ADI) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *ADI) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	var typ AccountType
	if !reader.ReadEnum(1, &typ) {
		return fmt.Errorf("field Type: missing")
	} else if typ != AccountTypeIdentity {
		return fmt.Errorf("field Type: want %v, got %v", AccountTypeIdentity, typ)
	}

	reader.ReadValue(2, v.AccountHeader.UnmarshalBinary)

	seen, err := reader.Reset(fieldNames_ADI)
	v.fieldsSet = seen
	return err
}

func (v *AccountHeader) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *AccountHeader) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	if x, ok := reader.ReadUrl(1); ok {
		v.Url = x
	}
	if x, ok := reader.ReadUrl(2); ok {
		v.KeyBook = x
	}
	if x, ok := reader.ReadUrl(3); ok {
		v.ManagerKeyBook = x
	}

	seen, err := reader.Reset(fieldNames_AccountHeader)
	v.fieldsSet = seen
	return err
}

func (v *AcmeFaucet) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *AcmeFaucet) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	var typ TransactionType
	if !reader.ReadEnum(1, &typ) {
		return fmt.Errorf("field Type: missing")
	} else if typ != TransactionTypeAcmeFaucet {
		return fmt.Errorf("field Type: want %v, got %v", TransactionTypeAcmeFaucet, typ)
	}

	if x, ok := reader.ReadUrl(2); ok {
		v.Url = x
	}

	seen, err := reader.Reset(fieldNames_AcmeFaucet)
	v.fieldsSet = seen
	return err
}

func (v *AcmeOracle) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *AcmeOracle) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	if x, ok := reader.ReadUint(1); ok {
		v.Price = x
	}

	seen, err := reader.Reset(fieldNames_AcmeOracle)
	v.fieldsSet = seen
	return err
}

func (v *AddCredits) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *AddCredits) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	var typ TransactionType
	if !reader.ReadEnum(1, &typ) {
		return fmt.Errorf("field Type: missing")
	} else if typ != TransactionTypeAddCredits {
		return fmt.Errorf("field Type: want %v, got %v", TransactionTypeAddCredits, typ)
	}

	if x, ok := reader.ReadUrl(2); ok {
		v.Recipient = x
	}
	if x, ok := reader.ReadBigInt(3); ok {
		v.Amount = *x
	}

	seen, err := reader.Reset(fieldNames_AddCredits)
	v.fieldsSet = seen
	return err
}

func (v *Anchor) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *Anchor) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	var typ AccountType
	if !reader.ReadEnum(1, &typ) {
		return fmt.Errorf("field Type: missing")
	} else if typ != AccountTypeAnchor {
		return fmt.Errorf("field Type: want %v, got %v", AccountTypeAnchor, typ)
	}

	reader.ReadValue(2, v.AccountHeader.UnmarshalBinary)

	seen, err := reader.Reset(fieldNames_Anchor)
	v.fieldsSet = seen
	return err
}

func (v *AnchorMetadata) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *AnchorMetadata) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	reader.ReadValue(1, v.ChainMetadata.UnmarshalBinary)

	if x, ok := reader.ReadUrl(2); ok {
		v.Account = x
	}
	if x, ok := reader.ReadUint(3); ok {
		v.Index = x
	}
	if x, ok := reader.ReadUint(4); ok {
		v.SourceIndex = x
	}
	if x, ok := reader.ReadUint(5); ok {
		v.SourceBlock = x
	}
	if x, ok := reader.ReadBytes(6); ok {
		v.Entry = x
	}

	seen, err := reader.Reset(fieldNames_AnchorMetadata)
	v.fieldsSet = seen
	return err
}

func (v *AnchoredRecord) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *AnchoredRecord) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	if x, ok := reader.ReadBytes(1); ok {
		v.Record = x
	}
	if x, ok := reader.ReadHash(2); ok {
		v.Anchor = *x
	}

	seen, err := reader.Reset(fieldNames_AnchoredRecord)
	v.fieldsSet = seen
	return err
}

func (v *BurnTokens) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *BurnTokens) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	var typ TransactionType
	if !reader.ReadEnum(1, &typ) {
		return fmt.Errorf("field Type: missing")
	} else if typ != TransactionTypeBurnTokens {
		return fmt.Errorf("field Type: want %v, got %v", TransactionTypeBurnTokens, typ)
	}

	if x, ok := reader.ReadBigInt(2); ok {
		v.Amount = *x
	}

	seen, err := reader.Reset(fieldNames_BurnTokens)
	v.fieldsSet = seen
	return err
}

func (v *ChainMetadata) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *ChainMetadata) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	if x, ok := reader.ReadString(1); ok {
		v.Name = x
	}
	if x := new(ChainType); reader.ReadEnum(2, x) {
		v.Type = *x
	}

	seen, err := reader.Reset(fieldNames_ChainMetadata)
	v.fieldsSet = seen
	return err
}

func (v *ChainParams) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *ChainParams) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	if x, ok := reader.ReadBytes(1); ok {
		v.Data = x
	}
	if x, ok := reader.ReadBool(2); ok {
		v.IsUpdate = x
	}

	seen, err := reader.Reset(fieldNames_ChainParams)
	v.fieldsSet = seen
	return err
}

func (v *CreateDataAccount) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *CreateDataAccount) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	var typ TransactionType
	if !reader.ReadEnum(1, &typ) {
		return fmt.Errorf("field Type: missing")
	} else if typ != TransactionTypeCreateDataAccount {
		return fmt.Errorf("field Type: want %v, got %v", TransactionTypeCreateDataAccount, typ)
	}

	if x, ok := reader.ReadUrl(2); ok {
		v.Url = x
	}
	if x, ok := reader.ReadUrl(3); ok {
		v.KeyBookUrl = x
	}
	if x, ok := reader.ReadUrl(4); ok {
		v.ManagerKeyBookUrl = x
	}
	if x, ok := reader.ReadBool(5); ok {
		v.Scratch = x
	}

	seen, err := reader.Reset(fieldNames_CreateDataAccount)
	v.fieldsSet = seen
	return err
}

func (v *CreateIdentity) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *CreateIdentity) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	var typ TransactionType
	if !reader.ReadEnum(1, &typ) {
		return fmt.Errorf("field Type: missing")
	} else if typ != TransactionTypeCreateIdentity {
		return fmt.Errorf("field Type: want %v, got %v", TransactionTypeCreateIdentity, typ)
	}

	if x, ok := reader.ReadUrl(2); ok {
		v.Url = x
	}
	if x, ok := reader.ReadBytes(3); ok {
		v.PublicKey = x
	}
	if x, ok := reader.ReadString(4); ok {
		v.KeyBookName = x
	}
	if x, ok := reader.ReadString(5); ok {
		v.KeyPageName = x
	}
	if x, ok := reader.ReadUrl(6); ok {
		v.Manager = x
	}

	seen, err := reader.Reset(fieldNames_CreateIdentity)
	v.fieldsSet = seen
	return err
}

func (v *CreateKeyBook) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *CreateKeyBook) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	var typ TransactionType
	if !reader.ReadEnum(1, &typ) {
		return fmt.Errorf("field Type: missing")
	} else if typ != TransactionTypeCreateKeyBook {
		return fmt.Errorf("field Type: want %v, got %v", TransactionTypeCreateKeyBook, typ)
	}

	if x, ok := reader.ReadUrl(2); ok {
		v.Url = x
	}
	for {
		if x, ok := reader.ReadUrl(3); ok {
			v.Pages = append(v.Pages, x)
		} else {
			break
		}
	}
	if x, ok := reader.ReadUrl(4); ok {
		v.Manager = x
	}

	seen, err := reader.Reset(fieldNames_CreateKeyBook)
	v.fieldsSet = seen
	return err
}

func (v *CreateKeyPage) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *CreateKeyPage) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	var typ TransactionType
	if !reader.ReadEnum(1, &typ) {
		return fmt.Errorf("field Type: missing")
	} else if typ != TransactionTypeCreateKeyPage {
		return fmt.Errorf("field Type: want %v, got %v", TransactionTypeCreateKeyPage, typ)
	}

	if x, ok := reader.ReadUrl(2); ok {
		v.Url = x
	}
	for {
		if x := new(KeySpecParams); reader.ReadValue(3, x.UnmarshalBinary) {
			v.Keys = append(v.Keys, x)
		} else {
			break
		}
	}
	if x, ok := reader.ReadUrl(4); ok {
		v.Manager = x
	}

	seen, err := reader.Reset(fieldNames_CreateKeyPage)
	v.fieldsSet = seen
	return err
}

func (v *CreateToken) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *CreateToken) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	var typ TransactionType
	if !reader.ReadEnum(1, &typ) {
		return fmt.Errorf("field Type: missing")
	} else if typ != TransactionTypeCreateToken {
		return fmt.Errorf("field Type: want %v, got %v", TransactionTypeCreateToken, typ)
	}

	if x, ok := reader.ReadUrl(2); ok {
		v.Url = x
	}
	if x, ok := reader.ReadUrl(3); ok {
		v.KeyBookUrl = x
	}
	if x, ok := reader.ReadString(4); ok {
		v.Symbol = x
	}
	if x, ok := reader.ReadUint(5); ok {
		v.Precision = x
	}
	if x, ok := reader.ReadUrl(6); ok {
		v.Properties = x
	}
	if x, ok := reader.ReadBigInt(7); ok {
		v.InitialSupply = *x
	}
	if x, ok := reader.ReadBool(8); ok {
		v.HasSupplyLimit = x
	}
	if x, ok := reader.ReadUrl(9); ok {
		v.Manager = x
	}

	seen, err := reader.Reset(fieldNames_CreateToken)
	v.fieldsSet = seen
	return err
}

func (v *CreateTokenAccount) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *CreateTokenAccount) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	var typ TransactionType
	if !reader.ReadEnum(1, &typ) {
		return fmt.Errorf("field Type: missing")
	} else if typ != TransactionTypeCreateTokenAccount {
		return fmt.Errorf("field Type: want %v, got %v", TransactionTypeCreateTokenAccount, typ)
	}

	if x, ok := reader.ReadUrl(2); ok {
		v.Url = x
	}
	if x, ok := reader.ReadUrl(3); ok {
		v.TokenUrl = x
	}
	if x, ok := reader.ReadUrl(4); ok {
		v.KeyBookUrl = x
	}
	if x, ok := reader.ReadBool(5); ok {
		v.Scratch = x
	}
	if x, ok := reader.ReadUrl(6); ok {
		v.Manager = x
	}

	seen, err := reader.Reset(fieldNames_CreateTokenAccount)
	v.fieldsSet = seen
	return err
}

func (v *DataAccount) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *DataAccount) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	var typ AccountType
	if !reader.ReadEnum(1, &typ) {
		return fmt.Errorf("field Type: missing")
	} else if typ != AccountTypeDataAccount {
		return fmt.Errorf("field Type: want %v, got %v", AccountTypeDataAccount, typ)
	}

	reader.ReadValue(2, v.AccountHeader.UnmarshalBinary)

	if x, ok := reader.ReadBool(3); ok {
		v.Scratch = x
	}

	seen, err := reader.Reset(fieldNames_DataAccount)
	v.fieldsSet = seen
	return err
}

func (v *DataEntry) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *DataEntry) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	for {
		if x, ok := reader.ReadBytes(1); ok {
			v.ExtIds = append(v.ExtIds, x)
		} else {
			break
		}
	}
	if x, ok := reader.ReadBytes(2); ok {
		v.Data = x
	}

	seen, err := reader.Reset(fieldNames_DataEntry)
	v.fieldsSet = seen
	return err
}

func (v *DirectoryIndexMetadata) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *DirectoryIndexMetadata) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	if x, ok := reader.ReadUint(1); ok {
		v.Count = x
	}

	seen, err := reader.Reset(fieldNames_DirectoryIndexMetadata)
	v.fieldsSet = seen
	return err
}

func (v *DirectoryQueryResult) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *DirectoryQueryResult) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	for {
		if x, ok := reader.ReadString(1); ok {
			v.Entries = append(v.Entries, x)
		} else {
			break
		}
	}
	for {
		if x := new(Object); reader.ReadValue(2, x.UnmarshalBinary) {
			v.ExpandedEntries = append(v.ExpandedEntries, x)
		} else {
			break
		}
	}
	if x, ok := reader.ReadUint(3); ok {
		v.Total = x
	}

	seen, err := reader.Reset(fieldNames_DirectoryQueryResult)
	v.fieldsSet = seen
	return err
}

func (v *ED25519Signature) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *ED25519Signature) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	var typ SignatureType
	if !reader.ReadEnum(1, &typ) {
		return fmt.Errorf("field Type: missing")
	} else if typ != SignatureTypeED25519 {
		return fmt.Errorf("field Type: want %v, got %v", SignatureTypeED25519, typ)
	}

	if x, ok := reader.ReadBytes(2); ok {
		v.PublicKey = x
	}
	if x, ok := reader.ReadBytes(3); ok {
		v.Signature = x
	}

	seen, err := reader.Reset(fieldNames_ED25519Signature)
	v.fieldsSet = seen
	return err
}

func (v *EmptyResult) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *EmptyResult) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	var typ TransactionType
	if !reader.ReadEnum(1, &typ) {
		return fmt.Errorf("field Type: missing")
	} else if typ != TransactionTypeUnknown {
		return fmt.Errorf("field Type: want %v, got %v", TransactionTypeUnknown, typ)
	}

	seen, err := reader.Reset(fieldNames_EmptyResult)
	v.fieldsSet = seen
	return err
}

func (v *Envelope) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *Envelope) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	for {
		ok := reader.ReadValue(1, func(b []byte) error {
			x, err := UnmarshalSignature(b)
			if err == nil {
				v.Signatures = append(v.Signatures, x)
			}
			return err
		})
		if !ok {
			break
		}
	}
	if x, ok := reader.ReadBytes(2); ok {
		v.TxHash = x
	}
	if x := new(Transaction); reader.ReadValue(3, x.UnmarshalBinary) {
		v.Transaction = x
	}

	seen, err := reader.Reset(fieldNames_Envelope)
	v.fieldsSet = seen
	return err
}

func (v *InternalGenesis) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *InternalGenesis) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	var typ TransactionType
	if !reader.ReadEnum(1, &typ) {
		return fmt.Errorf("field Type: missing")
	} else if typ != TransactionTypeInternalGenesis {
		return fmt.Errorf("field Type: want %v, got %v", TransactionTypeInternalGenesis, typ)
	}

	seen, err := reader.Reset(fieldNames_InternalGenesis)
	v.fieldsSet = seen
	return err
}

func (v *InternalLedger) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *InternalLedger) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	var typ AccountType
	if !reader.ReadEnum(1, &typ) {
		return fmt.Errorf("field Type: missing")
	} else if typ != AccountTypeInternalLedger {
		return fmt.Errorf("field Type: want %v, got %v", AccountTypeInternalLedger, typ)
	}

	reader.ReadValue(2, v.AccountHeader.UnmarshalBinary)

	if x, ok := reader.ReadInt(3); ok {
		v.Index = x
	}
	if x, ok := reader.ReadTime(4); ok {
		v.Timestamp = x
	}
	if x := new(SyntheticLedger); reader.ReadValue(5, x.UnmarshalBinary) {
		v.Synthetic = *x
	}
	if x, ok := reader.ReadUint(6); ok {
		v.PendingOracle = x
	}
	if x, ok := reader.ReadUint(7); ok {
		v.ActiveOracle = x
	}
	for {
		if x := new(AnchorMetadata); reader.ReadValue(8, x.UnmarshalBinary) {
			v.Updates = append(v.Updates, *x)
		} else {
			break
		}
	}

	seen, err := reader.Reset(fieldNames_InternalLedger)
	v.fieldsSet = seen
	return err
}

func (v *InternalSendTransactions) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *InternalSendTransactions) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	var typ TransactionType
	if !reader.ReadEnum(1, &typ) {
		return fmt.Errorf("field Type: missing")
	} else if typ != TransactionTypeInternalSendTransactions {
		return fmt.Errorf("field Type: want %v, got %v", TransactionTypeInternalSendTransactions, typ)
	}

	for {
		if x := new(SendTransaction); reader.ReadValue(2, x.UnmarshalBinary) {
			v.Transactions = append(v.Transactions, *x)
		} else {
			break
		}
	}

	seen, err := reader.Reset(fieldNames_InternalSendTransactions)
	v.fieldsSet = seen
	return err
}

func (v *InternalTransactionsSent) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *InternalTransactionsSent) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	var typ TransactionType
	if !reader.ReadEnum(1, &typ) {
		return fmt.Errorf("field Type: missing")
	} else if typ != TransactionTypeInternalTransactionsSent {
		return fmt.Errorf("field Type: want %v, got %v", TransactionTypeInternalTransactionsSent, typ)
	}

	for {
		if x, ok := reader.ReadHash(2); ok {
			v.Transactions = append(v.Transactions, *x)
		} else {
			break
		}
	}

	seen, err := reader.Reset(fieldNames_InternalTransactionsSent)
	v.fieldsSet = seen
	return err
}

func (v *InternalTransactionsSigned) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *InternalTransactionsSigned) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	var typ TransactionType
	if !reader.ReadEnum(1, &typ) {
		return fmt.Errorf("field Type: missing")
	} else if typ != TransactionTypeInternalTransactionsSigned {
		return fmt.Errorf("field Type: want %v, got %v", TransactionTypeInternalTransactionsSigned, typ)
	}

	for {
		if x := new(TransactionSignature); reader.ReadValue(2, x.UnmarshalBinary) {
			v.Transactions = append(v.Transactions, *x)
		} else {
			break
		}
	}

	seen, err := reader.Reset(fieldNames_InternalTransactionsSigned)
	v.fieldsSet = seen
	return err
}

func (v *IssueTokens) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *IssueTokens) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	var typ TransactionType
	if !reader.ReadEnum(1, &typ) {
		return fmt.Errorf("field Type: missing")
	} else if typ != TransactionTypeIssueTokens {
		return fmt.Errorf("field Type: want %v, got %v", TransactionTypeIssueTokens, typ)
	}

	if x, ok := reader.ReadUrl(2); ok {
		v.Recipient = x
	}
	if x, ok := reader.ReadBigInt(3); ok {
		v.Amount = *x
	}

	seen, err := reader.Reset(fieldNames_IssueTokens)
	v.fieldsSet = seen
	return err
}

func (v *KeyBook) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *KeyBook) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	var typ AccountType
	if !reader.ReadEnum(1, &typ) {
		return fmt.Errorf("field Type: missing")
	} else if typ != AccountTypeKeyBook {
		return fmt.Errorf("field Type: want %v, got %v", AccountTypeKeyBook, typ)
	}

	reader.ReadValue(2, v.AccountHeader.UnmarshalBinary)

	for {
		if x, ok := reader.ReadUrl(3); ok {
			v.Pages = append(v.Pages, x)
		} else {
			break
		}
	}

	seen, err := reader.Reset(fieldNames_KeyBook)
	v.fieldsSet = seen
	return err
}

func (v *KeyPage) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *KeyPage) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	var typ AccountType
	if !reader.ReadEnum(1, &typ) {
		return fmt.Errorf("field Type: missing")
	} else if typ != AccountTypeKeyPage {
		return fmt.Errorf("field Type: want %v, got %v", AccountTypeKeyPage, typ)
	}

	reader.ReadValue(2, v.AccountHeader.UnmarshalBinary)

	if x, ok := reader.ReadBigInt(3); ok {
		v.CreditBalance = *x
	}
	if x, ok := reader.ReadUint(4); ok {
		v.Threshold = x
	}
	for {
		if x := new(KeySpec); reader.ReadValue(5, x.UnmarshalBinary) {
			v.Keys = append(v.Keys, x)
		} else {
			break
		}
	}

	seen, err := reader.Reset(fieldNames_KeyPage)
	v.fieldsSet = seen
	return err
}

func (v *KeySpec) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *KeySpec) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	if x, ok := reader.ReadBytes(1); ok {
		v.PublicKey = x
	}
	if x, ok := reader.ReadUint(2); ok {
		v.Nonce = x
	}
	if x, ok := reader.ReadUrl(3); ok {
		v.Owner = x
	}

	seen, err := reader.Reset(fieldNames_KeySpec)
	v.fieldsSet = seen
	return err
}

func (v *KeySpecParams) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *KeySpecParams) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	if x, ok := reader.ReadBytes(1); ok {
		v.PublicKey = x
	}

	seen, err := reader.Reset(fieldNames_KeySpecParams)
	v.fieldsSet = seen
	return err
}

func (v *LegacyED25519Signature) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *LegacyED25519Signature) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	var typ SignatureType
	if !reader.ReadEnum(1, &typ) {
		return fmt.Errorf("field Type: missing")
	} else if typ != SignatureTypeLegacyED25519 {
		return fmt.Errorf("field Type: want %v, got %v", SignatureTypeLegacyED25519, typ)
	}

	if x, ok := reader.ReadUint(2); ok {
		v.Nonce = x
	}
	if x, ok := reader.ReadBytes(3); ok {
		v.PublicKey = x
	}
	if x, ok := reader.ReadBytes(4); ok {
		v.Signature = x
	}

	seen, err := reader.Reset(fieldNames_LegacyED25519Signature)
	v.fieldsSet = seen
	return err
}

func (v *LiteDataAccount) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *LiteDataAccount) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	var typ AccountType
	if !reader.ReadEnum(1, &typ) {
		return fmt.Errorf("field Type: missing")
	} else if typ != AccountTypeLiteDataAccount {
		return fmt.Errorf("field Type: want %v, got %v", AccountTypeLiteDataAccount, typ)
	}

	reader.ReadValue(2, v.AccountHeader.UnmarshalBinary)

	if x, ok := reader.ReadBytes(3); ok {
		v.Tail = x
	}

	seen, err := reader.Reset(fieldNames_LiteDataAccount)
	v.fieldsSet = seen
	return err
}

func (v *LiteIdentity) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *LiteIdentity) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	var typ AccountType
	if !reader.ReadEnum(1, &typ) {
		return fmt.Errorf("field Type: missing")
	} else if typ != AccountTypeLiteIdentity {
		return fmt.Errorf("field Type: want %v, got %v", AccountTypeLiteIdentity, typ)
	}

	reader.ReadValue(2, v.AccountHeader.UnmarshalBinary)

	seen, err := reader.Reset(fieldNames_LiteIdentity)
	v.fieldsSet = seen
	return err
}

func (v *LiteTokenAccount) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *LiteTokenAccount) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	var typ AccountType
	if !reader.ReadEnum(1, &typ) {
		return fmt.Errorf("field Type: missing")
	} else if typ != AccountTypeLiteTokenAccount {
		return fmt.Errorf("field Type: want %v, got %v", AccountTypeLiteTokenAccount, typ)
	}

	reader.ReadValue(2, v.AccountHeader.UnmarshalBinary)

	if x, ok := reader.ReadUrl(3); ok {
		v.TokenUrl = x
	}
	if x, ok := reader.ReadBigInt(4); ok {
		v.Balance = *x
	}
	if x, ok := reader.ReadUint(5); ok {
		v.Nonce = x
	}
	if x, ok := reader.ReadBigInt(6); ok {
		v.CreditBalance = *x
	}

	seen, err := reader.Reset(fieldNames_LiteTokenAccount)
	v.fieldsSet = seen
	return err
}

func (v *MetricsRequest) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *MetricsRequest) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	if x, ok := reader.ReadString(1); ok {
		v.Metric = x
	}
	if x, ok := reader.ReadDuration(2); ok {
		v.Duration = x
	}

	seen, err := reader.Reset(fieldNames_MetricsRequest)
	v.fieldsSet = seen
	return err
}

func (v *Object) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *Object) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	if x, ok := reader.ReadBytes(1); ok {
		v.Entry = x
	}
	if x, ok := reader.ReadUint(2); ok {
		v.Height = x
	}
	for {
		if x, ok := reader.ReadBytes(3); ok {
			v.Roots = append(v.Roots, x)
		} else {
			break
		}
	}

	seen, err := reader.Reset(fieldNames_Object)
	v.fieldsSet = seen
	return err
}

func (v *ObjectMetadata) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *ObjectMetadata) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	if x := new(ObjectType); reader.ReadEnum(1, x) {
		v.Type = *x
	}
	for {
		if x := new(ChainMetadata); reader.ReadValue(2, x.UnmarshalBinary) {
			v.Chains = append(v.Chains, *x)
		} else {
			break
		}
	}

	seen, err := reader.Reset(fieldNames_ObjectMetadata)
	v.fieldsSet = seen
	return err
}

func (v *PendingTransactionState) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *PendingTransactionState) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	var typ AccountType
	if !reader.ReadEnum(1, &typ) {
		return fmt.Errorf("field Type: missing")
	} else if typ != AccountTypePendingTransaction {
		return fmt.Errorf("field Type: want %v, got %v", AccountTypePendingTransaction, typ)
	}

	reader.ReadValue(2, v.AccountHeader.UnmarshalBinary)

	for {
		ok := reader.ReadValue(3, func(b []byte) error {
			x, err := UnmarshalSignature(b)
			if err == nil {
				v.Signature = append(v.Signature, x)
			}
			return err
		})
		if !ok {
			break
		}
	}
	if x := new(TxState); reader.ReadValue(4, x.UnmarshalBinary) {
		v.TransactionState = x
	}
	if x, ok := reader.ReadBytes(5); ok {
		v.Status = x
	}

	seen, err := reader.Reset(fieldNames_PendingTransactionState)
	v.fieldsSet = seen
	return err
}

func (v *Receipt) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *Receipt) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	if x, ok := reader.ReadBytes(1); ok {
		v.Start = x
	}
	for {
		if x := new(ReceiptEntry); reader.ReadValue(2, x.UnmarshalBinary) {
			v.Entries = append(v.Entries, *x)
		} else {
			break
		}
	}

	seen, err := reader.Reset(fieldNames_Receipt)
	v.fieldsSet = seen
	return err
}

func (v *ReceiptEntry) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *ReceiptEntry) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	if x, ok := reader.ReadBool(1); ok {
		v.Right = x
	}
	if x, ok := reader.ReadBytes(2); ok {
		v.Hash = x
	}

	seen, err := reader.Reset(fieldNames_ReceiptEntry)
	v.fieldsSet = seen
	return err
}

func (v *RemoveManager) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *RemoveManager) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	var typ TransactionType
	if !reader.ReadEnum(1, &typ) {
		return fmt.Errorf("field Type: missing")
	} else if typ != TransactionTypeRemoveManager {
		return fmt.Errorf("field Type: want %v, got %v", TransactionTypeRemoveManager, typ)
	}

	seen, err := reader.Reset(fieldNames_RemoveManager)
	v.fieldsSet = seen
	return err
}

func (v *RequestDataEntry) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *RequestDataEntry) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	if x, ok := reader.ReadUrl(1); ok {
		v.Url = x
	}
	if x, ok := reader.ReadHash(2); ok {
		v.EntryHash = *x
	}

	seen, err := reader.Reset(fieldNames_RequestDataEntry)
	v.fieldsSet = seen
	return err
}

func (v *RequestDataEntrySet) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *RequestDataEntrySet) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	if x, ok := reader.ReadUrl(1); ok {
		v.Url = x
	}
	if x, ok := reader.ReadUint(2); ok {
		v.Start = x
	}
	if x, ok := reader.ReadUint(3); ok {
		v.Count = x
	}
	if x, ok := reader.ReadBool(4); ok {
		v.ExpandChains = x
	}

	seen, err := reader.Reset(fieldNames_RequestDataEntrySet)
	v.fieldsSet = seen
	return err
}

func (v *ResponseDataEntry) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *ResponseDataEntry) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	if x, ok := reader.ReadHash(1); ok {
		v.EntryHash = *x
	}
	if x := new(DataEntry); reader.ReadValue(2, x.UnmarshalBinary) {
		v.Entry = *x
	}

	seen, err := reader.Reset(fieldNames_ResponseDataEntry)
	v.fieldsSet = seen
	return err
}

func (v *ResponseDataEntrySet) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *ResponseDataEntrySet) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	for {
		if x := new(ResponseDataEntry); reader.ReadValue(1, x.UnmarshalBinary) {
			v.DataEntries = append(v.DataEntries, *x)
		} else {
			break
		}
	}
	if x, ok := reader.ReadUint(2); ok {
		v.Total = x
	}

	seen, err := reader.Reset(fieldNames_ResponseDataEntrySet)
	v.fieldsSet = seen
	return err
}

func (v *SegWitDataEntry) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *SegWitDataEntry) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	var typ TransactionType
	if !reader.ReadEnum(1, &typ) {
		return fmt.Errorf("field Type: missing")
	} else if typ != TransactionTypeSegWitDataEntry {
		return fmt.Errorf("field Type: want %v, got %v", TransactionTypeSegWitDataEntry, typ)
	}

	if x, ok := reader.ReadHash(2); ok {
		v.Cause = *x
	}
	if x, ok := reader.ReadUrl(3); ok {
		v.EntryUrl = x
	}
	if x, ok := reader.ReadHash(4); ok {
		v.EntryHash = *x
	}

	seen, err := reader.Reset(fieldNames_SegWitDataEntry)
	v.fieldsSet = seen
	return err
}

func (v *SendTokens) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *SendTokens) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	var typ TransactionType
	if !reader.ReadEnum(1, &typ) {
		return fmt.Errorf("field Type: missing")
	} else if typ != TransactionTypeSendTokens {
		return fmt.Errorf("field Type: want %v, got %v", TransactionTypeSendTokens, typ)
	}

	if x, ok := reader.ReadHash(2); ok {
		v.Hash = *x
	}
	if x, ok := reader.ReadBytes(3); ok {
		v.Meta = x
	}
	for {
		if x := new(TokenRecipient); reader.ReadValue(4, x.UnmarshalBinary) {
			v.To = append(v.To, x)
		} else {
			break
		}
	}

	seen, err := reader.Reset(fieldNames_SendTokens)
	v.fieldsSet = seen
	return err
}

func (v *SendTransaction) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *SendTransaction) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	reader.ReadValue(1, func(b []byte) error {
		x, err := UnmarshalTransaction(b)
		if err == nil {
			v.Payload = x
		}
		return err
	})
	if x, ok := reader.ReadUrl(2); ok {
		v.Recipient = x
	}

	seen, err := reader.Reset(fieldNames_SendTransaction)
	v.fieldsSet = seen
	return err
}

func (v *SignPending) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *SignPending) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	var typ TransactionType
	if !reader.ReadEnum(1, &typ) {
		return fmt.Errorf("field Type: missing")
	} else if typ != TransactionTypeSignPending {
		return fmt.Errorf("field Type: want %v, got %v", TransactionTypeSignPending, typ)
	}

	seen, err := reader.Reset(fieldNames_SignPending)
	v.fieldsSet = seen
	return err
}

func (v *SyntheticAnchor) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *SyntheticAnchor) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	var typ TransactionType
	if !reader.ReadEnum(1, &typ) {
		return fmt.Errorf("field Type: missing")
	} else if typ != TransactionTypeSyntheticAnchor {
		return fmt.Errorf("field Type: want %v, got %v", TransactionTypeSyntheticAnchor, typ)
	}

	if x, ok := reader.ReadUrl(2); ok {
		v.Source = x
	}
	if x, ok := reader.ReadBool(3); ok {
		v.Major = x
	}
	if x, ok := reader.ReadHash(4); ok {
		v.RootAnchor = *x
	}
	if x, ok := reader.ReadUint(5); ok {
		v.RootIndex = x
	}
	if x, ok := reader.ReadUint(6); ok {
		v.Block = x
	}
	if x, ok := reader.ReadUint(7); ok {
		v.SourceIndex = x
	}
	if x, ok := reader.ReadUint(8); ok {
		v.SourceBlock = x
	}
	if x, ok := reader.ReadUint(9); ok {
		v.AcmeOraclePrice = x
	}
	if x := new(Receipt); reader.ReadValue(10, x.UnmarshalBinary) {
		v.Receipt = *x
	}

	seen, err := reader.Reset(fieldNames_SyntheticAnchor)
	v.fieldsSet = seen
	return err
}

func (v *SyntheticBurnTokens) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *SyntheticBurnTokens) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	var typ TransactionType
	if !reader.ReadEnum(1, &typ) {
		return fmt.Errorf("field Type: missing")
	} else if typ != TransactionTypeSyntheticBurnTokens {
		return fmt.Errorf("field Type: want %v, got %v", TransactionTypeSyntheticBurnTokens, typ)
	}

	if x, ok := reader.ReadHash(2); ok {
		v.Cause = *x
	}
	if x, ok := reader.ReadBigInt(3); ok {
		v.Amount = *x
	}

	seen, err := reader.Reset(fieldNames_SyntheticBurnTokens)
	v.fieldsSet = seen
	return err
}

func (v *SyntheticCreateChain) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *SyntheticCreateChain) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	var typ TransactionType
	if !reader.ReadEnum(1, &typ) {
		return fmt.Errorf("field Type: missing")
	} else if typ != TransactionTypeSyntheticCreateChain {
		return fmt.Errorf("field Type: want %v, got %v", TransactionTypeSyntheticCreateChain, typ)
	}

	if x, ok := reader.ReadHash(2); ok {
		v.Cause = *x
	}
	for {
		if x := new(ChainParams); reader.ReadValue(3, x.UnmarshalBinary) {
			v.Chains = append(v.Chains, *x)
		} else {
			break
		}
	}

	seen, err := reader.Reset(fieldNames_SyntheticCreateChain)
	v.fieldsSet = seen
	return err
}

func (v *SyntheticDepositCredits) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *SyntheticDepositCredits) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	var typ TransactionType
	if !reader.ReadEnum(1, &typ) {
		return fmt.Errorf("field Type: missing")
	} else if typ != TransactionTypeSyntheticDepositCredits {
		return fmt.Errorf("field Type: want %v, got %v", TransactionTypeSyntheticDepositCredits, typ)
	}

	if x, ok := reader.ReadHash(2); ok {
		v.Cause = *x
	}
	if x, ok := reader.ReadUint(3); ok {
		v.Amount = x
	}

	seen, err := reader.Reset(fieldNames_SyntheticDepositCredits)
	v.fieldsSet = seen
	return err
}

func (v *SyntheticDepositTokens) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *SyntheticDepositTokens) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	var typ TransactionType
	if !reader.ReadEnum(1, &typ) {
		return fmt.Errorf("field Type: missing")
	} else if typ != TransactionTypeSyntheticDepositTokens {
		return fmt.Errorf("field Type: want %v, got %v", TransactionTypeSyntheticDepositTokens, typ)
	}

	if x, ok := reader.ReadHash(2); ok {
		v.Cause = *x
	}
	if x, ok := reader.ReadUrl(3); ok {
		v.Token = x
	}
	if x, ok := reader.ReadBigInt(4); ok {
		v.Amount = *x
	}

	seen, err := reader.Reset(fieldNames_SyntheticDepositTokens)
	v.fieldsSet = seen
	return err
}

func (v *SyntheticLedger) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *SyntheticLedger) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	if x, ok := reader.ReadUint(1); ok {
		v.Nonce = x
	}
	for {
		if x, ok := reader.ReadHash(2); ok {
			v.Produced = append(v.Produced, *x)
		} else {
			break
		}
	}
	for {
		if x, ok := reader.ReadHash(3); ok {
			v.Unsigned = append(v.Unsigned, *x)
		} else {
			break
		}
	}
	for {
		if x, ok := reader.ReadHash(4); ok {
			v.Unsent = append(v.Unsent, *x)
		} else {
			break
		}
	}

	seen, err := reader.Reset(fieldNames_SyntheticLedger)
	v.fieldsSet = seen
	return err
}

func (v *SyntheticMirror) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *SyntheticMirror) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	var typ TransactionType
	if !reader.ReadEnum(1, &typ) {
		return fmt.Errorf("field Type: missing")
	} else if typ != TransactionTypeSyntheticMirror {
		return fmt.Errorf("field Type: want %v, got %v", TransactionTypeSyntheticMirror, typ)
	}

	for {
		if x := new(AnchoredRecord); reader.ReadValue(2, x.UnmarshalBinary) {
			v.Objects = append(v.Objects, *x)
		} else {
			break
		}
	}

	seen, err := reader.Reset(fieldNames_SyntheticMirror)
	v.fieldsSet = seen
	return err
}

func (v *SyntheticWriteData) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *SyntheticWriteData) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	var typ TransactionType
	if !reader.ReadEnum(1, &typ) {
		return fmt.Errorf("field Type: missing")
	} else if typ != TransactionTypeSyntheticWriteData {
		return fmt.Errorf("field Type: want %v, got %v", TransactionTypeSyntheticWriteData, typ)
	}

	if x, ok := reader.ReadHash(2); ok {
		v.Cause = *x
	}
	if x := new(DataEntry); reader.ReadValue(3, x.UnmarshalBinary) {
		v.Entry = *x
	}

	seen, err := reader.Reset(fieldNames_SyntheticWriteData)
	v.fieldsSet = seen
	return err
}

func (v *TokenAccount) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *TokenAccount) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	var typ AccountType
	if !reader.ReadEnum(1, &typ) {
		return fmt.Errorf("field Type: missing")
	} else if typ != AccountTypeTokenAccount {
		return fmt.Errorf("field Type: want %v, got %v", AccountTypeTokenAccount, typ)
	}

	reader.ReadValue(2, v.AccountHeader.UnmarshalBinary)

	if x, ok := reader.ReadUrl(3); ok {
		v.TokenUrl = x
	}
	if x, ok := reader.ReadBigInt(4); ok {
		v.Balance = *x
	}
	if x, ok := reader.ReadBool(5); ok {
		v.Scratch = x
	}

	seen, err := reader.Reset(fieldNames_TokenAccount)
	v.fieldsSet = seen
	return err
}

func (v *TokenIssuer) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *TokenIssuer) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	var typ AccountType
	if !reader.ReadEnum(1, &typ) {
		return fmt.Errorf("field Type: missing")
	} else if typ != AccountTypeTokenIssuer {
		return fmt.Errorf("field Type: want %v, got %v", AccountTypeTokenIssuer, typ)
	}

	reader.ReadValue(2, v.AccountHeader.UnmarshalBinary)

	if x, ok := reader.ReadString(3); ok {
		v.Symbol = x
	}
	if x, ok := reader.ReadUint(4); ok {
		v.Precision = x
	}
	if x, ok := reader.ReadUrl(5); ok {
		v.Properties = x
	}
	if x, ok := reader.ReadBigInt(6); ok {
		v.Supply = *x
	}
	if x, ok := reader.ReadBool(7); ok {
		v.HasSupplyLimit = x
	}

	seen, err := reader.Reset(fieldNames_TokenIssuer)
	v.fieldsSet = seen
	return err
}

func (v *TokenRecipient) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *TokenRecipient) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	if x, ok := reader.ReadUrl(1); ok {
		v.Url = x
	}
	if x, ok := reader.ReadBigInt(2); ok {
		v.Amount = *x
	}

	seen, err := reader.Reset(fieldNames_TokenRecipient)
	v.fieldsSet = seen
	return err
}

func (v *Transaction) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *Transaction) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	reader.ReadValue(1, v.TransactionHeader.UnmarshalBinary)

	reader.ReadValue(2, func(b []byte) error {
		x, err := UnmarshalTransaction(b)
		if err == nil {
			v.Body = x
		}
		return err
	})

	seen, err := reader.Reset(fieldNames_Transaction)
	v.fieldsSet = seen
	return err
}

func (v *TransactionHeader) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *TransactionHeader) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	if x, ok := reader.ReadUrl(1); ok {
		v.Origin = x
	}
	if x, ok := reader.ReadUint(2); ok {
		v.KeyPageHeight = x
	}
	if x, ok := reader.ReadUint(3); ok {
		v.KeyPageIndex = x
	}
	if x, ok := reader.ReadUint(4); ok {
		v.Nonce = x
	}

	seen, err := reader.Reset(fieldNames_TransactionHeader)
	v.fieldsSet = seen
	return err
}

func (v *TransactionSignature) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *TransactionSignature) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	if x, ok := reader.ReadHash(1); ok {
		v.Transaction = *x
	}
	reader.ReadValue(2, func(b []byte) error {
		x, err := UnmarshalSignature(b)
		if err == nil {
			v.Signature = x
		}
		return err
	})

	seen, err := reader.Reset(fieldNames_TransactionSignature)
	v.fieldsSet = seen
	return err
}

func (v *TransactionState) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *TransactionState) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	var typ AccountType
	if !reader.ReadEnum(1, &typ) {
		return fmt.Errorf("field Type: missing")
	} else if typ != AccountTypeTransaction {
		return fmt.Errorf("field Type: want %v, got %v", AccountTypeTransaction, typ)
	}

	reader.ReadValue(2, v.AccountHeader.UnmarshalBinary)

	reader.ReadValue(3, v.TxState.UnmarshalBinary)

	seen, err := reader.Reset(fieldNames_TransactionState)
	v.fieldsSet = seen
	return err
}

func (v *TransactionStatus) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *TransactionStatus) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	if x, ok := reader.ReadBool(1); ok {
		v.Remote = x
	}
	if x, ok := reader.ReadBool(2); ok {
		v.Delivered = x
	}
	if x, ok := reader.ReadBool(3); ok {
		v.Pending = x
	}
	if x, ok := reader.ReadUint(4); ok {
		v.Code = x
	}
	if x, ok := reader.ReadString(5); ok {
		v.Message = x
	}
	reader.ReadValue(6, func(b []byte) error {
		x, err := UnmarshalTransactionResult(b)
		if err == nil {
			v.Result = x
		}
		return err
	})

	seen, err := reader.Reset(fieldNames_TransactionStatus)
	v.fieldsSet = seen
	return err
}

func (v *TxState) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *TxState) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	if x := new(TransactionHeader); reader.ReadValue(1, x.UnmarshalBinary) {
		v.SigInfo = x
	}
	reader.ReadValue(2, func(b []byte) error {
		x, err := UnmarshalTransaction(b)
		if err == nil {
			v.Transaction = x
		}
		return err
	})

	seen, err := reader.Reset(fieldNames_TxState)
	v.fieldsSet = seen
	return err
}

func (v *UpdateKeyPage) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *UpdateKeyPage) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	var typ TransactionType
	if !reader.ReadEnum(1, &typ) {
		return fmt.Errorf("field Type: missing")
	} else if typ != TransactionTypeUpdateKeyPage {
		return fmt.Errorf("field Type: want %v, got %v", TransactionTypeUpdateKeyPage, typ)
	}

	if x := new(KeyPageOperation); reader.ReadEnum(2, x) {
		v.Operation = *x
	}
	if x, ok := reader.ReadBytes(3); ok {
		v.Key = x
	}
	if x, ok := reader.ReadBytes(4); ok {
		v.NewKey = x
	}
	if x, ok := reader.ReadUrl(5); ok {
		v.Owner = x
	}
	if x, ok := reader.ReadUint(6); ok {
		v.Threshold = x
	}

	seen, err := reader.Reset(fieldNames_UpdateKeyPage)
	v.fieldsSet = seen
	return err
}

func (v *UpdateManager) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *UpdateManager) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	var typ TransactionType
	if !reader.ReadEnum(1, &typ) {
		return fmt.Errorf("field Type: missing")
	} else if typ != TransactionTypeUpdateManager {
		return fmt.Errorf("field Type: want %v, got %v", TransactionTypeUpdateManager, typ)
	}

	if x, ok := reader.ReadUrl(2); ok {
		v.ManagerKeyBook = x
	}

	seen, err := reader.Reset(fieldNames_UpdateManager)
	v.fieldsSet = seen
	return err
}

func (v *WriteData) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *WriteData) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	var typ TransactionType
	if !reader.ReadEnum(1, &typ) {
		return fmt.Errorf("field Type: missing")
	} else if typ != TransactionTypeWriteData {
		return fmt.Errorf("field Type: want %v, got %v", TransactionTypeWriteData, typ)
	}

	if x := new(DataEntry); reader.ReadValue(2, x.UnmarshalBinary) {
		v.Entry = *x
	}

	seen, err := reader.Reset(fieldNames_WriteData)
	v.fieldsSet = seen
	return err
}

func (v *WriteDataResult) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *WriteDataResult) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	var typ TransactionType
	if !reader.ReadEnum(1, &typ) {
		return fmt.Errorf("field Type: missing")
	} else if typ != TransactionTypeWriteData {
		return fmt.Errorf("field Type: want %v, got %v", TransactionTypeWriteData, typ)
	}

	if x, ok := reader.ReadHash(2); ok {
		v.EntryHash = *x
	}
	if x, ok := reader.ReadUrl(3); ok {
		v.AccountUrl = x
	}
	if x, ok := reader.ReadBytes(4); ok {
		v.AccountID = x
	}

	seen, err := reader.Reset(fieldNames_WriteDataResult)
	v.fieldsSet = seen
	return err
}

func (v *WriteDataTo) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *WriteDataTo) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	var typ TransactionType
	if !reader.ReadEnum(1, &typ) {
		return fmt.Errorf("field Type: missing")
	} else if typ != TransactionTypeWriteDataTo {
		return fmt.Errorf("field Type: want %v, got %v", TransactionTypeWriteDataTo, typ)
	}

	if x, ok := reader.ReadUrl(2); ok {
		v.Recipient = x
	}
	if x := new(DataEntry); reader.ReadValue(3, x.UnmarshalBinary) {
		v.Entry = *x
	}

	seen, err := reader.Reset(fieldNames_WriteDataTo)
	v.fieldsSet = seen
	return err
}

func (v *ADI) MarshalJSON() ([]byte, error) {
	u := struct {
		Type           AccountType `json:"type"`
		Url            *url.URL    `json:"url,omitempty"`
		KeyBook        *url.URL    `json:"keyBook,omitempty"`
		ManagerKeyBook *url.URL    `json:"managerKeyBook,omitempty"`
	}{}
	u.Type = v.Type()
	u.Url = v.AccountHeader.Url
	u.KeyBook = v.AccountHeader.KeyBook
	u.ManagerKeyBook = v.AccountHeader.ManagerKeyBook
	return json.Marshal(&u)
}

func (v *AcmeFaucet) MarshalJSON() ([]byte, error) {
	u := struct {
		Type TransactionType `json:"type"`
		Url  *url.URL        `json:"url,omitempty"`
	}{}
	u.Type = v.Type()
	u.Url = v.Url
	return json.Marshal(&u)
}

func (v *AddCredits) MarshalJSON() ([]byte, error) {
	u := struct {
		Type      TransactionType `json:"type"`
		Recipient *url.URL        `json:"recipient,omitempty"`
		Amount    *string         `json:"amount,omitempty"`
	}{}
	u.Type = v.Type()
	u.Recipient = v.Recipient
	u.Amount = encoding.BigintToJSON(&v.Amount)
	return json.Marshal(&u)
}

func (v *Anchor) MarshalJSON() ([]byte, error) {
	u := struct {
		Type           AccountType `json:"type"`
		Url            *url.URL    `json:"url,omitempty"`
		KeyBook        *url.URL    `json:"keyBook,omitempty"`
		ManagerKeyBook *url.URL    `json:"managerKeyBook,omitempty"`
	}{}
	u.Type = v.Type()
	u.Url = v.AccountHeader.Url
	u.KeyBook = v.AccountHeader.KeyBook
	u.ManagerKeyBook = v.AccountHeader.ManagerKeyBook
	return json.Marshal(&u)
}

func (v *AnchorMetadata) MarshalJSON() ([]byte, error) {
	u := struct {
		Name        string    `json:"name,omitempty"`
		Type        ChainType `json:"type,omitempty"`
		Account     *url.URL  `json:"account,omitempty"`
		Index       uint64    `json:"index,omitempty"`
		SourceIndex uint64    `json:"sourceIndex,omitempty"`
		SourceBlock uint64    `json:"sourceBlock,omitempty"`
		Entry       *string   `json:"entry,omitempty"`
	}{}
	u.Name = v.ChainMetadata.Name
	u.Type = v.ChainMetadata.Type
	u.Account = v.Account
	u.Index = v.Index
	u.SourceIndex = v.SourceIndex
	u.SourceBlock = v.SourceBlock
	u.Entry = encoding.BytesToJSON(v.Entry)
	return json.Marshal(&u)
}

func (v *AnchoredRecord) MarshalJSON() ([]byte, error) {
	u := struct {
		Record *string `json:"record,omitempty"`
		Anchor string  `json:"anchor,omitempty"`
	}{}
	u.Record = encoding.BytesToJSON(v.Record)
	u.Anchor = encoding.ChainToJSON(v.Anchor)
	return json.Marshal(&u)
}

func (v *BurnTokens) MarshalJSON() ([]byte, error) {
	u := struct {
		Type   TransactionType `json:"type"`
		Amount *string         `json:"amount,omitempty"`
	}{}
	u.Type = v.Type()
	u.Amount = encoding.BigintToJSON(&v.Amount)
	return json.Marshal(&u)
}

func (v *ChainParams) MarshalJSON() ([]byte, error) {
	u := struct {
		Data     *string `json:"data,omitempty"`
		IsUpdate bool    `json:"isUpdate,omitempty"`
	}{}
	u.Data = encoding.BytesToJSON(v.Data)
	u.IsUpdate = v.IsUpdate
	return json.Marshal(&u)
}

func (v *CreateDataAccount) MarshalJSON() ([]byte, error) {
	u := struct {
		Type              TransactionType `json:"type"`
		Url               *url.URL        `json:"url,omitempty"`
		KeyBookUrl        *url.URL        `json:"keyBookUrl,omitempty"`
		ManagerKeyBookUrl *url.URL        `json:"managerKeyBookUrl,omitempty"`
		Scratch           bool            `json:"scratch,omitempty"`
	}{}
	u.Type = v.Type()
	u.Url = v.Url
	u.KeyBookUrl = v.KeyBookUrl
	u.ManagerKeyBookUrl = v.ManagerKeyBookUrl
	u.Scratch = v.Scratch
	return json.Marshal(&u)
}

func (v *CreateIdentity) MarshalJSON() ([]byte, error) {
	u := struct {
		Type        TransactionType `json:"type"`
		Url         *url.URL        `json:"url,omitempty"`
		PublicKey   *string         `json:"publicKey,omitempty"`
		KeyBookName string          `json:"keyBookName,omitempty"`
		KeyPageName string          `json:"keyPageName,omitempty"`
		Manager     *url.URL        `json:"manager,omitempty"`
	}{}
	u.Type = v.Type()
	u.Url = v.Url
	u.PublicKey = encoding.BytesToJSON(v.PublicKey)
	u.KeyBookName = v.KeyBookName
	u.KeyPageName = v.KeyPageName
	u.Manager = v.Manager
	return json.Marshal(&u)
}

func (v *CreateKeyBook) MarshalJSON() ([]byte, error) {
	u := struct {
		Type    TransactionType `json:"type"`
		Url     *url.URL        `json:"url,omitempty"`
		Pages   []*url.URL      `json:"pages,omitempty"`
		Manager *url.URL        `json:"manager,omitempty"`
	}{}
	u.Type = v.Type()
	u.Url = v.Url
	u.Pages = v.Pages
	u.Manager = v.Manager
	return json.Marshal(&u)
}

func (v *CreateKeyPage) MarshalJSON() ([]byte, error) {
	u := struct {
		Type    TransactionType  `json:"type"`
		Url     *url.URL         `json:"url,omitempty"`
		Keys    []*KeySpecParams `json:"keys,omitempty"`
		Manager *url.URL         `json:"manager,omitempty"`
	}{}
	u.Type = v.Type()
	u.Url = v.Url
	u.Keys = v.Keys
	u.Manager = v.Manager
	return json.Marshal(&u)
}

func (v *CreateToken) MarshalJSON() ([]byte, error) {
	u := struct {
		Type           TransactionType `json:"type"`
		Url            *url.URL        `json:"url,omitempty"`
		KeyBookUrl     *url.URL        `json:"keyBookUrl,omitempty"`
		Symbol         string          `json:"symbol,omitempty"`
		Precision      uint64          `json:"precision,omitempty"`
		Properties     *url.URL        `json:"properties,omitempty"`
		InitialSupply  *string         `json:"initialSupply,omitempty"`
		HasSupplyLimit bool            `json:"hasSupplyLimit,omitempty"`
		Manager        *url.URL        `json:"manager,omitempty"`
	}{}
	u.Type = v.Type()
	u.Url = v.Url
	u.KeyBookUrl = v.KeyBookUrl
	u.Symbol = v.Symbol
	u.Precision = v.Precision
	u.Properties = v.Properties
	u.InitialSupply = encoding.BigintToJSON(&v.InitialSupply)
	u.HasSupplyLimit = v.HasSupplyLimit
	u.Manager = v.Manager
	return json.Marshal(&u)
}

func (v *CreateTokenAccount) MarshalJSON() ([]byte, error) {
	u := struct {
		Type       TransactionType `json:"type"`
		Url        *url.URL        `json:"url,omitempty"`
		TokenUrl   *url.URL        `json:"tokenUrl,omitempty"`
		KeyBookUrl *url.URL        `json:"keyBookUrl,omitempty"`
		Scratch    bool            `json:"scratch,omitempty"`
		Manager    *url.URL        `json:"manager,omitempty"`
	}{}
	u.Type = v.Type()
	u.Url = v.Url
	u.TokenUrl = v.TokenUrl
	u.KeyBookUrl = v.KeyBookUrl
	u.Scratch = v.Scratch
	u.Manager = v.Manager
	return json.Marshal(&u)
}

func (v *DataAccount) MarshalJSON() ([]byte, error) {
	u := struct {
		Type           AccountType `json:"type"`
		Url            *url.URL    `json:"url,omitempty"`
		KeyBook        *url.URL    `json:"keyBook,omitempty"`
		ManagerKeyBook *url.URL    `json:"managerKeyBook,omitempty"`
		Scratch        bool        `json:"scratch,omitempty"`
	}{}
	u.Type = v.Type()
	u.Url = v.AccountHeader.Url
	u.KeyBook = v.AccountHeader.KeyBook
	u.ManagerKeyBook = v.AccountHeader.ManagerKeyBook
	u.Scratch = v.Scratch
	return json.Marshal(&u)
}

func (v *DataEntry) MarshalJSON() ([]byte, error) {
	u := struct {
		ExtIds []*string `json:"extIds,omitempty"`
		Data   *string   `json:"data,omitempty"`
	}{}
	u.ExtIds = make([]*string, len(v.ExtIds))
	for i, x := range v.ExtIds {
		u.ExtIds[i] = encoding.BytesToJSON(x)
	}
	u.Data = encoding.BytesToJSON(v.Data)
	return json.Marshal(&u)
}

func (v *ED25519Signature) MarshalJSON() ([]byte, error) {
	u := struct {
		Type      SignatureType `json:"type"`
		PublicKey *string       `json:"publicKey,omitempty"`
		Signature *string       `json:"signature,omitempty"`
	}{}
	u.Type = v.Type()
	u.PublicKey = encoding.BytesToJSON(v.PublicKey)
	u.Signature = encoding.BytesToJSON(v.Signature)
	return json.Marshal(&u)
}

func (v *EmptyResult) MarshalJSON() ([]byte, error) {
	u := struct {
		Type TransactionType `json:"type"`
	}{}
	u.Type = v.Type()
	return json.Marshal(&u)
}

func (v *Envelope) MarshalJSON() ([]byte, error) {
	u := struct {
		Signatures  []json.RawMessage `json:"signatures,omitempty"`
		TxHash      *string           `json:"txHash,omitempty"`
		Transaction *Transaction      `json:"transaction,omitempty"`
	}{}
	u.Signatures = make([]json.RawMessage, len(v.Signatures))
	for i, x := range v.Signatures {
		if y, err := json.Marshal(x); err != nil {
			return nil, fmt.Errorf("error encoding Signatures: %w", err)
		} else {
			u.Signatures[i] = y
		}
	}
	u.TxHash = encoding.BytesToJSON(v.TxHash)
	u.Transaction = v.Transaction
	return json.Marshal(&u)
}

func (v *InternalGenesis) MarshalJSON() ([]byte, error) {
	u := struct {
		Type TransactionType `json:"type"`
	}{}
	u.Type = v.Type()
	return json.Marshal(&u)
}

func (v *InternalLedger) MarshalJSON() ([]byte, error) {
	u := struct {
		Type           AccountType      `json:"type"`
		Url            *url.URL         `json:"url,omitempty"`
		KeyBook        *url.URL         `json:"keyBook,omitempty"`
		ManagerKeyBook *url.URL         `json:"managerKeyBook,omitempty"`
		Index          int64            `json:"index,omitempty"`
		Timestamp      time.Time        `json:"timestamp,omitempty"`
		Synthetic      SyntheticLedger  `json:"synthetic,omitempty"`
		PendingOracle  uint64           `json:"pendingOracle,omitempty"`
		ActiveOracle   uint64           `json:"activeOracle,omitempty"`
		Updates        []AnchorMetadata `json:"updates,omitempty"`
	}{}
	u.Type = v.Type()
	u.Url = v.AccountHeader.Url
	u.KeyBook = v.AccountHeader.KeyBook
	u.ManagerKeyBook = v.AccountHeader.ManagerKeyBook
	u.Index = v.Index
	u.Timestamp = v.Timestamp
	u.Synthetic = v.Synthetic
	u.PendingOracle = v.PendingOracle
	u.ActiveOracle = v.ActiveOracle
	u.Updates = v.Updates
	return json.Marshal(&u)
}

func (v *InternalSendTransactions) MarshalJSON() ([]byte, error) {
	u := struct {
		Type         TransactionType   `json:"type"`
		Transactions []SendTransaction `json:"transactions,omitempty"`
	}{}
	u.Type = v.Type()
	u.Transactions = v.Transactions
	return json.Marshal(&u)
}

func (v *InternalTransactionsSent) MarshalJSON() ([]byte, error) {
	u := struct {
		Type         TransactionType `json:"type"`
		Transactions []string        `json:"transactions,omitempty"`
	}{}
	u.Type = v.Type()
	u.Transactions = make([]string, len(v.Transactions))
	for i, x := range v.Transactions {
		u.Transactions[i] = encoding.ChainToJSON(x)
	}
	return json.Marshal(&u)
}

func (v *InternalTransactionsSigned) MarshalJSON() ([]byte, error) {
	u := struct {
		Type         TransactionType        `json:"type"`
		Transactions []TransactionSignature `json:"transactions,omitempty"`
	}{}
	u.Type = v.Type()
	u.Transactions = v.Transactions
	return json.Marshal(&u)
}

func (v *IssueTokens) MarshalJSON() ([]byte, error) {
	u := struct {
		Type      TransactionType `json:"type"`
		Recipient *url.URL        `json:"recipient,omitempty"`
		Amount    *string         `json:"amount,omitempty"`
	}{}
	u.Type = v.Type()
	u.Recipient = v.Recipient
	u.Amount = encoding.BigintToJSON(&v.Amount)
	return json.Marshal(&u)
}

func (v *KeyBook) MarshalJSON() ([]byte, error) {
	u := struct {
		Type           AccountType `json:"type"`
		Url            *url.URL    `json:"url,omitempty"`
		KeyBook        *url.URL    `json:"keyBook,omitempty"`
		ManagerKeyBook *url.URL    `json:"managerKeyBook,omitempty"`
		Pages          []*url.URL  `json:"pages,omitempty"`
	}{}
	u.Type = v.Type()
	u.Url = v.AccountHeader.Url
	u.KeyBook = v.AccountHeader.KeyBook
	u.ManagerKeyBook = v.AccountHeader.ManagerKeyBook
	u.Pages = v.Pages
	return json.Marshal(&u)
}

func (v *KeyPage) MarshalJSON() ([]byte, error) {
	u := struct {
		Type           AccountType `json:"type"`
		Url            *url.URL    `json:"url,omitempty"`
		KeyBook        *url.URL    `json:"keyBook,omitempty"`
		ManagerKeyBook *url.URL    `json:"managerKeyBook,omitempty"`
		CreditBalance  *string     `json:"creditBalance,omitempty"`
		Threshold      uint64      `json:"threshold,omitempty"`
		Keys           []*KeySpec  `json:"keys,omitempty"`
	}{}
	u.Type = v.Type()
	u.Url = v.AccountHeader.Url
	u.KeyBook = v.AccountHeader.KeyBook
	u.ManagerKeyBook = v.AccountHeader.ManagerKeyBook
	u.CreditBalance = encoding.BigintToJSON(&v.CreditBalance)
	u.Threshold = v.Threshold
	u.Keys = v.Keys
	return json.Marshal(&u)
}

func (v *KeySpec) MarshalJSON() ([]byte, error) {
	u := struct {
		PublicKey *string  `json:"publicKey,omitempty"`
		Nonce     uint64   `json:"nonce,omitempty"`
		Owner     *url.URL `json:"owner,omitempty"`
	}{}
	u.PublicKey = encoding.BytesToJSON(v.PublicKey)
	u.Nonce = v.Nonce
	u.Owner = v.Owner
	return json.Marshal(&u)
}

func (v *KeySpecParams) MarshalJSON() ([]byte, error) {
	u := struct {
		PublicKey *string `json:"publicKey,omitempty"`
	}{}
	u.PublicKey = encoding.BytesToJSON(v.PublicKey)
	return json.Marshal(&u)
}

func (v *LegacyED25519Signature) MarshalJSON() ([]byte, error) {
	u := struct {
		Type      SignatureType `json:"type"`
		Nonce     uint64        `json:"nonce,omitempty"`
		PublicKey *string       `json:"publicKey,omitempty"`
		Signature *string       `json:"signature,omitempty"`
	}{}
	u.Type = v.Type()
	u.Nonce = v.Nonce
	u.PublicKey = encoding.BytesToJSON(v.PublicKey)
	u.Signature = encoding.BytesToJSON(v.Signature)
	return json.Marshal(&u)
}

func (v *LiteDataAccount) MarshalJSON() ([]byte, error) {
	u := struct {
		Type           AccountType `json:"type"`
		Url            *url.URL    `json:"url,omitempty"`
		KeyBook        *url.URL    `json:"keyBook,omitempty"`
		ManagerKeyBook *url.URL    `json:"managerKeyBook,omitempty"`
		Tail           *string     `json:"tail,omitempty"`
	}{}
	u.Type = v.Type()
	u.Url = v.AccountHeader.Url
	u.KeyBook = v.AccountHeader.KeyBook
	u.ManagerKeyBook = v.AccountHeader.ManagerKeyBook
	u.Tail = encoding.BytesToJSON(v.Tail)
	return json.Marshal(&u)
}

func (v *LiteIdentity) MarshalJSON() ([]byte, error) {
	u := struct {
		Type           AccountType `json:"type"`
		Url            *url.URL    `json:"url,omitempty"`
		KeyBook        *url.URL    `json:"keyBook,omitempty"`
		ManagerKeyBook *url.URL    `json:"managerKeyBook,omitempty"`
	}{}
	u.Type = v.Type()
	u.Url = v.AccountHeader.Url
	u.KeyBook = v.AccountHeader.KeyBook
	u.ManagerKeyBook = v.AccountHeader.ManagerKeyBook
	return json.Marshal(&u)
}

func (v *LiteTokenAccount) MarshalJSON() ([]byte, error) {
	u := struct {
		Type           AccountType `json:"type"`
		Url            *url.URL    `json:"url,omitempty"`
		KeyBook        *url.URL    `json:"keyBook,omitempty"`
		ManagerKeyBook *url.URL    `json:"managerKeyBook,omitempty"`
		TokenUrl       *url.URL    `json:"tokenUrl,omitempty"`
		Balance        *string     `json:"balance,omitempty"`
		Nonce          uint64      `json:"nonce,omitempty"`
		CreditBalance  *string     `json:"creditBalance,omitempty"`
	}{}
	u.Type = v.Type()
	u.Url = v.AccountHeader.Url
	u.KeyBook = v.AccountHeader.KeyBook
	u.ManagerKeyBook = v.AccountHeader.ManagerKeyBook
	u.TokenUrl = v.TokenUrl
	u.Balance = encoding.BigintToJSON(&v.Balance)
	u.Nonce = v.Nonce
	u.CreditBalance = encoding.BigintToJSON(&v.CreditBalance)
	return json.Marshal(&u)
}

func (v *MetricsRequest) MarshalJSON() ([]byte, error) {
	u := struct {
		Metric   string      `json:"metric,omitempty"`
		Duration interface{} `json:"duration,omitempty"`
	}{}
	u.Metric = v.Metric
	u.Duration = encoding.DurationToJSON(v.Duration)
	return json.Marshal(&u)
}

func (v *MetricsResponse) MarshalJSON() ([]byte, error) {
	u := struct {
		Value interface{} `json:"value,omitempty"`
	}{}
	u.Value = encoding.AnyToJSON(v.Value)
	return json.Marshal(&u)
}

func (v *Object) MarshalJSON() ([]byte, error) {
	u := struct {
		Entry  *string   `json:"entry,omitempty"`
		Height uint64    `json:"height,omitempty"`
		Roots  []*string `json:"roots,omitempty"`
	}{}
	u.Entry = encoding.BytesToJSON(v.Entry)
	u.Height = v.Height
	u.Roots = make([]*string, len(v.Roots))
	for i, x := range v.Roots {
		u.Roots[i] = encoding.BytesToJSON(x)
	}
	return json.Marshal(&u)
}

func (v *PendingTransactionState) MarshalJSON() ([]byte, error) {
	u := struct {
		Type             AccountType       `json:"type"`
		Url              *url.URL          `json:"url,omitempty"`
		KeyBook          *url.URL          `json:"keyBook,omitempty"`
		ManagerKeyBook   *url.URL          `json:"managerKeyBook,omitempty"`
		Signature        []json.RawMessage `json:"signature,omitempty"`
		TransactionState *TxState          `json:"transactionState,omitempty"`
		Status           json.RawMessage   `json:"status,omitempty"`
	}{}
	u.Type = v.Type()
	u.Url = v.AccountHeader.Url
	u.KeyBook = v.AccountHeader.KeyBook
	u.ManagerKeyBook = v.AccountHeader.ManagerKeyBook
	u.Signature = make([]json.RawMessage, len(v.Signature))
	for i, x := range v.Signature {
		if y, err := json.Marshal(x); err != nil {
			return nil, fmt.Errorf("error encoding Signature: %w", err)
		} else {
			u.Signature[i] = y
		}
	}
	u.TransactionState = v.TransactionState
	u.Status = v.Status
	return json.Marshal(&u)
}

func (v *Receipt) MarshalJSON() ([]byte, error) {
	u := struct {
		Start   *string        `json:"start,omitempty"`
		Entries []ReceiptEntry `json:"entries,omitempty"`
	}{}
	u.Start = encoding.BytesToJSON(v.Start)
	u.Entries = v.Entries
	return json.Marshal(&u)
}

func (v *ReceiptEntry) MarshalJSON() ([]byte, error) {
	u := struct {
		Right bool    `json:"right,omitempty"`
		Hash  *string `json:"hash,omitempty"`
	}{}
	u.Right = v.Right
	u.Hash = encoding.BytesToJSON(v.Hash)
	return json.Marshal(&u)
}

func (v *RemoveManager) MarshalJSON() ([]byte, error) {
	u := struct {
		Type TransactionType `json:"type"`
	}{}
	u.Type = v.Type()
	return json.Marshal(&u)
}

func (v *RequestDataEntry) MarshalJSON() ([]byte, error) {
	u := struct {
		Url       *url.URL `json:"url,omitempty"`
		EntryHash string   `json:"entryHash,omitempty"`
	}{}
	u.Url = v.Url
	u.EntryHash = encoding.ChainToJSON(v.EntryHash)
	return json.Marshal(&u)
}

func (v *ResponseDataEntry) MarshalJSON() ([]byte, error) {
	u := struct {
		EntryHash string    `json:"entryHash,omitempty"`
		Entry     DataEntry `json:"entry,omitempty"`
	}{}
	u.EntryHash = encoding.ChainToJSON(v.EntryHash)
	u.Entry = v.Entry
	return json.Marshal(&u)
}

func (v *SegWitDataEntry) MarshalJSON() ([]byte, error) {
	u := struct {
		Type      TransactionType `json:"type"`
		Cause     string          `json:"cause,omitempty"`
		EntryUrl  *url.URL        `json:"entryUrl,omitempty"`
		EntryHash string          `json:"entryHash,omitempty"`
	}{}
	u.Type = v.Type()
	u.Cause = encoding.ChainToJSON(v.Cause)
	u.EntryUrl = v.EntryUrl
	u.EntryHash = encoding.ChainToJSON(v.EntryHash)
	return json.Marshal(&u)
}

func (v *SendTokens) MarshalJSON() ([]byte, error) {
	u := struct {
		Type TransactionType   `json:"type"`
		Hash string            `json:"hash,omitempty"`
		Meta json.RawMessage   `json:"meta,omitempty"`
		To   []*TokenRecipient `json:"to,omitempty"`
	}{}
	u.Type = v.Type()
	u.Hash = encoding.ChainToJSON(v.Hash)
	u.Meta = v.Meta
	u.To = v.To
	return json.Marshal(&u)
}

func (v *SendTransaction) MarshalJSON() ([]byte, error) {
	u := struct {
		Payload   json.RawMessage `json:"payload,omitempty"`
		Recipient *url.URL        `json:"recipient,omitempty"`
	}{}
	if x, err := json.Marshal(v.Payload); err != nil {
		return nil, fmt.Errorf("error encoding Payload: %w", err)
	} else {
		u.Payload = x
	}
	u.Recipient = v.Recipient
	return json.Marshal(&u)
}

func (v *SignPending) MarshalJSON() ([]byte, error) {
	u := struct {
		Type TransactionType `json:"type"`
	}{}
	u.Type = v.Type()
	return json.Marshal(&u)
}

func (v *SyntheticAnchor) MarshalJSON() ([]byte, error) {
	u := struct {
		Type            TransactionType `json:"type"`
		Source          *url.URL        `json:"source,omitempty"`
		Major           bool            `json:"major,omitempty"`
		RootAnchor      string          `json:"rootAnchor,omitempty"`
		RootIndex       uint64          `json:"rootIndex,omitempty"`
		Block           uint64          `json:"block,omitempty"`
		SourceIndex     uint64          `json:"sourceIndex,omitempty"`
		SourceBlock     uint64          `json:"sourceBlock,omitempty"`
		AcmeOraclePrice uint64          `json:"acmeOraclePrice,omitempty"`
		Receipt         Receipt         `json:"receipt,omitempty"`
	}{}
	u.Type = v.Type()
	u.Source = v.Source
	u.Major = v.Major
	u.RootAnchor = encoding.ChainToJSON(v.RootAnchor)
	u.RootIndex = v.RootIndex
	u.Block = v.Block
	u.SourceIndex = v.SourceIndex
	u.SourceBlock = v.SourceBlock
	u.AcmeOraclePrice = v.AcmeOraclePrice
	u.Receipt = v.Receipt
	return json.Marshal(&u)
}

func (v *SyntheticBurnTokens) MarshalJSON() ([]byte, error) {
	u := struct {
		Type   TransactionType `json:"type"`
		Cause  string          `json:"cause,omitempty"`
		Amount *string         `json:"amount,omitempty"`
	}{}
	u.Type = v.Type()
	u.Cause = encoding.ChainToJSON(v.Cause)
	u.Amount = encoding.BigintToJSON(&v.Amount)
	return json.Marshal(&u)
}

func (v *SyntheticCreateChain) MarshalJSON() ([]byte, error) {
	u := struct {
		Type   TransactionType `json:"type"`
		Cause  string          `json:"cause,omitempty"`
		Chains []ChainParams   `json:"chains,omitempty"`
	}{}
	u.Type = v.Type()
	u.Cause = encoding.ChainToJSON(v.Cause)
	u.Chains = v.Chains
	return json.Marshal(&u)
}

func (v *SyntheticDepositCredits) MarshalJSON() ([]byte, error) {
	u := struct {
		Type   TransactionType `json:"type"`
		Cause  string          `json:"cause,omitempty"`
		Amount uint64          `json:"amount,omitempty"`
	}{}
	u.Type = v.Type()
	u.Cause = encoding.ChainToJSON(v.Cause)
	u.Amount = v.Amount
	return json.Marshal(&u)
}

func (v *SyntheticDepositTokens) MarshalJSON() ([]byte, error) {
	u := struct {
		Type   TransactionType `json:"type"`
		Cause  string          `json:"cause,omitempty"`
		Token  *url.URL        `json:"token,omitempty"`
		Amount *string         `json:"amount,omitempty"`
	}{}
	u.Type = v.Type()
	u.Cause = encoding.ChainToJSON(v.Cause)
	u.Token = v.Token
	u.Amount = encoding.BigintToJSON(&v.Amount)
	return json.Marshal(&u)
}

func (v *SyntheticLedger) MarshalJSON() ([]byte, error) {
	u := struct {
		Nonce    uint64   `json:"nonce,omitempty"`
		Produced []string `json:"produced,omitempty"`
		Unsigned []string `json:"unsigned,omitempty"`
		Unsent   []string `json:"unsent,omitempty"`
	}{}
	u.Nonce = v.Nonce
	u.Produced = make([]string, len(v.Produced))
	for i, x := range v.Produced {
		u.Produced[i] = encoding.ChainToJSON(x)
	}
	u.Unsigned = make([]string, len(v.Unsigned))
	for i, x := range v.Unsigned {
		u.Unsigned[i] = encoding.ChainToJSON(x)
	}
	u.Unsent = make([]string, len(v.Unsent))
	for i, x := range v.Unsent {
		u.Unsent[i] = encoding.ChainToJSON(x)
	}
	return json.Marshal(&u)
}

func (v *SyntheticMirror) MarshalJSON() ([]byte, error) {
	u := struct {
		Type    TransactionType  `json:"type"`
		Objects []AnchoredRecord `json:"objects,omitempty"`
	}{}
	u.Type = v.Type()
	u.Objects = v.Objects
	return json.Marshal(&u)
}

func (v *SyntheticWriteData) MarshalJSON() ([]byte, error) {
	u := struct {
		Type  TransactionType `json:"type"`
		Cause string          `json:"cause,omitempty"`
		Entry DataEntry       `json:"entry,omitempty"`
	}{}
	u.Type = v.Type()
	u.Cause = encoding.ChainToJSON(v.Cause)
	u.Entry = v.Entry
	return json.Marshal(&u)
}

func (v *TokenAccount) MarshalJSON() ([]byte, error) {
	u := struct {
		Type           AccountType `json:"type"`
		Url            *url.URL    `json:"url,omitempty"`
		KeyBook        *url.URL    `json:"keyBook,omitempty"`
		ManagerKeyBook *url.URL    `json:"managerKeyBook,omitempty"`
		TokenUrl       *url.URL    `json:"tokenUrl,omitempty"`
		Balance        *string     `json:"balance,omitempty"`
		Scratch        bool        `json:"scratch,omitempty"`
	}{}
	u.Type = v.Type()
	u.Url = v.AccountHeader.Url
	u.KeyBook = v.AccountHeader.KeyBook
	u.ManagerKeyBook = v.AccountHeader.ManagerKeyBook
	u.TokenUrl = v.TokenUrl
	u.Balance = encoding.BigintToJSON(&v.Balance)
	u.Scratch = v.Scratch
	return json.Marshal(&u)
}

func (v *TokenIssuer) MarshalJSON() ([]byte, error) {
	u := struct {
		Type           AccountType `json:"type"`
		Url            *url.URL    `json:"url,omitempty"`
		KeyBook        *url.URL    `json:"keyBook,omitempty"`
		ManagerKeyBook *url.URL    `json:"managerKeyBook,omitempty"`
		Symbol         string      `json:"symbol,omitempty"`
		Precision      uint64      `json:"precision,omitempty"`
		Properties     *url.URL    `json:"properties,omitempty"`
		Supply         *string     `json:"supply,omitempty"`
		HasSupplyLimit bool        `json:"hasSupplyLimit,omitempty"`
	}{}
	u.Type = v.Type()
	u.Url = v.AccountHeader.Url
	u.KeyBook = v.AccountHeader.KeyBook
	u.ManagerKeyBook = v.AccountHeader.ManagerKeyBook
	u.Symbol = v.Symbol
	u.Precision = v.Precision
	u.Properties = v.Properties
	u.Supply = encoding.BigintToJSON(&v.Supply)
	u.HasSupplyLimit = v.HasSupplyLimit
	return json.Marshal(&u)
}

func (v *TokenRecipient) MarshalJSON() ([]byte, error) {
	u := struct {
		Url    *url.URL `json:"url,omitempty"`
		Amount *string  `json:"amount,omitempty"`
	}{}
	u.Url = v.Url
	u.Amount = encoding.BigintToJSON(&v.Amount)
	return json.Marshal(&u)
}

func (v *Transaction) MarshalJSON() ([]byte, error) {
	u := struct {
		Origin        *url.URL        `json:"origin,omitempty"`
		KeyPageHeight uint64          `json:"keyPageHeight,omitempty"`
		KeyPageIndex  uint64          `json:"keyPageIndex,omitempty"`
		Nonce         uint64          `json:"nonce,omitempty"`
		Body          json.RawMessage `json:"body,omitempty"`
	}{}
	u.Origin = v.TransactionHeader.Origin
	u.KeyPageHeight = v.TransactionHeader.KeyPageHeight
	u.KeyPageIndex = v.TransactionHeader.KeyPageIndex
	u.Nonce = v.TransactionHeader.Nonce
	if x, err := json.Marshal(v.Body); err != nil {
		return nil, fmt.Errorf("error encoding Body: %w", err)
	} else {
		u.Body = x
	}
	return json.Marshal(&u)
}

func (v *TransactionSignature) MarshalJSON() ([]byte, error) {
	u := struct {
		Transaction string          `json:"transaction,omitempty"`
		Signature   json.RawMessage `json:"signature,omitempty"`
	}{}
	u.Transaction = encoding.ChainToJSON(v.Transaction)
	if x, err := json.Marshal(v.Signature); err != nil {
		return nil, fmt.Errorf("error encoding Signature: %w", err)
	} else {
		u.Signature = x
	}
	return json.Marshal(&u)
}

func (v *TransactionState) MarshalJSON() ([]byte, error) {
	u := struct {
		Type           AccountType        `json:"type"`
		Url            *url.URL           `json:"url,omitempty"`
		KeyBook        *url.URL           `json:"keyBook,omitempty"`
		ManagerKeyBook *url.URL           `json:"managerKeyBook,omitempty"`
		SigInfo        *TransactionHeader `json:"sigInfo,omitempty"`
		Transaction    json.RawMessage    `json:"transaction,omitempty"`
	}{}
	u.Type = v.Type()
	u.Url = v.AccountHeader.Url
	u.KeyBook = v.AccountHeader.KeyBook
	u.ManagerKeyBook = v.AccountHeader.ManagerKeyBook
	u.SigInfo = v.TxState.SigInfo
	if x, err := json.Marshal(v.TxState.Transaction); err != nil {
		return nil, fmt.Errorf("error encoding Transaction: %w", err)
	} else {
		u.Transaction = x
	}
	return json.Marshal(&u)
}

func (v *TransactionStatus) MarshalJSON() ([]byte, error) {
	u := struct {
		Remote    bool            `json:"remote,omitempty"`
		Delivered bool            `json:"delivered,omitempty"`
		Pending   bool            `json:"pending,omitempty"`
		Code      uint64          `json:"code,omitempty"`
		Message   string          `json:"message,omitempty"`
		Result    json.RawMessage `json:"result,omitempty"`
	}{}
	u.Remote = v.Remote
	u.Delivered = v.Delivered
	u.Pending = v.Pending
	u.Code = v.Code
	u.Message = v.Message
	if x, err := json.Marshal(v.Result); err != nil {
		return nil, fmt.Errorf("error encoding Result: %w", err)
	} else {
		u.Result = x
	}
	return json.Marshal(&u)
}

func (v *TxState) MarshalJSON() ([]byte, error) {
	u := struct {
		SigInfo     *TransactionHeader `json:"sigInfo,omitempty"`
		Transaction json.RawMessage    `json:"transaction,omitempty"`
	}{}
	u.SigInfo = v.SigInfo
	if x, err := json.Marshal(v.Transaction); err != nil {
		return nil, fmt.Errorf("error encoding Transaction: %w", err)
	} else {
		u.Transaction = x
	}
	return json.Marshal(&u)
}

func (v *UpdateKeyPage) MarshalJSON() ([]byte, error) {
	u := struct {
		Type      TransactionType  `json:"type"`
		Operation KeyPageOperation `json:"operation,omitempty"`
		Key       *string          `json:"key,omitempty"`
		NewKey    *string          `json:"newKey,omitempty"`
		Owner     *url.URL         `json:"owner,omitempty"`
		Threshold uint64           `json:"threshold,omitempty"`
	}{}
	u.Type = v.Type()
	u.Operation = v.Operation
	u.Key = encoding.BytesToJSON(v.Key)
	u.NewKey = encoding.BytesToJSON(v.NewKey)
	u.Owner = v.Owner
	u.Threshold = v.Threshold
	return json.Marshal(&u)
}

func (v *UpdateManager) MarshalJSON() ([]byte, error) {
	u := struct {
		Type           TransactionType `json:"type"`
		ManagerKeyBook *url.URL        `json:"managerKeyBook,omitempty"`
	}{}
	u.Type = v.Type()
	u.ManagerKeyBook = v.ManagerKeyBook
	return json.Marshal(&u)
}

func (v *WriteData) MarshalJSON() ([]byte, error) {
	u := struct {
		Type  TransactionType `json:"type"`
		Entry DataEntry       `json:"entry,omitempty"`
	}{}
	u.Type = v.Type()
	u.Entry = v.Entry
	return json.Marshal(&u)
}

func (v *WriteDataResult) MarshalJSON() ([]byte, error) {
	u := struct {
		Type       TransactionType `json:"type"`
		EntryHash  string          `json:"entryHash,omitempty"`
		AccountUrl *url.URL        `json:"accountUrl,omitempty"`
		AccountID  *string         `json:"accountID,omitempty"`
	}{}
	u.Type = v.Type()
	u.EntryHash = encoding.ChainToJSON(v.EntryHash)
	u.AccountUrl = v.AccountUrl
	u.AccountID = encoding.BytesToJSON(v.AccountID)
	return json.Marshal(&u)
}

func (v *WriteDataTo) MarshalJSON() ([]byte, error) {
	u := struct {
		Type      TransactionType `json:"type"`
		Recipient *url.URL        `json:"recipient,omitempty"`
		Entry     DataEntry       `json:"entry,omitempty"`
	}{}
	u.Type = v.Type()
	u.Recipient = v.Recipient
	u.Entry = v.Entry
	return json.Marshal(&u)
}

func (v *ADI) UnmarshalJSON(data []byte) error {
	u := struct {
		Type           AccountType `json:"type"`
		Url            *url.URL    `json:"url,omitempty"`
		KeyBook        *url.URL    `json:"keyBook,omitempty"`
		ManagerKeyBook *url.URL    `json:"managerKeyBook,omitempty"`
	}{}
	u.Type = v.Type()
	u.Url = v.AccountHeader.Url
	u.KeyBook = v.AccountHeader.KeyBook
	u.ManagerKeyBook = v.AccountHeader.ManagerKeyBook
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	v.AccountHeader.Url = u.Url
	v.AccountHeader.KeyBook = u.KeyBook
	v.AccountHeader.ManagerKeyBook = u.ManagerKeyBook
	return nil
}

func (v *AcmeFaucet) UnmarshalJSON(data []byte) error {
	u := struct {
		Type TransactionType `json:"type"`
		Url  *url.URL        `json:"url,omitempty"`
	}{}
	u.Type = v.Type()
	u.Url = v.Url
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	v.Url = u.Url
	return nil
}

func (v *AddCredits) UnmarshalJSON(data []byte) error {
	u := struct {
		Type      TransactionType `json:"type"`
		Recipient *url.URL        `json:"recipient,omitempty"`
		Amount    *string         `json:"amount,omitempty"`
	}{}
	u.Type = v.Type()
	u.Recipient = v.Recipient
	u.Amount = encoding.BigintToJSON(&v.Amount)
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	v.Recipient = u.Recipient
	if x, err := encoding.BigintFromJSON(u.Amount); err != nil {
		return fmt.Errorf("error decoding Amount: %w", err)
	} else {
		v.Amount = *x
	}
	return nil
}

func (v *Anchor) UnmarshalJSON(data []byte) error {
	u := struct {
		Type           AccountType `json:"type"`
		Url            *url.URL    `json:"url,omitempty"`
		KeyBook        *url.URL    `json:"keyBook,omitempty"`
		ManagerKeyBook *url.URL    `json:"managerKeyBook,omitempty"`
	}{}
	u.Type = v.Type()
	u.Url = v.AccountHeader.Url
	u.KeyBook = v.AccountHeader.KeyBook
	u.ManagerKeyBook = v.AccountHeader.ManagerKeyBook
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	v.AccountHeader.Url = u.Url
	v.AccountHeader.KeyBook = u.KeyBook
	v.AccountHeader.ManagerKeyBook = u.ManagerKeyBook
	return nil
}

func (v *AnchorMetadata) UnmarshalJSON(data []byte) error {
	u := struct {
		Name        string    `json:"name,omitempty"`
		Type        ChainType `json:"type,omitempty"`
		Account     *url.URL  `json:"account,omitempty"`
		Index       uint64    `json:"index,omitempty"`
		SourceIndex uint64    `json:"sourceIndex,omitempty"`
		SourceBlock uint64    `json:"sourceBlock,omitempty"`
		Entry       *string   `json:"entry,omitempty"`
	}{}
	u.Name = v.ChainMetadata.Name
	u.Type = v.ChainMetadata.Type
	u.Account = v.Account
	u.Index = v.Index
	u.SourceIndex = v.SourceIndex
	u.SourceBlock = v.SourceBlock
	u.Entry = encoding.BytesToJSON(v.Entry)
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	v.ChainMetadata.Name = u.Name
	v.ChainMetadata.Type = u.Type
	v.Account = u.Account
	v.Index = u.Index
	v.SourceIndex = u.SourceIndex
	v.SourceBlock = u.SourceBlock
	if x, err := encoding.BytesFromJSON(u.Entry); err != nil {
		return fmt.Errorf("error decoding Entry: %w", err)
	} else {
		v.Entry = x
	}
	return nil
}

func (v *AnchoredRecord) UnmarshalJSON(data []byte) error {
	u := struct {
		Record *string `json:"record,omitempty"`
		Anchor string  `json:"anchor,omitempty"`
	}{}
	u.Record = encoding.BytesToJSON(v.Record)
	u.Anchor = encoding.ChainToJSON(v.Anchor)
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	if x, err := encoding.BytesFromJSON(u.Record); err != nil {
		return fmt.Errorf("error decoding Record: %w", err)
	} else {
		v.Record = x
	}
	if x, err := encoding.ChainFromJSON(u.Anchor); err != nil {
		return fmt.Errorf("error decoding Anchor: %w", err)
	} else {
		v.Anchor = x
	}
	return nil
}

func (v *BurnTokens) UnmarshalJSON(data []byte) error {
	u := struct {
		Type   TransactionType `json:"type"`
		Amount *string         `json:"amount,omitempty"`
	}{}
	u.Type = v.Type()
	u.Amount = encoding.BigintToJSON(&v.Amount)
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	if x, err := encoding.BigintFromJSON(u.Amount); err != nil {
		return fmt.Errorf("error decoding Amount: %w", err)
	} else {
		v.Amount = *x
	}
	return nil
}

func (v *ChainParams) UnmarshalJSON(data []byte) error {
	u := struct {
		Data     *string `json:"data,omitempty"`
		IsUpdate bool    `json:"isUpdate,omitempty"`
	}{}
	u.Data = encoding.BytesToJSON(v.Data)
	u.IsUpdate = v.IsUpdate
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	if x, err := encoding.BytesFromJSON(u.Data); err != nil {
		return fmt.Errorf("error decoding Data: %w", err)
	} else {
		v.Data = x
	}
	v.IsUpdate = u.IsUpdate
	return nil
}

func (v *CreateDataAccount) UnmarshalJSON(data []byte) error {
	u := struct {
		Type              TransactionType `json:"type"`
		Url               *url.URL        `json:"url,omitempty"`
		KeyBookUrl        *url.URL        `json:"keyBookUrl,omitempty"`
		ManagerKeyBookUrl *url.URL        `json:"managerKeyBookUrl,omitempty"`
		Scratch           bool            `json:"scratch,omitempty"`
	}{}
	u.Type = v.Type()
	u.Url = v.Url
	u.KeyBookUrl = v.KeyBookUrl
	u.ManagerKeyBookUrl = v.ManagerKeyBookUrl
	u.Scratch = v.Scratch
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	v.Url = u.Url
	v.KeyBookUrl = u.KeyBookUrl
	v.ManagerKeyBookUrl = u.ManagerKeyBookUrl
	v.Scratch = u.Scratch
	return nil
}

func (v *CreateIdentity) UnmarshalJSON(data []byte) error {
	u := struct {
		Type        TransactionType `json:"type"`
		Url         *url.URL        `json:"url,omitempty"`
		PublicKey   *string         `json:"publicKey,omitempty"`
		KeyBookName string          `json:"keyBookName,omitempty"`
		KeyPageName string          `json:"keyPageName,omitempty"`
		Manager     *url.URL        `json:"manager,omitempty"`
	}{}
	u.Type = v.Type()
	u.Url = v.Url
	u.PublicKey = encoding.BytesToJSON(v.PublicKey)
	u.KeyBookName = v.KeyBookName
	u.KeyPageName = v.KeyPageName
	u.Manager = v.Manager
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	v.Url = u.Url
	if x, err := encoding.BytesFromJSON(u.PublicKey); err != nil {
		return fmt.Errorf("error decoding PublicKey: %w", err)
	} else {
		v.PublicKey = x
	}
	v.KeyBookName = u.KeyBookName
	v.KeyPageName = u.KeyPageName
	v.Manager = u.Manager
	return nil
}

func (v *CreateKeyBook) UnmarshalJSON(data []byte) error {
	u := struct {
		Type    TransactionType `json:"type"`
		Url     *url.URL        `json:"url,omitempty"`
		Pages   []*url.URL      `json:"pages,omitempty"`
		Manager *url.URL        `json:"manager,omitempty"`
	}{}
	u.Type = v.Type()
	u.Url = v.Url
	u.Pages = v.Pages
	u.Manager = v.Manager
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	v.Url = u.Url
	v.Pages = u.Pages
	v.Manager = u.Manager
	return nil
}

func (v *CreateKeyPage) UnmarshalJSON(data []byte) error {
	u := struct {
		Type    TransactionType  `json:"type"`
		Url     *url.URL         `json:"url,omitempty"`
		Keys    []*KeySpecParams `json:"keys,omitempty"`
		Manager *url.URL         `json:"manager,omitempty"`
	}{}
	u.Type = v.Type()
	u.Url = v.Url
	u.Keys = v.Keys
	u.Manager = v.Manager
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	v.Url = u.Url
	v.Keys = u.Keys
	v.Manager = u.Manager
	return nil
}

func (v *CreateToken) UnmarshalJSON(data []byte) error {
	u := struct {
		Type           TransactionType `json:"type"`
		Url            *url.URL        `json:"url,omitempty"`
		KeyBookUrl     *url.URL        `json:"keyBookUrl,omitempty"`
		Symbol         string          `json:"symbol,omitempty"`
		Precision      uint64          `json:"precision,omitempty"`
		Properties     *url.URL        `json:"properties,omitempty"`
		InitialSupply  *string         `json:"initialSupply,omitempty"`
		HasSupplyLimit bool            `json:"hasSupplyLimit,omitempty"`
		Manager        *url.URL        `json:"manager,omitempty"`
	}{}
	u.Type = v.Type()
	u.Url = v.Url
	u.KeyBookUrl = v.KeyBookUrl
	u.Symbol = v.Symbol
	u.Precision = v.Precision
	u.Properties = v.Properties
	u.InitialSupply = encoding.BigintToJSON(&v.InitialSupply)
	u.HasSupplyLimit = v.HasSupplyLimit
	u.Manager = v.Manager
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	v.Url = u.Url
	v.KeyBookUrl = u.KeyBookUrl
	v.Symbol = u.Symbol
	v.Precision = u.Precision
	v.Properties = u.Properties
	if x, err := encoding.BigintFromJSON(u.InitialSupply); err != nil {
		return fmt.Errorf("error decoding InitialSupply: %w", err)
	} else {
		v.InitialSupply = *x
	}
	v.HasSupplyLimit = u.HasSupplyLimit
	v.Manager = u.Manager
	return nil
}

func (v *CreateTokenAccount) UnmarshalJSON(data []byte) error {
	u := struct {
		Type       TransactionType `json:"type"`
		Url        *url.URL        `json:"url,omitempty"`
		TokenUrl   *url.URL        `json:"tokenUrl,omitempty"`
		KeyBookUrl *url.URL        `json:"keyBookUrl,omitempty"`
		Scratch    bool            `json:"scratch,omitempty"`
		Manager    *url.URL        `json:"manager,omitempty"`
	}{}
	u.Type = v.Type()
	u.Url = v.Url
	u.TokenUrl = v.TokenUrl
	u.KeyBookUrl = v.KeyBookUrl
	u.Scratch = v.Scratch
	u.Manager = v.Manager
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	v.Url = u.Url
	v.TokenUrl = u.TokenUrl
	v.KeyBookUrl = u.KeyBookUrl
	v.Scratch = u.Scratch
	v.Manager = u.Manager
	return nil
}

func (v *DataAccount) UnmarshalJSON(data []byte) error {
	u := struct {
		Type           AccountType `json:"type"`
		Url            *url.URL    `json:"url,omitempty"`
		KeyBook        *url.URL    `json:"keyBook,omitempty"`
		ManagerKeyBook *url.URL    `json:"managerKeyBook,omitempty"`
		Scratch        bool        `json:"scratch,omitempty"`
	}{}
	u.Type = v.Type()
	u.Url = v.AccountHeader.Url
	u.KeyBook = v.AccountHeader.KeyBook
	u.ManagerKeyBook = v.AccountHeader.ManagerKeyBook
	u.Scratch = v.Scratch
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	v.AccountHeader.Url = u.Url
	v.AccountHeader.KeyBook = u.KeyBook
	v.AccountHeader.ManagerKeyBook = u.ManagerKeyBook
	v.Scratch = u.Scratch
	return nil
}

func (v *DataEntry) UnmarshalJSON(data []byte) error {
	u := struct {
		ExtIds []*string `json:"extIds,omitempty"`
		Data   *string   `json:"data,omitempty"`
	}{}
	u.ExtIds = make([]*string, len(v.ExtIds))
	for i, x := range v.ExtIds {
		u.ExtIds[i] = encoding.BytesToJSON(x)
	}
	u.Data = encoding.BytesToJSON(v.Data)
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	v.ExtIds = make([][]byte, len(u.ExtIds))
	for i, x := range u.ExtIds {
		if x, err := encoding.BytesFromJSON(x); err != nil {
			return fmt.Errorf("error decoding ExtIds: %w", err)
		} else {
			v.ExtIds[i] = x
		}
	}
	if x, err := encoding.BytesFromJSON(u.Data); err != nil {
		return fmt.Errorf("error decoding Data: %w", err)
	} else {
		v.Data = x
	}
	return nil
}

func (v *ED25519Signature) UnmarshalJSON(data []byte) error {
	u := struct {
		Type      SignatureType `json:"type"`
		PublicKey *string       `json:"publicKey,omitempty"`
		Signature *string       `json:"signature,omitempty"`
	}{}
	u.Type = v.Type()
	u.PublicKey = encoding.BytesToJSON(v.PublicKey)
	u.Signature = encoding.BytesToJSON(v.Signature)
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	if x, err := encoding.BytesFromJSON(u.PublicKey); err != nil {
		return fmt.Errorf("error decoding PublicKey: %w", err)
	} else {
		v.PublicKey = x
	}
	if x, err := encoding.BytesFromJSON(u.Signature); err != nil {
		return fmt.Errorf("error decoding Signature: %w", err)
	} else {
		v.Signature = x
	}
	return nil
}

func (v *EmptyResult) UnmarshalJSON(data []byte) error {
	u := struct {
		Type TransactionType `json:"type"`
	}{}
	u.Type = v.Type()
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	return nil
}

func (v *Envelope) UnmarshalJSON(data []byte) error {
	u := struct {
		Signatures  []json.RawMessage `json:"signatures,omitempty"`
		TxHash      *string           `json:"txHash,omitempty"`
		Transaction *Transaction      `json:"transaction,omitempty"`
	}{}
	u.Signatures = make([]json.RawMessage, len(v.Signatures))
	for i, x := range v.Signatures {
		if y, err := json.Marshal(x); err != nil {
			return fmt.Errorf("error encoding Signatures: %w", err)
		} else {
			u.Signatures[i] = y
		}
	}
	u.TxHash = encoding.BytesToJSON(v.TxHash)
	u.Transaction = v.Transaction
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	v.Signatures = make([]Signature, len(u.Signatures))
	for i, x := range u.Signatures {
		if y, err := UnmarshalSignatureJSON(x); err != nil {
			return fmt.Errorf("error decoding Signatures: %w", err)
		} else {
			v.Signatures[i] = y
		}
	}
	if x, err := encoding.BytesFromJSON(u.TxHash); err != nil {
		return fmt.Errorf("error decoding TxHash: %w", err)
	} else {
		v.TxHash = x
	}
	v.Transaction = u.Transaction
	return nil
}

func (v *InternalGenesis) UnmarshalJSON(data []byte) error {
	u := struct {
		Type TransactionType `json:"type"`
	}{}
	u.Type = v.Type()
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	return nil
}

func (v *InternalLedger) UnmarshalJSON(data []byte) error {
	u := struct {
		Type           AccountType      `json:"type"`
		Url            *url.URL         `json:"url,omitempty"`
		KeyBook        *url.URL         `json:"keyBook,omitempty"`
		ManagerKeyBook *url.URL         `json:"managerKeyBook,omitempty"`
		Index          int64            `json:"index,omitempty"`
		Timestamp      time.Time        `json:"timestamp,omitempty"`
		Synthetic      SyntheticLedger  `json:"synthetic,omitempty"`
		PendingOracle  uint64           `json:"pendingOracle,omitempty"`
		ActiveOracle   uint64           `json:"activeOracle,omitempty"`
		Updates        []AnchorMetadata `json:"updates,omitempty"`
	}{}
	u.Type = v.Type()
	u.Url = v.AccountHeader.Url
	u.KeyBook = v.AccountHeader.KeyBook
	u.ManagerKeyBook = v.AccountHeader.ManagerKeyBook
	u.Index = v.Index
	u.Timestamp = v.Timestamp
	u.Synthetic = v.Synthetic
	u.PendingOracle = v.PendingOracle
	u.ActiveOracle = v.ActiveOracle
	u.Updates = v.Updates
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	v.AccountHeader.Url = u.Url
	v.AccountHeader.KeyBook = u.KeyBook
	v.AccountHeader.ManagerKeyBook = u.ManagerKeyBook
	v.Index = u.Index
	v.Timestamp = u.Timestamp
	v.Synthetic = u.Synthetic
	v.PendingOracle = u.PendingOracle
	v.ActiveOracle = u.ActiveOracle
	v.Updates = u.Updates
	return nil
}

func (v *InternalSendTransactions) UnmarshalJSON(data []byte) error {
	u := struct {
		Type         TransactionType   `json:"type"`
		Transactions []SendTransaction `json:"transactions,omitempty"`
	}{}
	u.Type = v.Type()
	u.Transactions = v.Transactions
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	v.Transactions = u.Transactions
	return nil
}

func (v *InternalTransactionsSent) UnmarshalJSON(data []byte) error {
	u := struct {
		Type         TransactionType `json:"type"`
		Transactions []string        `json:"transactions,omitempty"`
	}{}
	u.Type = v.Type()
	u.Transactions = make([]string, len(v.Transactions))
	for i, x := range v.Transactions {
		u.Transactions[i] = encoding.ChainToJSON(x)
	}
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	v.Transactions = make([][32]byte, len(u.Transactions))
	for i, x := range u.Transactions {
		if x, err := encoding.ChainFromJSON(x); err != nil {
			return fmt.Errorf("error decoding Transactions: %w", err)
		} else {
			v.Transactions[i] = x
		}
	}
	return nil
}

func (v *InternalTransactionsSigned) UnmarshalJSON(data []byte) error {
	u := struct {
		Type         TransactionType        `json:"type"`
		Transactions []TransactionSignature `json:"transactions,omitempty"`
	}{}
	u.Type = v.Type()
	u.Transactions = v.Transactions
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	v.Transactions = u.Transactions
	return nil
}

func (v *IssueTokens) UnmarshalJSON(data []byte) error {
	u := struct {
		Type      TransactionType `json:"type"`
		Recipient *url.URL        `json:"recipient,omitempty"`
		Amount    *string         `json:"amount,omitempty"`
	}{}
	u.Type = v.Type()
	u.Recipient = v.Recipient
	u.Amount = encoding.BigintToJSON(&v.Amount)
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	v.Recipient = u.Recipient
	if x, err := encoding.BigintFromJSON(u.Amount); err != nil {
		return fmt.Errorf("error decoding Amount: %w", err)
	} else {
		v.Amount = *x
	}
	return nil
}

func (v *KeyBook) UnmarshalJSON(data []byte) error {
	u := struct {
		Type           AccountType `json:"type"`
		Url            *url.URL    `json:"url,omitempty"`
		KeyBook        *url.URL    `json:"keyBook,omitempty"`
		ManagerKeyBook *url.URL    `json:"managerKeyBook,omitempty"`
		Pages          []*url.URL  `json:"pages,omitempty"`
	}{}
	u.Type = v.Type()
	u.Url = v.AccountHeader.Url
	u.KeyBook = v.AccountHeader.KeyBook
	u.ManagerKeyBook = v.AccountHeader.ManagerKeyBook
	u.Pages = v.Pages
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	v.AccountHeader.Url = u.Url
	v.AccountHeader.KeyBook = u.KeyBook
	v.AccountHeader.ManagerKeyBook = u.ManagerKeyBook
	v.Pages = u.Pages
	return nil
}

func (v *KeyPage) UnmarshalJSON(data []byte) error {
	u := struct {
		Type           AccountType `json:"type"`
		Url            *url.URL    `json:"url,omitempty"`
		KeyBook        *url.URL    `json:"keyBook,omitempty"`
		ManagerKeyBook *url.URL    `json:"managerKeyBook,omitempty"`
		CreditBalance  *string     `json:"creditBalance,omitempty"`
		Threshold      uint64      `json:"threshold,omitempty"`
		Keys           []*KeySpec  `json:"keys,omitempty"`
	}{}
	u.Type = v.Type()
	u.Url = v.AccountHeader.Url
	u.KeyBook = v.AccountHeader.KeyBook
	u.ManagerKeyBook = v.AccountHeader.ManagerKeyBook
	u.CreditBalance = encoding.BigintToJSON(&v.CreditBalance)
	u.Threshold = v.Threshold
	u.Keys = v.Keys
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	v.AccountHeader.Url = u.Url
	v.AccountHeader.KeyBook = u.KeyBook
	v.AccountHeader.ManagerKeyBook = u.ManagerKeyBook
	if x, err := encoding.BigintFromJSON(u.CreditBalance); err != nil {
		return fmt.Errorf("error decoding CreditBalance: %w", err)
	} else {
		v.CreditBalance = *x
	}
	v.Threshold = u.Threshold
	v.Keys = u.Keys
	return nil
}

func (v *KeySpec) UnmarshalJSON(data []byte) error {
	u := struct {
		PublicKey *string  `json:"publicKey,omitempty"`
		Nonce     uint64   `json:"nonce,omitempty"`
		Owner     *url.URL `json:"owner,omitempty"`
	}{}
	u.PublicKey = encoding.BytesToJSON(v.PublicKey)
	u.Nonce = v.Nonce
	u.Owner = v.Owner
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	if x, err := encoding.BytesFromJSON(u.PublicKey); err != nil {
		return fmt.Errorf("error decoding PublicKey: %w", err)
	} else {
		v.PublicKey = x
	}
	v.Nonce = u.Nonce
	v.Owner = u.Owner
	return nil
}

func (v *KeySpecParams) UnmarshalJSON(data []byte) error {
	u := struct {
		PublicKey *string `json:"publicKey,omitempty"`
	}{}
	u.PublicKey = encoding.BytesToJSON(v.PublicKey)
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	if x, err := encoding.BytesFromJSON(u.PublicKey); err != nil {
		return fmt.Errorf("error decoding PublicKey: %w", err)
	} else {
		v.PublicKey = x
	}
	return nil
}

func (v *LegacyED25519Signature) UnmarshalJSON(data []byte) error {
	u := struct {
		Type      SignatureType `json:"type"`
		Nonce     uint64        `json:"nonce,omitempty"`
		PublicKey *string       `json:"publicKey,omitempty"`
		Signature *string       `json:"signature,omitempty"`
	}{}
	u.Type = v.Type()
	u.Nonce = v.Nonce
	u.PublicKey = encoding.BytesToJSON(v.PublicKey)
	u.Signature = encoding.BytesToJSON(v.Signature)
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	v.Nonce = u.Nonce
	if x, err := encoding.BytesFromJSON(u.PublicKey); err != nil {
		return fmt.Errorf("error decoding PublicKey: %w", err)
	} else {
		v.PublicKey = x
	}
	if x, err := encoding.BytesFromJSON(u.Signature); err != nil {
		return fmt.Errorf("error decoding Signature: %w", err)
	} else {
		v.Signature = x
	}
	return nil
}

func (v *LiteDataAccount) UnmarshalJSON(data []byte) error {
	u := struct {
		Type           AccountType `json:"type"`
		Url            *url.URL    `json:"url,omitempty"`
		KeyBook        *url.URL    `json:"keyBook,omitempty"`
		ManagerKeyBook *url.URL    `json:"managerKeyBook,omitempty"`
		Tail           *string     `json:"tail,omitempty"`
	}{}
	u.Type = v.Type()
	u.Url = v.AccountHeader.Url
	u.KeyBook = v.AccountHeader.KeyBook
	u.ManagerKeyBook = v.AccountHeader.ManagerKeyBook
	u.Tail = encoding.BytesToJSON(v.Tail)
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	v.AccountHeader.Url = u.Url
	v.AccountHeader.KeyBook = u.KeyBook
	v.AccountHeader.ManagerKeyBook = u.ManagerKeyBook
	if x, err := encoding.BytesFromJSON(u.Tail); err != nil {
		return fmt.Errorf("error decoding Tail: %w", err)
	} else {
		v.Tail = x
	}
	return nil
}

func (v *LiteIdentity) UnmarshalJSON(data []byte) error {
	u := struct {
		Type           AccountType `json:"type"`
		Url            *url.URL    `json:"url,omitempty"`
		KeyBook        *url.URL    `json:"keyBook,omitempty"`
		ManagerKeyBook *url.URL    `json:"managerKeyBook,omitempty"`
	}{}
	u.Type = v.Type()
	u.Url = v.AccountHeader.Url
	u.KeyBook = v.AccountHeader.KeyBook
	u.ManagerKeyBook = v.AccountHeader.ManagerKeyBook
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	v.AccountHeader.Url = u.Url
	v.AccountHeader.KeyBook = u.KeyBook
	v.AccountHeader.ManagerKeyBook = u.ManagerKeyBook
	return nil
}

func (v *LiteTokenAccount) UnmarshalJSON(data []byte) error {
	u := struct {
		Type           AccountType `json:"type"`
		Url            *url.URL    `json:"url,omitempty"`
		KeyBook        *url.URL    `json:"keyBook,omitempty"`
		ManagerKeyBook *url.URL    `json:"managerKeyBook,omitempty"`
		TokenUrl       *url.URL    `json:"tokenUrl,omitempty"`
		Balance        *string     `json:"balance,omitempty"`
		Nonce          uint64      `json:"nonce,omitempty"`
		CreditBalance  *string     `json:"creditBalance,omitempty"`
	}{}
	u.Type = v.Type()
	u.Url = v.AccountHeader.Url
	u.KeyBook = v.AccountHeader.KeyBook
	u.ManagerKeyBook = v.AccountHeader.ManagerKeyBook
	u.TokenUrl = v.TokenUrl
	u.Balance = encoding.BigintToJSON(&v.Balance)
	u.Nonce = v.Nonce
	u.CreditBalance = encoding.BigintToJSON(&v.CreditBalance)
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	v.AccountHeader.Url = u.Url
	v.AccountHeader.KeyBook = u.KeyBook
	v.AccountHeader.ManagerKeyBook = u.ManagerKeyBook
	v.TokenUrl = u.TokenUrl
	if x, err := encoding.BigintFromJSON(u.Balance); err != nil {
		return fmt.Errorf("error decoding Balance: %w", err)
	} else {
		v.Balance = *x
	}
	v.Nonce = u.Nonce
	if x, err := encoding.BigintFromJSON(u.CreditBalance); err != nil {
		return fmt.Errorf("error decoding CreditBalance: %w", err)
	} else {
		v.CreditBalance = *x
	}
	return nil
}

func (v *MetricsRequest) UnmarshalJSON(data []byte) error {
	u := struct {
		Metric   string      `json:"metric,omitempty"`
		Duration interface{} `json:"duration,omitempty"`
	}{}
	u.Metric = v.Metric
	u.Duration = encoding.DurationToJSON(v.Duration)
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	v.Metric = u.Metric
	if x, err := encoding.DurationFromJSON(u.Duration); err != nil {
		return fmt.Errorf("error decoding Duration: %w", err)
	} else {
		v.Duration = x
	}
	return nil
}

func (v *MetricsResponse) UnmarshalJSON(data []byte) error {
	u := struct {
		Value interface{} `json:"value,omitempty"`
	}{}
	u.Value = encoding.AnyToJSON(v.Value)
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	if x, err := encoding.AnyFromJSON(u.Value); err != nil {
		return fmt.Errorf("error decoding Value: %w", err)
	} else {
		v.Value = x
	}
	return nil
}

func (v *Object) UnmarshalJSON(data []byte) error {
	u := struct {
		Entry  *string   `json:"entry,omitempty"`
		Height uint64    `json:"height,omitempty"`
		Roots  []*string `json:"roots,omitempty"`
	}{}
	u.Entry = encoding.BytesToJSON(v.Entry)
	u.Height = v.Height
	u.Roots = make([]*string, len(v.Roots))
	for i, x := range v.Roots {
		u.Roots[i] = encoding.BytesToJSON(x)
	}
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	if x, err := encoding.BytesFromJSON(u.Entry); err != nil {
		return fmt.Errorf("error decoding Entry: %w", err)
	} else {
		v.Entry = x
	}
	v.Height = u.Height
	v.Roots = make([][]byte, len(u.Roots))
	for i, x := range u.Roots {
		if x, err := encoding.BytesFromJSON(x); err != nil {
			return fmt.Errorf("error decoding Roots: %w", err)
		} else {
			v.Roots[i] = x
		}
	}
	return nil
}

func (v *PendingTransactionState) UnmarshalJSON(data []byte) error {
	u := struct {
		Type             AccountType       `json:"type"`
		Url              *url.URL          `json:"url,omitempty"`
		KeyBook          *url.URL          `json:"keyBook,omitempty"`
		ManagerKeyBook   *url.URL          `json:"managerKeyBook,omitempty"`
		Signature        []json.RawMessage `json:"signature,omitempty"`
		TransactionState *TxState          `json:"transactionState,omitempty"`
		Status           json.RawMessage   `json:"status,omitempty"`
	}{}
	u.Type = v.Type()
	u.Url = v.AccountHeader.Url
	u.KeyBook = v.AccountHeader.KeyBook
	u.ManagerKeyBook = v.AccountHeader.ManagerKeyBook
	u.Signature = make([]json.RawMessage, len(v.Signature))
	for i, x := range v.Signature {
		if y, err := json.Marshal(x); err != nil {
			return fmt.Errorf("error encoding Signature: %w", err)
		} else {
			u.Signature[i] = y
		}
	}
	u.TransactionState = v.TransactionState
	u.Status = v.Status
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	v.AccountHeader.Url = u.Url
	v.AccountHeader.KeyBook = u.KeyBook
	v.AccountHeader.ManagerKeyBook = u.ManagerKeyBook
	v.Signature = make([]Signature, len(u.Signature))
	for i, x := range u.Signature {
		if y, err := UnmarshalSignatureJSON(x); err != nil {
			return fmt.Errorf("error decoding Signature: %w", err)
		} else {
			v.Signature[i] = y
		}
	}
	v.TransactionState = u.TransactionState
	v.Status = u.Status
	return nil
}

func (v *Receipt) UnmarshalJSON(data []byte) error {
	u := struct {
		Start   *string        `json:"start,omitempty"`
		Entries []ReceiptEntry `json:"entries,omitempty"`
	}{}
	u.Start = encoding.BytesToJSON(v.Start)
	u.Entries = v.Entries
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	if x, err := encoding.BytesFromJSON(u.Start); err != nil {
		return fmt.Errorf("error decoding Start: %w", err)
	} else {
		v.Start = x
	}
	v.Entries = u.Entries
	return nil
}

func (v *ReceiptEntry) UnmarshalJSON(data []byte) error {
	u := struct {
		Right bool    `json:"right,omitempty"`
		Hash  *string `json:"hash,omitempty"`
	}{}
	u.Right = v.Right
	u.Hash = encoding.BytesToJSON(v.Hash)
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	v.Right = u.Right
	if x, err := encoding.BytesFromJSON(u.Hash); err != nil {
		return fmt.Errorf("error decoding Hash: %w", err)
	} else {
		v.Hash = x
	}
	return nil
}

func (v *RemoveManager) UnmarshalJSON(data []byte) error {
	u := struct {
		Type TransactionType `json:"type"`
	}{}
	u.Type = v.Type()
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	return nil
}

func (v *RequestDataEntry) UnmarshalJSON(data []byte) error {
	u := struct {
		Url       *url.URL `json:"url,omitempty"`
		EntryHash string   `json:"entryHash,omitempty"`
	}{}
	u.Url = v.Url
	u.EntryHash = encoding.ChainToJSON(v.EntryHash)
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	v.Url = u.Url
	if x, err := encoding.ChainFromJSON(u.EntryHash); err != nil {
		return fmt.Errorf("error decoding EntryHash: %w", err)
	} else {
		v.EntryHash = x
	}
	return nil
}

func (v *ResponseDataEntry) UnmarshalJSON(data []byte) error {
	u := struct {
		EntryHash string    `json:"entryHash,omitempty"`
		Entry     DataEntry `json:"entry,omitempty"`
	}{}
	u.EntryHash = encoding.ChainToJSON(v.EntryHash)
	u.Entry = v.Entry
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	if x, err := encoding.ChainFromJSON(u.EntryHash); err != nil {
		return fmt.Errorf("error decoding EntryHash: %w", err)
	} else {
		v.EntryHash = x
	}
	v.Entry = u.Entry
	return nil
}

func (v *SegWitDataEntry) UnmarshalJSON(data []byte) error {
	u := struct {
		Type      TransactionType `json:"type"`
		Cause     string          `json:"cause,omitempty"`
		EntryUrl  *url.URL        `json:"entryUrl,omitempty"`
		EntryHash string          `json:"entryHash,omitempty"`
	}{}
	u.Type = v.Type()
	u.Cause = encoding.ChainToJSON(v.Cause)
	u.EntryUrl = v.EntryUrl
	u.EntryHash = encoding.ChainToJSON(v.EntryHash)
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	if x, err := encoding.ChainFromJSON(u.Cause); err != nil {
		return fmt.Errorf("error decoding Cause: %w", err)
	} else {
		v.Cause = x
	}
	v.EntryUrl = u.EntryUrl
	if x, err := encoding.ChainFromJSON(u.EntryHash); err != nil {
		return fmt.Errorf("error decoding EntryHash: %w", err)
	} else {
		v.EntryHash = x
	}
	return nil
}

func (v *SendTokens) UnmarshalJSON(data []byte) error {
	u := struct {
		Type TransactionType   `json:"type"`
		Hash string            `json:"hash,omitempty"`
		Meta json.RawMessage   `json:"meta,omitempty"`
		To   []*TokenRecipient `json:"to,omitempty"`
	}{}
	u.Type = v.Type()
	u.Hash = encoding.ChainToJSON(v.Hash)
	u.Meta = v.Meta
	u.To = v.To
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	if x, err := encoding.ChainFromJSON(u.Hash); err != nil {
		return fmt.Errorf("error decoding Hash: %w", err)
	} else {
		v.Hash = x
	}
	v.Meta = u.Meta
	v.To = u.To
	return nil
}

func (v *SendTransaction) UnmarshalJSON(data []byte) error {
	u := struct {
		Payload   json.RawMessage `json:"payload,omitempty"`
		Recipient *url.URL        `json:"recipient,omitempty"`
	}{}
	if x, err := json.Marshal(v.Payload); err != nil {
		return fmt.Errorf("error encoding Payload: %w", err)
	} else {
		u.Payload = x
	}
	u.Recipient = v.Recipient
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	if x, err := UnmarshalTransactionJSON(u.Payload); err != nil {
		return fmt.Errorf("error decoding Payload: %w", err)
	} else {
		v.Payload = x
	}

	v.Recipient = u.Recipient
	return nil
}

func (v *SignPending) UnmarshalJSON(data []byte) error {
	u := struct {
		Type TransactionType `json:"type"`
	}{}
	u.Type = v.Type()
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	return nil
}

func (v *SyntheticAnchor) UnmarshalJSON(data []byte) error {
	u := struct {
		Type            TransactionType `json:"type"`
		Source          *url.URL        `json:"source,omitempty"`
		Major           bool            `json:"major,omitempty"`
		RootAnchor      string          `json:"rootAnchor,omitempty"`
		RootIndex       uint64          `json:"rootIndex,omitempty"`
		Block           uint64          `json:"block,omitempty"`
		SourceIndex     uint64          `json:"sourceIndex,omitempty"`
		SourceBlock     uint64          `json:"sourceBlock,omitempty"`
		AcmeOraclePrice uint64          `json:"acmeOraclePrice,omitempty"`
		Receipt         Receipt         `json:"receipt,omitempty"`
	}{}
	u.Type = v.Type()
	u.Source = v.Source
	u.Major = v.Major
	u.RootAnchor = encoding.ChainToJSON(v.RootAnchor)
	u.RootIndex = v.RootIndex
	u.Block = v.Block
	u.SourceIndex = v.SourceIndex
	u.SourceBlock = v.SourceBlock
	u.AcmeOraclePrice = v.AcmeOraclePrice
	u.Receipt = v.Receipt
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	v.Source = u.Source
	v.Major = u.Major
	if x, err := encoding.ChainFromJSON(u.RootAnchor); err != nil {
		return fmt.Errorf("error decoding RootAnchor: %w", err)
	} else {
		v.RootAnchor = x
	}
	v.RootIndex = u.RootIndex
	v.Block = u.Block
	v.SourceIndex = u.SourceIndex
	v.SourceBlock = u.SourceBlock
	v.AcmeOraclePrice = u.AcmeOraclePrice
	v.Receipt = u.Receipt
	return nil
}

func (v *SyntheticBurnTokens) UnmarshalJSON(data []byte) error {
	u := struct {
		Type   TransactionType `json:"type"`
		Cause  string          `json:"cause,omitempty"`
		Amount *string         `json:"amount,omitempty"`
	}{}
	u.Type = v.Type()
	u.Cause = encoding.ChainToJSON(v.Cause)
	u.Amount = encoding.BigintToJSON(&v.Amount)
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	if x, err := encoding.ChainFromJSON(u.Cause); err != nil {
		return fmt.Errorf("error decoding Cause: %w", err)
	} else {
		v.Cause = x
	}
	if x, err := encoding.BigintFromJSON(u.Amount); err != nil {
		return fmt.Errorf("error decoding Amount: %w", err)
	} else {
		v.Amount = *x
	}
	return nil
}

func (v *SyntheticCreateChain) UnmarshalJSON(data []byte) error {
	u := struct {
		Type   TransactionType `json:"type"`
		Cause  string          `json:"cause,omitempty"`
		Chains []ChainParams   `json:"chains,omitempty"`
	}{}
	u.Type = v.Type()
	u.Cause = encoding.ChainToJSON(v.Cause)
	u.Chains = v.Chains
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	if x, err := encoding.ChainFromJSON(u.Cause); err != nil {
		return fmt.Errorf("error decoding Cause: %w", err)
	} else {
		v.Cause = x
	}
	v.Chains = u.Chains
	return nil
}

func (v *SyntheticDepositCredits) UnmarshalJSON(data []byte) error {
	u := struct {
		Type   TransactionType `json:"type"`
		Cause  string          `json:"cause,omitempty"`
		Amount uint64          `json:"amount,omitempty"`
	}{}
	u.Type = v.Type()
	u.Cause = encoding.ChainToJSON(v.Cause)
	u.Amount = v.Amount
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	if x, err := encoding.ChainFromJSON(u.Cause); err != nil {
		return fmt.Errorf("error decoding Cause: %w", err)
	} else {
		v.Cause = x
	}
	v.Amount = u.Amount
	return nil
}

func (v *SyntheticDepositTokens) UnmarshalJSON(data []byte) error {
	u := struct {
		Type   TransactionType `json:"type"`
		Cause  string          `json:"cause,omitempty"`
		Token  *url.URL        `json:"token,omitempty"`
		Amount *string         `json:"amount,omitempty"`
	}{}
	u.Type = v.Type()
	u.Cause = encoding.ChainToJSON(v.Cause)
	u.Token = v.Token
	u.Amount = encoding.BigintToJSON(&v.Amount)
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	if x, err := encoding.ChainFromJSON(u.Cause); err != nil {
		return fmt.Errorf("error decoding Cause: %w", err)
	} else {
		v.Cause = x
	}
	v.Token = u.Token
	if x, err := encoding.BigintFromJSON(u.Amount); err != nil {
		return fmt.Errorf("error decoding Amount: %w", err)
	} else {
		v.Amount = *x
	}
	return nil
}

func (v *SyntheticLedger) UnmarshalJSON(data []byte) error {
	u := struct {
		Nonce    uint64   `json:"nonce,omitempty"`
		Produced []string `json:"produced,omitempty"`
		Unsigned []string `json:"unsigned,omitempty"`
		Unsent   []string `json:"unsent,omitempty"`
	}{}
	u.Nonce = v.Nonce
	u.Produced = make([]string, len(v.Produced))
	for i, x := range v.Produced {
		u.Produced[i] = encoding.ChainToJSON(x)
	}
	u.Unsigned = make([]string, len(v.Unsigned))
	for i, x := range v.Unsigned {
		u.Unsigned[i] = encoding.ChainToJSON(x)
	}
	u.Unsent = make([]string, len(v.Unsent))
	for i, x := range v.Unsent {
		u.Unsent[i] = encoding.ChainToJSON(x)
	}
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	v.Nonce = u.Nonce
	v.Produced = make([][32]byte, len(u.Produced))
	for i, x := range u.Produced {
		if x, err := encoding.ChainFromJSON(x); err != nil {
			return fmt.Errorf("error decoding Produced: %w", err)
		} else {
			v.Produced[i] = x
		}
	}
	v.Unsigned = make([][32]byte, len(u.Unsigned))
	for i, x := range u.Unsigned {
		if x, err := encoding.ChainFromJSON(x); err != nil {
			return fmt.Errorf("error decoding Unsigned: %w", err)
		} else {
			v.Unsigned[i] = x
		}
	}
	v.Unsent = make([][32]byte, len(u.Unsent))
	for i, x := range u.Unsent {
		if x, err := encoding.ChainFromJSON(x); err != nil {
			return fmt.Errorf("error decoding Unsent: %w", err)
		} else {
			v.Unsent[i] = x
		}
	}
	return nil
}

func (v *SyntheticMirror) UnmarshalJSON(data []byte) error {
	u := struct {
		Type    TransactionType  `json:"type"`
		Objects []AnchoredRecord `json:"objects,omitempty"`
	}{}
	u.Type = v.Type()
	u.Objects = v.Objects
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	v.Objects = u.Objects
	return nil
}

func (v *SyntheticWriteData) UnmarshalJSON(data []byte) error {
	u := struct {
		Type  TransactionType `json:"type"`
		Cause string          `json:"cause,omitempty"`
		Entry DataEntry       `json:"entry,omitempty"`
	}{}
	u.Type = v.Type()
	u.Cause = encoding.ChainToJSON(v.Cause)
	u.Entry = v.Entry
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	if x, err := encoding.ChainFromJSON(u.Cause); err != nil {
		return fmt.Errorf("error decoding Cause: %w", err)
	} else {
		v.Cause = x
	}
	v.Entry = u.Entry
	return nil
}

func (v *TokenAccount) UnmarshalJSON(data []byte) error {
	u := struct {
		Type           AccountType `json:"type"`
		Url            *url.URL    `json:"url,omitempty"`
		KeyBook        *url.URL    `json:"keyBook,omitempty"`
		ManagerKeyBook *url.URL    `json:"managerKeyBook,omitempty"`
		TokenUrl       *url.URL    `json:"tokenUrl,omitempty"`
		Balance        *string     `json:"balance,omitempty"`
		Scratch        bool        `json:"scratch,omitempty"`
	}{}
	u.Type = v.Type()
	u.Url = v.AccountHeader.Url
	u.KeyBook = v.AccountHeader.KeyBook
	u.ManagerKeyBook = v.AccountHeader.ManagerKeyBook
	u.TokenUrl = v.TokenUrl
	u.Balance = encoding.BigintToJSON(&v.Balance)
	u.Scratch = v.Scratch
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	v.AccountHeader.Url = u.Url
	v.AccountHeader.KeyBook = u.KeyBook
	v.AccountHeader.ManagerKeyBook = u.ManagerKeyBook
	v.TokenUrl = u.TokenUrl
	if x, err := encoding.BigintFromJSON(u.Balance); err != nil {
		return fmt.Errorf("error decoding Balance: %w", err)
	} else {
		v.Balance = *x
	}
	v.Scratch = u.Scratch
	return nil
}

func (v *TokenIssuer) UnmarshalJSON(data []byte) error {
	u := struct {
		Type           AccountType `json:"type"`
		Url            *url.URL    `json:"url,omitempty"`
		KeyBook        *url.URL    `json:"keyBook,omitempty"`
		ManagerKeyBook *url.URL    `json:"managerKeyBook,omitempty"`
		Symbol         string      `json:"symbol,omitempty"`
		Precision      uint64      `json:"precision,omitempty"`
		Properties     *url.URL    `json:"properties,omitempty"`
		Supply         *string     `json:"supply,omitempty"`
		HasSupplyLimit bool        `json:"hasSupplyLimit,omitempty"`
	}{}
	u.Type = v.Type()
	u.Url = v.AccountHeader.Url
	u.KeyBook = v.AccountHeader.KeyBook
	u.ManagerKeyBook = v.AccountHeader.ManagerKeyBook
	u.Symbol = v.Symbol
	u.Precision = v.Precision
	u.Properties = v.Properties
	u.Supply = encoding.BigintToJSON(&v.Supply)
	u.HasSupplyLimit = v.HasSupplyLimit
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	v.AccountHeader.Url = u.Url
	v.AccountHeader.KeyBook = u.KeyBook
	v.AccountHeader.ManagerKeyBook = u.ManagerKeyBook
	v.Symbol = u.Symbol
	v.Precision = u.Precision
	v.Properties = u.Properties
	if x, err := encoding.BigintFromJSON(u.Supply); err != nil {
		return fmt.Errorf("error decoding Supply: %w", err)
	} else {
		v.Supply = *x
	}
	v.HasSupplyLimit = u.HasSupplyLimit
	return nil
}

func (v *TokenRecipient) UnmarshalJSON(data []byte) error {
	u := struct {
		Url    *url.URL `json:"url,omitempty"`
		Amount *string  `json:"amount,omitempty"`
	}{}
	u.Url = v.Url
	u.Amount = encoding.BigintToJSON(&v.Amount)
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	v.Url = u.Url
	if x, err := encoding.BigintFromJSON(u.Amount); err != nil {
		return fmt.Errorf("error decoding Amount: %w", err)
	} else {
		v.Amount = *x
	}
	return nil
}

func (v *Transaction) UnmarshalJSON(data []byte) error {
	u := struct {
		Origin        *url.URL        `json:"origin,omitempty"`
		KeyPageHeight uint64          `json:"keyPageHeight,omitempty"`
		KeyPageIndex  uint64          `json:"keyPageIndex,omitempty"`
		Nonce         uint64          `json:"nonce,omitempty"`
		Body          json.RawMessage `json:"body,omitempty"`
	}{}
	u.Origin = v.TransactionHeader.Origin
	u.KeyPageHeight = v.TransactionHeader.KeyPageHeight
	u.KeyPageIndex = v.TransactionHeader.KeyPageIndex
	u.Nonce = v.TransactionHeader.Nonce
	if x, err := json.Marshal(v.Body); err != nil {
		return fmt.Errorf("error encoding Body: %w", err)
	} else {
		u.Body = x
	}
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	v.TransactionHeader.Origin = u.Origin
	v.TransactionHeader.KeyPageHeight = u.KeyPageHeight
	v.TransactionHeader.KeyPageIndex = u.KeyPageIndex
	v.TransactionHeader.Nonce = u.Nonce
	if x, err := UnmarshalTransactionJSON(u.Body); err != nil {
		return fmt.Errorf("error decoding Body: %w", err)
	} else {
		v.Body = x
	}

	return nil
}

func (v *TransactionSignature) UnmarshalJSON(data []byte) error {
	u := struct {
		Transaction string          `json:"transaction,omitempty"`
		Signature   json.RawMessage `json:"signature,omitempty"`
	}{}
	u.Transaction = encoding.ChainToJSON(v.Transaction)
	if x, err := json.Marshal(v.Signature); err != nil {
		return fmt.Errorf("error encoding Signature: %w", err)
	} else {
		u.Signature = x
	}
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	if x, err := encoding.ChainFromJSON(u.Transaction); err != nil {
		return fmt.Errorf("error decoding Transaction: %w", err)
	} else {
		v.Transaction = x
	}
	if x, err := UnmarshalSignatureJSON(u.Signature); err != nil {
		return fmt.Errorf("error decoding Signature: %w", err)
	} else {
		v.Signature = x
	}

	return nil
}

func (v *TransactionState) UnmarshalJSON(data []byte) error {
	u := struct {
		Type           AccountType        `json:"type"`
		Url            *url.URL           `json:"url,omitempty"`
		KeyBook        *url.URL           `json:"keyBook,omitempty"`
		ManagerKeyBook *url.URL           `json:"managerKeyBook,omitempty"`
		SigInfo        *TransactionHeader `json:"sigInfo,omitempty"`
		Transaction    json.RawMessage    `json:"transaction,omitempty"`
	}{}
	u.Type = v.Type()
	u.Url = v.AccountHeader.Url
	u.KeyBook = v.AccountHeader.KeyBook
	u.ManagerKeyBook = v.AccountHeader.ManagerKeyBook
	u.SigInfo = v.TxState.SigInfo
	if x, err := json.Marshal(v.TxState.Transaction); err != nil {
		return fmt.Errorf("error encoding Transaction: %w", err)
	} else {
		u.Transaction = x
	}
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	v.AccountHeader.Url = u.Url
	v.AccountHeader.KeyBook = u.KeyBook
	v.AccountHeader.ManagerKeyBook = u.ManagerKeyBook
	v.TxState.SigInfo = u.SigInfo
	if x, err := UnmarshalTransactionJSON(u.Transaction); err != nil {
		return fmt.Errorf("error decoding Transaction: %w", err)
	} else {
		v.TxState.Transaction = x
	}

	return nil
}

func (v *TransactionStatus) UnmarshalJSON(data []byte) error {
	u := struct {
		Remote    bool            `json:"remote,omitempty"`
		Delivered bool            `json:"delivered,omitempty"`
		Pending   bool            `json:"pending,omitempty"`
		Code      uint64          `json:"code,omitempty"`
		Message   string          `json:"message,omitempty"`
		Result    json.RawMessage `json:"result,omitempty"`
	}{}
	u.Remote = v.Remote
	u.Delivered = v.Delivered
	u.Pending = v.Pending
	u.Code = v.Code
	u.Message = v.Message
	if x, err := json.Marshal(v.Result); err != nil {
		return fmt.Errorf("error encoding Result: %w", err)
	} else {
		u.Result = x
	}
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	v.Remote = u.Remote
	v.Delivered = u.Delivered
	v.Pending = u.Pending
	v.Code = u.Code
	v.Message = u.Message
	if x, err := UnmarshalTransactionResultJSON(u.Result); err != nil {
		return fmt.Errorf("error decoding Result: %w", err)
	} else {
		v.Result = x
	}

	return nil
}

func (v *TxState) UnmarshalJSON(data []byte) error {
	u := struct {
		SigInfo     *TransactionHeader `json:"sigInfo,omitempty"`
		Transaction json.RawMessage    `json:"transaction,omitempty"`
	}{}
	u.SigInfo = v.SigInfo
	if x, err := json.Marshal(v.Transaction); err != nil {
		return fmt.Errorf("error encoding Transaction: %w", err)
	} else {
		u.Transaction = x
	}
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	v.SigInfo = u.SigInfo
	if x, err := UnmarshalTransactionJSON(u.Transaction); err != nil {
		return fmt.Errorf("error decoding Transaction: %w", err)
	} else {
		v.Transaction = x
	}

	return nil
}

func (v *UpdateKeyPage) UnmarshalJSON(data []byte) error {
	u := struct {
		Type      TransactionType  `json:"type"`
		Operation KeyPageOperation `json:"operation,omitempty"`
		Key       *string          `json:"key,omitempty"`
		NewKey    *string          `json:"newKey,omitempty"`
		Owner     *url.URL         `json:"owner,omitempty"`
		Threshold uint64           `json:"threshold,omitempty"`
	}{}
	u.Type = v.Type()
	u.Operation = v.Operation
	u.Key = encoding.BytesToJSON(v.Key)
	u.NewKey = encoding.BytesToJSON(v.NewKey)
	u.Owner = v.Owner
	u.Threshold = v.Threshold
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	v.Operation = u.Operation
	if x, err := encoding.BytesFromJSON(u.Key); err != nil {
		return fmt.Errorf("error decoding Key: %w", err)
	} else {
		v.Key = x
	}
	if x, err := encoding.BytesFromJSON(u.NewKey); err != nil {
		return fmt.Errorf("error decoding NewKey: %w", err)
	} else {
		v.NewKey = x
	}
	v.Owner = u.Owner
	v.Threshold = u.Threshold
	return nil
}

func (v *UpdateManager) UnmarshalJSON(data []byte) error {
	u := struct {
		Type           TransactionType `json:"type"`
		ManagerKeyBook *url.URL        `json:"managerKeyBook,omitempty"`
	}{}
	u.Type = v.Type()
	u.ManagerKeyBook = v.ManagerKeyBook
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	v.ManagerKeyBook = u.ManagerKeyBook
	return nil
}

func (v *WriteData) UnmarshalJSON(data []byte) error {
	u := struct {
		Type  TransactionType `json:"type"`
		Entry DataEntry       `json:"entry,omitempty"`
	}{}
	u.Type = v.Type()
	u.Entry = v.Entry
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	v.Entry = u.Entry
	return nil
}

func (v *WriteDataResult) UnmarshalJSON(data []byte) error {
	u := struct {
		Type       TransactionType `json:"type"`
		EntryHash  string          `json:"entryHash,omitempty"`
		AccountUrl *url.URL        `json:"accountUrl,omitempty"`
		AccountID  *string         `json:"accountID,omitempty"`
	}{}
	u.Type = v.Type()
	u.EntryHash = encoding.ChainToJSON(v.EntryHash)
	u.AccountUrl = v.AccountUrl
	u.AccountID = encoding.BytesToJSON(v.AccountID)
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	if x, err := encoding.ChainFromJSON(u.EntryHash); err != nil {
		return fmt.Errorf("error decoding EntryHash: %w", err)
	} else {
		v.EntryHash = x
	}
	v.AccountUrl = u.AccountUrl
	if x, err := encoding.BytesFromJSON(u.AccountID); err != nil {
		return fmt.Errorf("error decoding AccountID: %w", err)
	} else {
		v.AccountID = x
	}
	return nil
}

func (v *WriteDataTo) UnmarshalJSON(data []byte) error {
	u := struct {
		Type      TransactionType `json:"type"`
		Recipient *url.URL        `json:"recipient,omitempty"`
		Entry     DataEntry       `json:"entry,omitempty"`
	}{}
	u.Type = v.Type()
	u.Recipient = v.Recipient
	u.Entry = v.Entry
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	v.Recipient = u.Recipient
	v.Entry = u.Entry
	return nil
}
