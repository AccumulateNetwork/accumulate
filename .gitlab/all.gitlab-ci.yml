go build:
  extends: [ .rules all, .go ]
  needs:
    - job: build-image:golang
      optional: true
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  script:
  - go build -v ./...
  - (cd test/cmd/manual; go build -v .)

.go test:
  extends: [ .rules all, .go ]
  needs:
    - job: build-image:golang
      optional: true
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  artifacts:
    when: always
    reports:
      junit: report.xml

go test 1/2:
  # Main tests
  extends: .go test
  variables:
    GOMODCACHE: ''
    GOLANGCI_LINT_CACHE: ''
  artifacts:
    paths:
      - failures/*
  script:
  - export RECORD_FAILURE="${PWD}/failures"
  - go run gotest.tools/gotestsum --junitfile report.xml --format testname -- -tags testnet ./...

go test 2/2:
  # No-mmap indexer test
  extends: .go test
  variables:
    GOMODCACHE: ''
    GOLANGCI_LINT_CACHE: ''
  artifacts:
    paths:
      - failures/*
  script:
  - export RECORD_FAILURE="${PWD}/failures"
  - go run gotest.tools/gotestsum --junitfile report.xml --format testname -- -tags no_mmap ./internal/util/indexing

.go test x:
  # Full devnet validation test
  extends: .go test
  variables:
    GLOBALS: '{"executorVersion": "v2"}'
  script:
  - go run -tags testnet ./cmd/accumulated init devnet -w .nodes -b 1 -v 1 -f 0 --faucet-seed ci --globals "${GLOBALS}"
  - go run -tags testnet ./cmd/accumulated run devnet -w .nodes --faucet-seed ci &
  - sleep 10
  - go run gotest.tools/gotestsum --junitfile report.xml --format testname -- -timeout 30m ./test/validate -short -test.validate.network "$PWD/.nodes/node-1/dnn/" -run TestValidateNetwork

lint:
  extends: [ .rules all, .go ]
  needs:
    - job: build-image:golang
      optional: true
  variables:
    GIT_DEPTH: 0
  before_script:
    - function die { echo -e "${BOLD_RED}${1}${NO_COLOR}"; false; }
    - function check-diff { git diff --quiet "$@" && return 0; git --no-pager -c color.ui=always diff; return 1; }
  script:
    - echo -e "${SECTION}section_start:`date +%s`:lint\r${SECTION}Lint"
    - go run ./tools/cmd/golangci-lint run --verbose --timeout 20m
    - echo -e "${SECTION}section_end:`date +%s`:lint\r${SECTION}"

    - echo -e "${SECTION}section_start:`date +%s`:tidy\r${SECTION}Verify go.mod is tidy"
    - go mod tidy
    - check-diff go.mod go.sum || die "Go mod files are not tidy. Please run \`go mod tidy\`."
    - echo -e "${SECTION}section_end:`date +%s`:tidy\r${SECTION}"

    - echo -e "${SECTION}section_start:`date +%s`:generate\r${SECTION}Verify generated files are up to date"
    - go generate -x ./...
    - check-diff || die "Generated files are not up to date. Please run \`go generate ./...\`."
    - echo -e "${SECTION}section_end:`date +%s`:generate\r${SECTION}"

    - echo -e "${SECTION}section_start:`date +%s`:imports\r${SECTION}Verify code is correctly formatted"
    - go run github.com/rinchsan/gosimports/cmd/gosimports -l */ | tee fmt.log
    - test -s fmt.log && die "Code is incorrectly formatted. Please run \`gosimports -w .\` (or \`./scripts/imports.sh\`)."
    - echo -e "${SECTION}section_end:`date +%s`:imports\r${SECTION}"
