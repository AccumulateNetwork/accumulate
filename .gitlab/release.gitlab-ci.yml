.rules release:
  rules:
  - if: ($CI_COMMIT_BRANCH == 'release-1.0' || $CI_COMMIT_TAG != null) && $CI_PIPELINE_SOURCE != 'merge_request_event'

git describe:
  stage: test
  extends: .rules all
  needs: []
  script:
  - git fetch --unshallow
  - echo "GIT_DESCRIBE=$(git describe --dirty)" >> git.env
  artifacts:
    reports:
      dotenv: git.env

docker buildx:
  stage: test
  extends: .rules release
  image: docker:20-git
  needs: []
  variables:
    GIT_STRATEGY: none
  artifacts:
    paths:
      - buildx
    expire_in: 1 day
  services: [ docker:20-dind ]
  script:
    - export DOCKER_BUILDKIT=1
    - git clone https://github.com/docker/buildx ./docker-buildx
    - docker build --platform=local -o . ./docker-buildx

build main image:
  stage: test
  extends: .rules release
  needs: [ docker buildx ]
  image: docker:20
  timeout: 2 hours
  services:
    - name: docker:20-dind
      command: [ --experimental ] # Do we need this?
  before_script:
    - mkdir -p ~/.docker/cli-plugins
    - mv buildx ~/.docker/cli-plugins/docker-buildx
    - docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
  script:
    - docker buildx create --use
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker buildx build --platform linux/amd64,linux/arm64 --push -t ${PRODUCTION_IMAGE} .

build binaries:
  stage: test
  extends: [ .rules release, .go ]
  needs: [ git describe ]
  # rules:
  # - if: ($CI_COMMIT_BRANCH != 'develop' && $CI_COMMIT_TAG == null) || $CI_PIPELINE_SOURCE == 'merge_request_event'
  #   when: manual
  before_script:
  - |
    function build-daemon {
      export GOOS=$1
      export GOARCH=$2
      BIN=accumulated
      [ -z "$GOOS" ] || BIN=${BIN}-${GOOS}
      [ -z "$GOARCH" ] || BIN=${BIN}-${GOARCH}
      [[ $GOOS == windows ]] && BIN=${BIN}.exe
      export BUILDFLAGS="-o ${BIN}"
      echo -e "${SECTION}section_start:`date +%s`:build_${GOOS}_${GOARCH}\r${SECTION}Build accumulated for $GOOS $GOARCH"
      make GIT_COMMIT=${CI_COMMIT_SHA} GIT_DESCRIBE=${GIT_DESCRIBE}
      echo -e "${SECTION}section_end:`date +%s`:build_${GOOS}_${GOARCH}\r${SECTION}";
    }
  script:
    - build-daemon linux amd64
    - build-daemon linux arm64
    - build-daemon windows amd64
    - build-daemon windows arm64
    - build-daemon darwin amd64
    - build-daemon darwin arm64
  artifacts:
    paths:
      - accumulated-*
