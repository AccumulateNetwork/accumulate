package query

// GENERATED BY go run ./tools/cmd/gen-types. DO NOT EDIT.

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"

	"gitlab.com/accumulatenetwork/accumulate/internal/encoding"
)

// NewRequest creates a new Request for the specified QueryType.
func NewRequest(typ QueryType) (Request, error) {
	switch typ {
	case QueryTypeChainId:
		return new(RequestByChainId), nil
	case QueryTypeTxId:
		return new(RequestByTxId), nil
	case QueryTypeUrl:
		return new(RequestByUrl), nil
	case QueryTypeData:
		return new(RequestDataEntry), nil
	case QueryTypeDataSet:
		return new(RequestDataEntrySet), nil
	case QueryTypeDirectoryUrl:
		return new(RequestDirectory), nil
	case QueryTypeKeyPageIndex:
		return new(RequestKeyPageIndex), nil
	case QueryTypeMinorBlocks:
		return new(RequestMinorBlocks), nil
	case QueryTypeSynth:
		return new(RequestSynth), nil
	case QueryTypeTxHistory:
		return new(RequestTxHistory), nil
	case QueryTypeUnknown:
		return new(UnknownRequest), nil
	default:
		return nil, fmt.Errorf("unknown query %v", typ)
	}
}

//EqualRequest is used to compare the values of the union
func EqualRequest(a, b Request) bool {
	if a == b {
		return true
	}
	switch a := a.(type) {
	case *RequestByChainId:
		b, ok := b.(*RequestByChainId)
		return ok && a.Equal(b)
	case *RequestByTxId:
		b, ok := b.(*RequestByTxId)
		return ok && a.Equal(b)
	case *RequestByUrl:
		b, ok := b.(*RequestByUrl)
		return ok && a.Equal(b)
	case *RequestDataEntry:
		b, ok := b.(*RequestDataEntry)
		return ok && a.Equal(b)
	case *RequestDataEntrySet:
		b, ok := b.(*RequestDataEntrySet)
		return ok && a.Equal(b)
	case *RequestDirectory:
		b, ok := b.(*RequestDirectory)
		return ok && a.Equal(b)
	case *RequestKeyPageIndex:
		b, ok := b.(*RequestKeyPageIndex)
		return ok && a.Equal(b)
	case *RequestMinorBlocks:
		b, ok := b.(*RequestMinorBlocks)
		return ok && a.Equal(b)
	case *RequestSynth:
		b, ok := b.(*RequestSynth)
		return ok && a.Equal(b)
	case *RequestTxHistory:
		b, ok := b.(*RequestTxHistory)
		return ok && a.Equal(b)
	case *UnknownRequest:
		b, ok := b.(*UnknownRequest)
		return ok && a.Equal(b)
	default:
		return false
	}
}

// UnmarshalQueryType unmarshals the QueryType from the start of a Request.
func UnmarshalQueryType(r io.Reader) (QueryType, error) {
	var typ QueryType
	err := encoding.UnmarshalEnumType(r, &typ)
	return typ, err
}

// UnmarshalRequest unmarshals a Request.
func UnmarshalRequest(data []byte) (Request, error) {
	typ, err := UnmarshalQueryType(bytes.NewReader(data))
	if err != nil {
		return nil, err
	}

	v, err := NewRequest(typ)
	if err != nil {
		return nil, err
	}

	err = v.UnmarshalBinary(data)
	if err != nil {
		return nil, err
	}

	return v, nil
}

// UnmarshalRequestFrom unmarshals a Request.
func UnmarshalRequestFrom(rd io.ReadSeeker) (Request, error) {
	// Get the reader's current position
	pos, err := rd.Seek(0, io.SeekCurrent)
	if err != nil {
		return nil, err
	}

	// Read the type code
	typ, err := UnmarshalQueryType(rd)
	if err != nil {
		return nil, err
	}

	// Reset the reader's position
	_, err = rd.Seek(pos, io.SeekStart)
	if err != nil {
		return nil, err
	}

	// Create a new transaction result
	v, err := NewRequest(QueryType(typ))
	if err != nil {
		return nil, err
	}

	// Unmarshal the result
	err = v.UnmarshalBinaryFrom(rd)
	if err != nil {
		return nil, err
	}

	return v, nil
}

// UnmarshalRequestJson unmarshals a Request.
func UnmarshalRequestJSON(data []byte) (Request, error) {
	var typ struct{ Type QueryType }
	err := json.Unmarshal(data, &typ)
	if err != nil {
		return nil, err
	}

	acnt, err := NewRequest(typ.Type)
	if err != nil {
		return nil, err
	}

	err = json.Unmarshal(data, acnt)
	if err != nil {
		return nil, err
	}

	return acnt, nil
}
