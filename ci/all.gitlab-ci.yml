go test:
  stage: test
  extends: [ .rules all, .go ]
  needs: []
  artifacts:
    when: always
    reports:
      junit: report.xml
  script:
  - go build -v ./...
  - go run gotest.tools/gotestsum --junitfile report.xml --format testname

lint:
  stage: test
  extends: [ .rules all, .go ]
  needs: []
  before_script:
    - function die { echo -e "${BOLD_RED}${1}${NO_COLOR}"; false; }
  script:
    - echo -e "${SECTION}section_start:`date +%s`:vet\r${SECTION}Vet"
    - go vet ./...
    - echo -e "${SECTION}section_end:`date +%s`:vet\r${SECTION}"

    - echo -e "${SECTION}section_start:`date +%s`:lint\r${SECTION}Lint"
    - go run ./tools/cmd/golangci-lint run --verbose --timeout=10m
    - echo -e "${SECTION}section_end:`date +%s`:lint\r${SECTION}"

    - echo -e "${SECTION}section_start:`date +%s`:tidy\r${SECTION}Verify go.mod is tidy"
    - go mod tidy
    - git diff --quiet go.mod go.sum || die "Go mod files are not tidy. Please run \`go mod tidy\`."
    - echo -e "${SECTION}section_end:`date +%s`:tidy\r${SECTION}"

    - echo -e "${SECTION}section_start:`date +%s`:generate\r${SECTION}Verify generated files are up to date"
    - go generate -x ./...
    - git diff --quiet || die "Generated files are not up to date. Please run \`go generate ./...\`."
    - echo -e "${SECTION}section_end:`date +%s`:generate\r${SECTION}"

    - echo -e "${SECTION}section_start:`date +%s`:imports\r${SECTION}Verify code is correctly formatted"
    - go run github.com/rinchsan/gosimports/cmd/gosimports -l */ | tee fmt.log
    - test -s fmt.log && die "Code is incorrectly formatted. Please run \`gosimports -w .\` (or \`./scripts/imports.sh\`)."
    - echo -e "${SECTION}section_end:`date +%s`:imports\r${SECTION}"
