build validation image:
  stage: pre test
  extends: .rules all
  image: docker:20
  services: [ docker:20-dind ]
  needs: []
  script:
    - docker build -t ${VALIDATION_IMAGE} .
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker push ${VALIDATION_IMAGE}

go test:
  stage: test
  extends: [ .rules all, .go ]
  needs: []
  artifacts:
    when: always
    reports:
      junit: report.xml
  script:
  - go build -v ./...
  - go run gotest.tools/gotestsum --junitfile report.xml --format testname

validate simple:
  stage: test
  extends: [ .rules all, .go ]
  needs: []
  variables:
    MNEMONIC: yellow yellow yellow yellow yellow yellow yellow yellow yellow yellow yellow yellow
  script:
  - apt-get -y update && apt-get -y install jq xxd
  - go run ./tools/test/devnet/ -v 1 -b 1 --reset

validate docker:
  stage: test
  extends: .rules all
  needs: [ build validation image ]
  image: docker
  services: [ docker:dind ]
  variables:
    # set mnemonic for predictable addresses
    MNEMONIC: yellow yellow yellow yellow yellow yellow yellow yellow yellow yellow yellow yellow
    NODE_ROOT0: /nodes/dn/Node0
  script:
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  - docker run --rm -v ${PWD}/nodes:/nodes ${VALIDATION_IMAGE} init devnet -w /nodes --docker --image ${VALIDATION_IMAGE} --compose -b 3 -v 3
  - cd nodes
  - apk add --no-cache docker-compose
  - docker-compose up -d
  - docker-compose run -e MNEMONIC="${MNEMONIC}" -e NODE_ROOT0="${NODE_ROOT0}" --rm --entrypoint bash tools /scripts/ci/validate.sh
  - docker-compose down

lint:
  stage: test
  extends: [ .rules all, .go ]
  needs: []
  before_script:
    - function die { echo -e "${BOLD_RED}${1}${NO_COLOR}"; false; }
  script:
    - echo -e "${SECTION}section_start:`date +%s`:vet\r${SECTION}Vet"
    - go vet ./...
    - echo -e "${SECTION}section_end:`date +%s`:vet\r${SECTION}"

    - echo -e "${SECTION}section_start:`date +%s`:lint\r${SECTION}Lint"
    - go run github.com/golangci/golangci-lint/cmd/golangci-lint run --verbose --timeout=10m ./...
    - echo -e "${SECTION}section_end:`date +%s`:lint\r${SECTION}"

    - echo -e "${SECTION}section_start:`date +%s`:tidy\r${SECTION}Verify go.mod is tidy"
    - go mod tidy
    - git diff --quiet go.mod go.sum || die "Go mod files are not tidy. Please run \`go mod tidy\`."
    - echo -e "${SECTION}section_end:`date +%s`:tidy\r${SECTION}"

    - echo -e "${SECTION}section_start:`date +%s`:generate\r${SECTION}Verify generated files are up to date"
    - go generate -x ./...
    - git diff --quiet || die "Generated files are not up to date. Please run \`go generate ./...\`."
    - echo -e "${SECTION}section_end:`date +%s`:generate\r${SECTION}"

    - echo -e "${SECTION}section_start:`date +%s`:imports\r${SECTION}Verify code is correctly formatted"
    - go run github.com/rinchsan/gosimports/cmd/gosimports -l */ | tee fmt.log
    - test -s fmt.log && die "Code is incorrectly formatted. Please run \`gosimports -w .\` (or \`./scripts/imports.sh\`)."
    - echo -e "${SECTION}section_end:`date +%s`:imports\r${SECTION}"

.cleanup images:
  # Once validation is done, delete the images
  # Disabled because it doesn't appear to work, though it was copied from GitLab's docs
  stage: post test
  extends: .rules all
  image: docker:20
  services: [ docker:20-dind ]
  needs: [ validate docker ]
  variables:
    REG_SHA256: ade837fc5224acd8c34732bf54a94f579b47851cc6a7fd5899a98386b782e228
    REG_VERSION: 0.16.1
  before_script:
  - apk add --no-cache curl
  - curl --fail --show-error --location "https://github.com/genuinetools/reg/releases/download/v$REG_VERSION/reg-linux-amd64" --output /usr/local/bin/reg
  - echo "$REG_SHA256  /usr/local/bin/reg" | sha256sum -c -
  - chmod a+x /usr/local/bin/reg
  script:
  - /usr/local/bin/reg rm -d --auth-url $CI_REGISTRY -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD ${VALIDATION_IMAGE}
