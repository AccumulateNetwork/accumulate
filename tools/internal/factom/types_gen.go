// Copyright 2022 The Accumulate Authors
//
// Use of this source code is governed by an MIT-style
// license that can be found in the LICENSE file or at
// https://opensource.org/licenses/MIT.

package factom

// GENERATED BY go run ./tools/cmd/gen-types. DO NOT EDIT.

//lint:file-ignore S1001,S1002,S1008,SA4013 generated code

import (
	"io"

	"gitlab.com/accumulatenetwork/accumulate/pkg/types/encoding"
)

type EntryMetadata struct {
	fieldsSet            []bool
	DBlockKeyMR          [32]byte `json:"dblockKeyMR,omitempty" form:"dblockKeyMR" query:"dblockKeyMR" validate:"required"`
	DBlockHeight         uint64   `json:"dblockHeight" form:"dblockHeight" query:"dblockHeight" validate:"required"`
	EBlockKeyMR          [32]byte `json:"eblockKeyMR,omitempty" form:"eblockKeyMR" query:"eblockKeyMR" validate:"required"`
	EBlockSequenceNumber uint64   `json:"eblockSequenceNumber" form:"eblockSequenceNumber" query:"eblockSequenceNumber" validate:"required"`
	EntryIndex           uint64   `json:"entryIndex" form:"entryIndex" query:"entryIndex" validate:"required"`
	extraData            []byte
}

var machine_EntryMetadata = &encoding.Machine[*EntryMetadata]{
	ExtraData: func(v *EntryMetadata) *[]byte { return &v.extraData },
	Seen:      func(v *EntryMetadata) *[]bool { return &v.fieldsSet },
	Fields: []*encoding.Field[*EntryMetadata]{
		{Name: "DBlockKeyMR", Number: 1, Binary: true, OmitEmpty: true, Required: true, Accessor: encoding.HashField[*EntryMetadata](func(v *EntryMetadata) *[32]byte { return &v.DBlockKeyMR })},
		{Name: "DBlockHeight", Number: 2, Binary: true, Required: true, Accessor: encoding.UintField[*EntryMetadata](func(v *EntryMetadata) *uint64 { return &v.DBlockHeight })},
		{Name: "EBlockKeyMR", Number: 3, Binary: true, OmitEmpty: true, Required: true, Accessor: encoding.HashField[*EntryMetadata](func(v *EntryMetadata) *[32]byte { return &v.EBlockKeyMR })},
		{Name: "EBlockSequenceNumber", Number: 4, Binary: true, Required: true, Accessor: encoding.UintField[*EntryMetadata](func(v *EntryMetadata) *uint64 { return &v.EBlockSequenceNumber })},
		{Name: "EntryIndex", Number: 5, Binary: true, Required: true, Accessor: encoding.UintField[*EntryMetadata](func(v *EntryMetadata) *uint64 { return &v.EntryIndex })},
	},
}

func (v *EntryMetadata) IsValid() error               { return machine_EntryMetadata.IsValid(v) }
func (v *EntryMetadata) Copy() *EntryMetadata         { return encoding.Copy(machine_EntryMetadata, v) }
func (v *EntryMetadata) CopyAsInterface() interface{} { return v.Copy() }
func (v *EntryMetadata) Equal(u *EntryMetadata) bool  { return machine_EntryMetadata.Equal(v, u) }
func (v *EntryMetadata) MarshalBinary() ([]byte, error) {
	return machine_EntryMetadata.MarshalBinary(v)
}
func (v *EntryMetadata) UnmarshalBinary(data []byte) error {
	return machine_EntryMetadata.Unmarshal(data, v)
}
func (v *EntryMetadata) UnmarshalBinaryFrom(rd io.Reader) error {
	return machine_EntryMetadata.UnmarshalFrom(rd, v)
}
func (v *EntryMetadata) MarshalJSON() ([]byte, error) { return machine_EntryMetadata.JSONMarshal(v) }
func (v *EntryMetadata) UnmarshalJSON(b []byte) error {
	return machine_EntryMetadata.JSONUnmarshal(b, v)
}
