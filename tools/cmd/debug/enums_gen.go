// Copyright 2023 The Accumulate Authors
//
// Use of this source code is governed by an MIT-style
// license that can be found in the LICENSE file or at
// https://opensource.org/licenses/MIT.

package main

// GENERATED BY go run ./tools/cmd/gen-enum. DO NOT EDIT.

import (
	"encoding/json"
	"fmt"
	"strings"
)

// DbPatchOpTypePut .
const DbPatchOpTypePut DbPatchOpType = 1

// DbPatchOpTypeDelete .
const DbPatchOpTypeDelete DbPatchOpType = 2

// GetEnumValue returns the value of the Db Patch Op Type
func (v DbPatchOpType) GetEnumValue() uint64 { return uint64(v) }

// SetEnumValue sets the value. SetEnumValue returns false if the value is invalid.
func (v *DbPatchOpType) SetEnumValue(id uint64) bool {
	u := DbPatchOpType(id)
	switch u {
	case DbPatchOpTypePut, DbPatchOpTypeDelete:
		*v = u
		return true
	}
	return false
}

// String returns the name of the Db Patch Op Type.
func (v DbPatchOpType) String() string {
	switch v {
	case DbPatchOpTypePut:
		return "put"
	case DbPatchOpTypeDelete:
		return "delete"
	}
	return fmt.Sprintf("DbPatchOpType:%d", v)
}

// DbPatchOpTypeByName returns the named Db Patch Op Type.
func DbPatchOpTypeByName(name string) (DbPatchOpType, bool) {
	switch strings.ToLower(name) {
	case "put":
		return DbPatchOpTypePut, true
	case "delete":
		return DbPatchOpTypeDelete, true
	}
	return 0, false
}

// MarshalJSON marshals the Db Patch Op Type to JSON as a string.
func (v DbPatchOpType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.String())
}

// UnmarshalJSON unmarshals the Db Patch Op Type from JSON as a string.
func (v *DbPatchOpType) UnmarshalJSON(data []byte) error {
	var s string
	err := json.Unmarshal(data, &s)
	if err != nil {
		return err
	}

	var ok bool
	*v, ok = DbPatchOpTypeByName(s)
	if !ok || strings.ContainsRune(v.String(), ':') {
		return fmt.Errorf("invalid Db Patch Op Type %q", s)
	}
	return nil
}
