// GENERATED BY go run ./tools/cmd/gen-enum. DO NOT EDIT.

#include <accumulate/protocol/{{snake .Name}}.h>

Error {{.Name}}_set(VarInt *v, {{.Name}} n) {
    return VarInt_set(v,n);
}

Error {{.Name}}_get(const VarInt *v, {{.Name}} *n) {
    return VarInt_get(v,(int64_t*)n);
}

// ID returns the ID of the {{natural .Name}}
uint64_t {{.Name}}_ID({{.Name}} v) { return (uint64_t)(v); }

#if WANT_ENUM_STRING_CONVERSION
// String returns the name of the {{natural .Name}}
static enum_t {{.Name}}_l[] = {
	{{- $typ := .Name}}
	{{- range .Values}}
	{ "{{lower .Name}}", {{$typ}}{{.Name}} },
	{{- end}}
	{ 0,0 },
};

Error {{.Name}}_asString(const {{.Name}} v, String *out) {
    CHECK_ERROR(out)
    //since we are only dealing with a limited number of enumerations, we will do a linear search
    for ( uint64_t i = 0; ; ++i ) {
        if ( {{.Name}}_l[i].name == 0 ) {
            break;
        }
        if ( {{.Name}}_l[i].e == v ) {
            String_set(out, {{.Name}}_l[i].name);
            return ErrorCode(ErrorNone);
        }
    }
    return ErrorCode(ErrorTypeNotFound);
}

// {{.Name}}ByName returns the named {{natural .Name}}.
Error {{.Name}}_fromString({{.Name}} *v, String *name) {
    CHECK_ERROR(name)
    //since we are only dealing with a limited number of enumerations, we will do a linear search
    for ( uint64_t i = 0; ; ++i ) {
        if ( {{.Name}}_l[i].name == 0 ) {
            break;
        }
        if ( strncmp({{.Name}}_l[i].name, (const char*)name->data.buffer.ptr+name->data.buffer.offset,name->data.buffer.size) == 0 ) {
            *v = {{.Name}}_l[i].e;
            return ErrorCode(ErrorNone);
        }
    }
    return ErrorCode(ErrorTypeNotFound);
}
#endif

bool {{.Name}}_equal(const {{.Name}} *a, const {{.Name}} *b) {
    if (!a || !b) {
        return false;
    }
    return *a == *b;
}

// MarshalBinary marshals the {{natural .Name}} to bytes as an unsigned varint.
int write{{.Name}}(Marshaler *m, {{.Name}} v) {
    return writeUInt(m,(uint64_t) v);
}


// UnmarshalBinary unmarshals the {{natural .Name}} from bytes as an unsigned varint.
int read{{.Name}}(Unmarshaler *m, {{.Name}} *v) {
	uint64_t n = 0;
	int b = readUInt(m, &n);
    *v = ({{.Name}})n;
    return b;
}
