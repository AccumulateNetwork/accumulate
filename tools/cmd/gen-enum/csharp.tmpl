// GENERATED BY gen-enum. DO NOT EDIT.

using System;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace {{.Package}}.Generated.{{.SubPackage}}
{
    [JsonConverter(typeof({{.Name}}EnumConverter))]
    public enum {{.Name}}
    {
        {{- range $index, $v := .Values }}
        {{- if gt $index 0}},{{end}} {{underscoreUpperCase $v.Key}} = {{$v.Value}}
        {{- end}}
    }

    public static class {{.Name}}Extensions
    {
        public static string GetApiName(this {{.Name}} value)
        {
            switch (value)
            {
                {{- range .Values }}
                case {{underscoreUpperCase .Key}}: return "{{lowerCamel .Key}}";
                {{- end}}
                default: throw new ArgumentOutOfRangeException();
            }
        }

        public static {{.Name}} FromValue(int value)
        {
            foreach ({{.Name}} e in Enum.GetValues(typeof({{.Name}})))
            {
                if ((int)e == value)
                    return e;
            }
            throw new Exception($"{value} is not a valid {{.Name}}");
        }

        public static {{.Name}} FromApiName(string apiName)
        {
            foreach ({{.Name}} e in Enum.GetValues(typeof({{.Name}})))
            {
                if (string.Equals(e.GetApiName(), apiName, StringComparison.OrdinalIgnoreCase))
                    return e;
            }
            throw new Exception($"{apiName} is not a valid {{.Name}}");
        }
    }

    public class {{.Name}}EnumConverter : JsonConverter
    {
        public override bool CanConvert(Type objectType)
        {
            return objectType == typeof({{.Name}});
        }

        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            if(reader.TokenType == JsonToken.String)
            {
                string apiName = reader.Value.ToString();
                return {{.Name}}Extensions.FromApiName(apiName);
            }
            if(reader.TokenType == JsonToken.Integer)
            {
                int value = Convert.ToInt32(reader.Value);
                return Enum.ToObject(typeof({{.Name}}), value);
            }
            throw new Exception("Unexpected token type for enum conversion");
        }

        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            var enumVal = ({{.Name}})value;
            writer.WriteValue(enumVal.GetApiName());
        }
    }
}  