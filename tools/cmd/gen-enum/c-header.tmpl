#pragma once

// GENERATED BY go run ./tools/cmd/gen-enum. DO NOT EDIT.

#ifdef __cplusplus
extern "C" {
#endif

#ifdef ACME_STATIC
#define ACME_API static
#else
#define ACME_API extern
#endif

#include <accumulate/encoding/encoding.h>
#include <accumulate/encoding/marshaler.h>

#ifndef _ACME_ENUM_TYPE_
#define _ACME_ENUM_TYPE_
typedef struct enum_t {
   const char *name;
   uint64_t e;
} enum_t;
#endif

{{$typ := .Name}}
typedef enum {
{{range .Values}}
    /// {{$typ}}{{.Name}} {{.Description}}.
    {{$typ}}{{.Name}} = {{.Value}},
{{end}}
} {{$typ}};


typedef struct {
    Bytes data;
} {{.Name}}_t;

ACME_API uint64_t {{.Name}}_ID({{.Name}} v);
#if WANT_ENUM_STRING_CONVERSION
ACME_API Error {{.Name}}_fromString({{.Name}} *v, String *name);
ACME_API Error {{.Name}}_asString({{.Name}} v, String *out);
#endif

ACME_API {{.Name}}_t {{.Name}}_init({{.Name}}_t *v, buffer_t *buffer);
ACME_API int read{{.Name}}(Unmarshaler *m, {{.Name}} *v);
ACME_API int write{{.Name}}(Marshaler *m, {{.Name}} v);
ACME_API bool {{.Name}}_equal(const {{.Name}} *a, const {{.Name}} *b);

#ifdef __cplusplus
}
#endif

