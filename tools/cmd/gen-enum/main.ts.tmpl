// DO NOT EDIT. Generated by gitlab.com/accumulatenetwork/accumulate/tools/cmd/gen-types.

/* eslint-disable @typescript-eslint/no-namespace */

{{- range .Types}}

export enum {{.Name}} {
  {{- range .Values}}
  /** {{valueName .}} {{.Description}}. */
  {{valueName .}} = {{.Value}},
  {{- end}}
}

export type {{.Name}}Args = {{.Name}} | string;

/** @ignore */
export namespace {{.Name}} {
  export function fromObject(obj: {{.Name}}Args): {{.Name}} {
    if (typeof obj === 'number') return obj
    return byName(obj)
  }

  export function byName(name: string): {{.Name}} {
    switch (name.toLowerCase()) {
      {{- $typ := .Name}}
      {{- range .Values}}
      {{- $typ := (print $typ "." (valueName .))}}
      case "{{if .Label}}{{lower .Label}}{{else}}{{lower (valueName .)}}{{end}}":
        return {{$typ}}
      {{- range .Aliases}}
      case "{{.}}":
        return {{$typ}}
      {{- end}}
      {{- end}}
      default:
        throw new Error(`Unknown {{.Name}} '${name}'`);
    }
  }

  export function getName(v: {{.Name}}) {
    switch (v) {
      {{- $typ := .Name}}
      {{- range .Values}}
      {{- $typ := (print $typ "." (valueName .))}}
      case {{$typ}}:
        return "{{if .Label}}{{.Label}}{{else}}{{lowerCamel (valueName .)}}{{end}}"
      {{- end}}
      default:
        throw new Error(`Unknown {{.Name}} ${v}`);
    }
  }
}
{{- end}}