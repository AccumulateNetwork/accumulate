package {{.Package}};

public enum {{.Name}} {
    {{- range $i, $v := .Values}}{{if gt $i 0}},{{end}}
    {{underscoreUpperCase $v.Name}}({{$v.Value}}, "{{lowerCamel $v.Name}}")
    {{- end}};

    private final int value;
    private final String apiName;

    {{.Name}}(int value, String apiName) {
        this.value = value;
        this.apiName = apiName;
    }

    public int getValue() {
        return this.value;
    }

    public String getApiName() {
        return this.apiName;
    }

    public String toString() {
        return this.apiName;
    }

    public static {{.Name}} byValue(int value) {
        for (final var type : values()) {
            if (value == type.ordinal()) {
                return type;
            }
        }
        throw new RuntimeException(String.format("%d is not a valid TransactionType", value));
    }

    public static {{.Name}} byName(String name) {
        for (final var type : values()) {
            if (name != null && name.equalsIgnoreCase(type.name)) {
                return type;
            }
        }
        throw new RuntimeException(String.format("'%s' is not a valid TransactionType", name));
    }
}