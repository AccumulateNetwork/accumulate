#pragma once

/// GENERATED BY go run ./tools/cmd/genmarshal. DO NOT EDIT.
#include <common/encoding.h>
#ifdef __cplusplus
extern "C" {
#endif
#ifdef ACME_STATIC
#define ACME_API static
#else
#define ACME_API extern
#endif

/// Data Structures
struct AcmeFaucet {
	string Url;  //`json:"url,omitempty" form:"url" query:"url" validate:"required,acc-url"`
    ///pseudo helper functions
    TxType (*GetType)();
    ReturnBytes (*MarshalBinary)(v *AcmeFaucet);
    Error (*UnmarshalBinary)(v *AcmeFaucet);
    ReturnBytes (*MarshalJSON)(v *AcmeFaucet);
    Error (*UnmarshalJSON)(v *AcmeFaucet);
    bool (*Equal)(v *AcmeFaucet,u *AcmeFaucet);
    int (*BinarySize)(v *AcmeFaucet);
};
struct AddCredits {
	string Recipient;  //`json:"recipient,omitempty" form:"recipient" query:"recipient" validate:"required"`
	uint64_t Amount;  //`json:"amount,omitempty" form:"amount" query:"amount" validate:"required"`
    ///pseudo helper functions
    TxType (*GetType)();
    ReturnBytes (*MarshalBinary)(v *AddCredits);
    Error (*UnmarshalBinary)(v *AddCredits);
    ReturnBytes (*MarshalJSON)(v *AddCredits);
    Error (*UnmarshalJSON)(v *AddCredits);
    bool (*Equal)(v *AddCredits,u *AddCredits);
    int (*BinarySize)(v *AddCredits);
};
struct AnchoredRecord {
	Bytes Record;  //`json:"record,omitempty" form:"record" query:"record" validate:"required"`
	Bytes32 Anchor;  //`json:"anchor,omitempty" form:"anchor" query:"anchor" validate:"required"`
    ///pseudo helper functions
    TxType (*GetType)();
    ReturnBytes (*MarshalBinary)(v *AnchoredRecord);
    Error (*UnmarshalBinary)(v *AnchoredRecord);
    ReturnBytes (*MarshalJSON)(v *AnchoredRecord);
    Error (*UnmarshalJSON)(v *AnchoredRecord);
    bool (*Equal)(v *AnchoredRecord,u *AnchoredRecord);
    int (*BinarySize)(v *AnchoredRecord);
};
struct BurnTokens {
	uint256_t Amount;  //`json:"amount,omitempty" form:"amount" query:"amount" validate:"required"`
    ///pseudo helper functions
    TxType (*GetType)();
    ReturnBytes (*MarshalBinary)(v *BurnTokens);
    Error (*UnmarshalBinary)(v *BurnTokens);
    ReturnBytes (*MarshalJSON)(v *BurnTokens);
    Error (*UnmarshalJSON)(v *BurnTokens);
    bool (*Equal)(v *BurnTokens,u *BurnTokens);
    int (*BinarySize)(v *BurnTokens);
};
struct ChainParams {
	Bytes Data;  //`json:"data,omitempty" form:"data" query:"data" validate:"required"`
	bool IsUpdate;  //`json:"isUpdate,omitempty" form:"isUpdate" query:"isUpdate" validate:"required"`
    ///pseudo helper functions
    TxType (*GetType)();
    ReturnBytes (*MarshalBinary)(v *ChainParams);
    Error (*UnmarshalBinary)(v *ChainParams);
    ReturnBytes (*MarshalJSON)(v *ChainParams);
    Error (*UnmarshalJSON)(v *ChainParams);
    bool (*Equal)(v *ChainParams,u *ChainParams);
    int (*BinarySize)(v *ChainParams);
};
struct CreateDataAccount {
	string Url;  //`json:"url,omitempty" form:"url" query:"url" validate:"required,acc-url"`
	string KeyBookUrl;  //`json:"keyBookUrl,omitempty" form:"keyBookUrl" query:"keyBookUrl" validate:"acc-url"`
	string ManagerKeyBookUrl;  //`json:"managerKeyBookUrl,omitempty" form:"managerKeyBookUrl" query:"managerKeyBookUrl" validate:"acc-url"`
	bool Scratch;  //`json:"scratch,omitempty" form:"scratch" query:"scratch"`
    ///pseudo helper functions
    TxType (*GetType)();
    ReturnBytes (*MarshalBinary)(v *CreateDataAccount);
    Error (*UnmarshalBinary)(v *CreateDataAccount);
    ReturnBytes (*MarshalJSON)(v *CreateDataAccount);
    Error (*UnmarshalJSON)(v *CreateDataAccount);
    bool (*Equal)(v *CreateDataAccount,u *CreateDataAccount);
    int (*BinarySize)(v *CreateDataAccount);
};
struct CreateIdentity {
	string Url;  //`json:"url,omitempty" form:"url" query:"url" validate:"required,acc-url"`
	Bytes PublicKey;  //`json:"publicKey,omitempty" form:"publicKey" query:"publicKey" validate:"required"`
	string KeyBookName;  //`json:"keyBookName,omitempty" form:"keyBookName" query:"keyBookName"`
	string KeyPageName;  //`json:"keyPageName,omitempty" form:"keyPageName" query:"keyPageName"`
    ///pseudo helper functions
    TxType (*GetType)();
    ReturnBytes (*MarshalBinary)(v *CreateIdentity);
    Error (*UnmarshalBinary)(v *CreateIdentity);
    ReturnBytes (*MarshalJSON)(v *CreateIdentity);
    Error (*UnmarshalJSON)(v *CreateIdentity);
    bool (*Equal)(v *CreateIdentity,u *CreateIdentity);
    int (*BinarySize)(v *CreateIdentity);
};
struct CreateKeyBook {
	string Url;  //`json:"url,omitempty" form:"url" query:"url" validate:"required,acc-url"`
	string[] Pages;  //`json:"pages,omitempty" form:"pages" query:"pages" validate:"required"`
    ///pseudo helper functions
    TxType (*GetType)();
    ReturnBytes (*MarshalBinary)(v *CreateKeyBook);
    Error (*UnmarshalBinary)(v *CreateKeyBook);
    ReturnBytes (*MarshalJSON)(v *CreateKeyBook);
    Error (*UnmarshalJSON)(v *CreateKeyBook);
    bool (*Equal)(v *CreateKeyBook,u *CreateKeyBook);
    int (*BinarySize)(v *CreateKeyBook);
};
struct CreateKeyPage {
	string Url;  //`json:"url,omitempty" form:"url" query:"url" validate:"required,acc-url"`
	*KeySpecParams[] Keys;  //`json:"keys,omitempty" form:"keys" query:"keys" validate:"required"`
    ///pseudo helper functions
    TxType (*GetType)();
    ReturnBytes (*MarshalBinary)(v *CreateKeyPage);
    Error (*UnmarshalBinary)(v *CreateKeyPage);
    ReturnBytes (*MarshalJSON)(v *CreateKeyPage);
    Error (*UnmarshalJSON)(v *CreateKeyPage);
    bool (*Equal)(v *CreateKeyPage,u *CreateKeyPage);
    int (*BinarySize)(v *CreateKeyPage);
};
struct CreateToken {
	string Url;  //`json:"url,omitempty" form:"url" query:"url" validate:"required,acc-url"`
	string KeyBookUrl;  //`json:"keyBookUrl,omitempty" form:"keyBookUrl" query:"keyBookUrl" validate:"acc-url"`
	string Symbol;  //`json:"symbol,omitempty" form:"symbol" query:"symbol" validate:"required"`
	uint64_t Precision;  //`json:"precision,omitempty" form:"precision" query:"precision" validate:"required"`
	string Properties;  //`json:"properties,omitempty" form:"properties" query:"properties" validate:"acc-url"`
	uint256_t InitialSupply;  //`json:"initialSupply,omitempty" form:"initialSupply" query:"initialSupply"`
	bool HasSupplyLimit;  //`json:"hasSupplyLimit,omitempty" form:"hasSupplyLimit" query:"hasSupplyLimit"`
    ///pseudo helper functions
    TxType (*GetType)();
    ReturnBytes (*MarshalBinary)(v *CreateToken);
    Error (*UnmarshalBinary)(v *CreateToken);
    ReturnBytes (*MarshalJSON)(v *CreateToken);
    Error (*UnmarshalJSON)(v *CreateToken);
    bool (*Equal)(v *CreateToken,u *CreateToken);
    int (*BinarySize)(v *CreateToken);
};
struct CreateTokenAccount {
	string Url;  //`json:"url,omitempty" form:"url" query:"url" validate:"required,acc-url"`
	string TokenUrl;  //`json:"tokenUrl,omitempty" form:"tokenUrl" query:"tokenUrl" validate:"required,acc-url"`
	string KeyBookUrl;  //`json:"keyBookUrl,omitempty" form:"keyBookUrl" query:"keyBookUrl" validate:"acc-url"`
	bool Scratch;  //`json:"scratch,omitempty" form:"scratch" query:"scratch"`
    ///pseudo helper functions
    TxType (*GetType)();
    ReturnBytes (*MarshalBinary)(v *CreateTokenAccount);
    Error (*UnmarshalBinary)(v *CreateTokenAccount);
    ReturnBytes (*MarshalJSON)(v *CreateTokenAccount);
    Error (*UnmarshalJSON)(v *CreateTokenAccount);
    bool (*Equal)(v *CreateTokenAccount,u *CreateTokenAccount);
    int (*BinarySize)(v *CreateTokenAccount);
};
struct IssueTokens {
	string Recipient;  //`json:"recipient,omitempty" form:"recipient" query:"recipient" validate:"required,acc-url"`
	uint256_t Amount;  //`json:"amount,omitempty" form:"amount" query:"amount" validate:"required"`
    ///pseudo helper functions
    TxType (*GetType)();
    ReturnBytes (*MarshalBinary)(v *IssueTokens);
    Error (*UnmarshalBinary)(v *IssueTokens);
    ReturnBytes (*MarshalJSON)(v *IssueTokens);
    Error (*UnmarshalJSON)(v *IssueTokens);
    bool (*Equal)(v *IssueTokens,u *IssueTokens);
    int (*BinarySize)(v *IssueTokens);
};
struct KeySpecParams {
	Bytes PublicKey;  //`json:"publicKey,omitempty" form:"publicKey" query:"publicKey" validate:"required"`
    ///pseudo helper functions
    TxType (*GetType)();
    ReturnBytes (*MarshalBinary)(v *KeySpecParams);
    Error (*UnmarshalBinary)(v *KeySpecParams);
    ReturnBytes (*MarshalJSON)(v *KeySpecParams);
    Error (*UnmarshalJSON)(v *KeySpecParams);
    bool (*Equal)(v *KeySpecParams,u *KeySpecParams);
    int (*BinarySize)(v *KeySpecParams);
};
struct SegWitDataEntry {
	Bytes32 Cause;  //`json:"cause,omitempty" form:"cause" query:"cause" validate:"required"`
	string EntryUrl;  //`json:"entryUrl,omitempty" form:"entryUrl" query:"entryUrl" validate:"required,acc-url"`
	Bytes32 EntryHash;  //`json:"entryHash,omitempty" form:"entryHash" query:"entryHash" validate:"required"`
    ///pseudo helper functions
    TxType (*GetType)();
    ReturnBytes (*MarshalBinary)(v *SegWitDataEntry);
    Error (*UnmarshalBinary)(v *SegWitDataEntry);
    ReturnBytes (*MarshalJSON)(v *SegWitDataEntry);
    Error (*UnmarshalJSON)(v *SegWitDataEntry);
    bool (*Equal)(v *SegWitDataEntry,u *SegWitDataEntry);
    int (*BinarySize)(v *SegWitDataEntry);
};
struct SendTokens {
	Bytes32 Hash;  //`json:"hash,omitempty" form:"hash" query:"hash"`
	json.RawMessage Meta;  //`json:"meta,omitempty" form:"meta" query:"meta"`
	*TokenRecipient[] To;  //`json:"to,omitempty" form:"to" query:"to" validate:"required"`
    ///pseudo helper functions
    TxType (*GetType)();
    ReturnBytes (*MarshalBinary)(v *SendTokens);
    Error (*UnmarshalBinary)(v *SendTokens);
    ReturnBytes (*MarshalJSON)(v *SendTokens);
    Error (*UnmarshalJSON)(v *SendTokens);
    bool (*Equal)(v *SendTokens,u *SendTokens);
    int (*BinarySize)(v *SendTokens);
};
struct SignPending {
    ///pseudo helper functions
    TxType (*GetType)();
    ReturnBytes (*MarshalBinary)(v *SignPending);
    Error (*UnmarshalBinary)(v *SignPending);
    ReturnBytes (*MarshalJSON)(v *SignPending);
    Error (*UnmarshalJSON)(v *SignPending);
    bool (*Equal)(v *SignPending,u *SignPending);
    int (*BinarySize)(v *SignPending);
};
struct SyntheticAnchor {
	string Source;  //`json:"source,omitempty" form:"source" query:"source" validate:"required,acc-url"`
	bool Major;  //`json:"major,omitempty" form:"major" query:"major" validate:"required"`
	Bytes32 RootAnchor;  //`json:"rootAnchor,omitempty" form:"rootAnchor" query:"rootAnchor" validate:"required"`
	uint64_t RootIndex;  //`json:"rootIndex,omitempty" form:"rootIndex" query:"rootIndex" validate:"required"`
	uint64_t Block;  //`json:"block,omitempty" form:"block" query:"block" validate:"required"`
	uint64_t SourceIndex;  //`json:"sourceIndex,omitempty" form:"sourceIndex" query:"sourceIndex" validate:"required"`
	uint64_t SourceBlock;  //`json:"sourceBlock,omitempty" form:"sourceBlock" query:"sourceBlock" validate:"required"`
	Receipt Receipt;  //`json:"receipt,omitempty" form:"receipt" query:"receipt" validate:"required"`
    ///pseudo helper functions
    TxType (*GetType)();
    ReturnBytes (*MarshalBinary)(v *SyntheticAnchor);
    Error (*UnmarshalBinary)(v *SyntheticAnchor);
    ReturnBytes (*MarshalJSON)(v *SyntheticAnchor);
    Error (*UnmarshalJSON)(v *SyntheticAnchor);
    bool (*Equal)(v *SyntheticAnchor,u *SyntheticAnchor);
    int (*BinarySize)(v *SyntheticAnchor);
};
struct SyntheticBurnTokens {
	Bytes32 Cause;  //`json:"cause,omitempty" form:"cause" query:"cause" validate:"required"`
	uint256_t Amount;  //`json:"amount,omitempty" form:"amount" query:"amount" validate:"required"`
    ///pseudo helper functions
    TxType (*GetType)();
    ReturnBytes (*MarshalBinary)(v *SyntheticBurnTokens);
    Error (*UnmarshalBinary)(v *SyntheticBurnTokens);
    ReturnBytes (*MarshalJSON)(v *SyntheticBurnTokens);
    Error (*UnmarshalJSON)(v *SyntheticBurnTokens);
    bool (*Equal)(v *SyntheticBurnTokens,u *SyntheticBurnTokens);
    int (*BinarySize)(v *SyntheticBurnTokens);
};
struct SyntheticCreateChain {
	Bytes32 Cause;  //`json:"cause,omitempty" form:"cause" query:"cause" validate:"required"`
	ChainParams[] Chains;  //`json:"chains,omitempty" form:"chains" query:"chains" validate:"required"`
    ///pseudo helper functions
    TxType (*GetType)();
    ReturnBytes (*MarshalBinary)(v *SyntheticCreateChain);
    Error (*UnmarshalBinary)(v *SyntheticCreateChain);
    ReturnBytes (*MarshalJSON)(v *SyntheticCreateChain);
    Error (*UnmarshalJSON)(v *SyntheticCreateChain);
    bool (*Equal)(v *SyntheticCreateChain,u *SyntheticCreateChain);
    int (*BinarySize)(v *SyntheticCreateChain);
};
struct SyntheticDepositCredits {
	Bytes32 Cause;  //`json:"cause,omitempty" form:"cause" query:"cause" validate:"required"`
	uint64_t Amount;  //`json:"amount,omitempty" form:"amount" query:"amount" validate:"required"`
    ///pseudo helper functions
    TxType (*GetType)();
    ReturnBytes (*MarshalBinary)(v *SyntheticDepositCredits);
    Error (*UnmarshalBinary)(v *SyntheticDepositCredits);
    ReturnBytes (*MarshalJSON)(v *SyntheticDepositCredits);
    Error (*UnmarshalJSON)(v *SyntheticDepositCredits);
    bool (*Equal)(v *SyntheticDepositCredits,u *SyntheticDepositCredits);
    int (*BinarySize)(v *SyntheticDepositCredits);
};
struct SyntheticDepositTokens {
	Bytes32 Cause;  //`json:"cause,omitempty" form:"cause" query:"cause" validate:"required"`
	string Token;  //`json:"token,omitempty" form:"token" query:"token" validate:"required,acc-url"`
	uint256_t Amount;  //`json:"amount,omitempty" form:"amount" query:"amount" validate:"required"`
    ///pseudo helper functions
    TxType (*GetType)();
    ReturnBytes (*MarshalBinary)(v *SyntheticDepositTokens);
    Error (*UnmarshalBinary)(v *SyntheticDepositTokens);
    ReturnBytes (*MarshalJSON)(v *SyntheticDepositTokens);
    Error (*UnmarshalJSON)(v *SyntheticDepositTokens);
    bool (*Equal)(v *SyntheticDepositTokens,u *SyntheticDepositTokens);
    int (*BinarySize)(v *SyntheticDepositTokens);
};
struct SyntheticMirror {
	AnchoredRecord[] Objects;  //`json:"objects,omitempty" form:"objects" query:"objects" validate:"required"`
    ///pseudo helper functions
    TxType (*GetType)();
    ReturnBytes (*MarshalBinary)(v *SyntheticMirror);
    Error (*UnmarshalBinary)(v *SyntheticMirror);
    ReturnBytes (*MarshalJSON)(v *SyntheticMirror);
    Error (*UnmarshalJSON)(v *SyntheticMirror);
    bool (*Equal)(v *SyntheticMirror,u *SyntheticMirror);
    int (*BinarySize)(v *SyntheticMirror);
};
struct SyntheticWriteData {
	Bytes32 Cause;  //`json:"cause,omitempty" form:"cause" query:"cause" validate:"required"`
	DataEntry Entry;  //`json:"entry,omitempty" form:"entry" query:"entry" validate:"required"`
    ///pseudo helper functions
    TxType (*GetType)();
    ReturnBytes (*MarshalBinary)(v *SyntheticWriteData);
    Error (*UnmarshalBinary)(v *SyntheticWriteData);
    ReturnBytes (*MarshalJSON)(v *SyntheticWriteData);
    Error (*UnmarshalJSON)(v *SyntheticWriteData);
    bool (*Equal)(v *SyntheticWriteData,u *SyntheticWriteData);
    int (*BinarySize)(v *SyntheticWriteData);
};
struct TokenRecipient {
	string Url;  //`json:"url,omitempty" form:"url" query:"url" validate:"required,acc-url"`
	uint256_t Amount;  //`json:"amount,omitempty" form:"amount" query:"amount" validate:"required"`
    ///pseudo helper functions
    TxType (*GetType)();
    ReturnBytes (*MarshalBinary)(v *TokenRecipient);
    Error (*UnmarshalBinary)(v *TokenRecipient);
    ReturnBytes (*MarshalJSON)(v *TokenRecipient);
    Error (*UnmarshalJSON)(v *TokenRecipient);
    bool (*Equal)(v *TokenRecipient,u *TokenRecipient);
    int (*BinarySize)(v *TokenRecipient);
};
struct UpdateKeyPage {
	KeyPageOperation Operation;  //`json:"operation,omitempty" form:"operation" query:"operation" validate:"required"`
	Bytes Key;  //`json:"key,omitempty" form:"key" query:"key"`
	Bytes NewKey;  //`json:"newKey,omitempty" form:"newKey" query:"newKey"`
	string Owner;  //`json:"owner,omitempty" form:"owner" query:"owner"`
	uint64_t Threshold;  //`json:"threshold,omitempty" form:"threshold" query:"threshold"`
    ///pseudo helper functions
    TxType (*GetType)();
    ReturnBytes (*MarshalBinary)(v *UpdateKeyPage);
    Error (*UnmarshalBinary)(v *UpdateKeyPage);
    ReturnBytes (*MarshalJSON)(v *UpdateKeyPage);
    Error (*UnmarshalJSON)(v *UpdateKeyPage);
    bool (*Equal)(v *UpdateKeyPage,u *UpdateKeyPage);
    int (*BinarySize)(v *UpdateKeyPage);
};
struct WriteData {
	DataEntry Entry;  //`json:"entry,omitempty" form:"entry" query:"entry" validate:"required"`
    ///pseudo helper functions
    TxType (*GetType)();
    ReturnBytes (*MarshalBinary)(v *WriteData);
    Error (*UnmarshalBinary)(v *WriteData);
    ReturnBytes (*MarshalJSON)(v *WriteData);
    Error (*UnmarshalJSON)(v *WriteData);
    bool (*Equal)(v *WriteData,u *WriteData);
    int (*BinarySize)(v *WriteData);
};
struct WriteDataResult {
	Bytes32 EntryHash;  //`json:"entryHash,omitempty" form:"entryHash" query:"entryHash" validate:"required"`
	*url.URL AccountUrl;  //`json:"accountUrl,omitempty" form:"accountUrl" query:"accountUrl" validate:"required"`
	Bytes AccountID;  //`json:"accountID,omitempty" form:"accountID" query:"accountID" validate:"required"`
    ///pseudo helper functions
    TxType (*GetType)();
    ReturnBytes (*MarshalBinary)(v *WriteDataResult);
    Error (*UnmarshalBinary)(v *WriteDataResult);
    ReturnBytes (*MarshalJSON)(v *WriteDataResult);
    Error (*UnmarshalJSON)(v *WriteDataResult);
    bool (*Equal)(v *WriteDataResult,u *WriteDataResult);
    int (*BinarySize)(v *WriteDataResult);
};
struct WriteDataTo {
	string Recipient;  //`json:"recipient,omitempty" form:"recipient" query:"recipient" validate:"required,acc-url"`
	DataEntry Entry;  //`json:"entry,omitempty" form:"entry" query:"entry" validate:"required"`
    ///pseudo helper functions
    TxType (*GetType)();
    ReturnBytes (*MarshalBinary)(v *WriteDataTo);
    Error (*UnmarshalBinary)(v *WriteDataTo);
    ReturnBytes (*MarshalJSON)(v *WriteDataTo);
    Error (*UnmarshalJSON)(v *WriteDataTo);
    bool (*Equal)(v *WriteDataTo,u *WriteDataTo);
    int (*BinarySize)(v *WriteDataTo);
};
ACME_API AcmeFaucet_init(AcmeFaucet *v) {
    v->GetType = GetTypeAcmeFaucet;
    v->MarshalBinary = MarshalBinaryAcmeFaucet;
    v->UnmarshalBinary = UnmarshalBinaryAcmeFaucet;
    v->MarshalJSON = MarshalJSONAcmeFaucet;
    v->UnmarshalJSON = UnmarshalJSONAcmeFaucet;
    v->Equal = EqualAcmeFaucet;
    return v;
}
ACME_API AddCredits_init(AddCredits *v) {
    v->GetType = GetTypeAddCredits;
    v->MarshalBinary = MarshalBinaryAddCredits;
    v->UnmarshalBinary = UnmarshalBinaryAddCredits;
    v->MarshalJSON = MarshalJSONAddCredits;
    v->UnmarshalJSON = UnmarshalJSONAddCredits;
    v->Equal = EqualAddCredits;
    return v;
}
ACME_API AnchoredRecord_init(AnchoredRecord *v) {
    v->GetType = GetTypeAnchoredRecord;
    v->MarshalBinary = MarshalBinaryAnchoredRecord;
    v->UnmarshalBinary = UnmarshalBinaryAnchoredRecord;
    v->MarshalJSON = MarshalJSONAnchoredRecord;
    v->UnmarshalJSON = UnmarshalJSONAnchoredRecord;
    v->Equal = EqualAnchoredRecord;
    return v;
}
ACME_API BurnTokens_init(BurnTokens *v) {
    v->GetType = GetTypeBurnTokens;
    v->MarshalBinary = MarshalBinaryBurnTokens;
    v->UnmarshalBinary = UnmarshalBinaryBurnTokens;
    v->MarshalJSON = MarshalJSONBurnTokens;
    v->UnmarshalJSON = UnmarshalJSONBurnTokens;
    v->Equal = EqualBurnTokens;
    return v;
}
ACME_API ChainParams_init(ChainParams *v) {
    v->GetType = GetTypeChainParams;
    v->MarshalBinary = MarshalBinaryChainParams;
    v->UnmarshalBinary = UnmarshalBinaryChainParams;
    v->MarshalJSON = MarshalJSONChainParams;
    v->UnmarshalJSON = UnmarshalJSONChainParams;
    v->Equal = EqualChainParams;
    return v;
}
ACME_API CreateDataAccount_init(CreateDataAccount *v) {
    v->GetType = GetTypeCreateDataAccount;
    v->MarshalBinary = MarshalBinaryCreateDataAccount;
    v->UnmarshalBinary = UnmarshalBinaryCreateDataAccount;
    v->MarshalJSON = MarshalJSONCreateDataAccount;
    v->UnmarshalJSON = UnmarshalJSONCreateDataAccount;
    v->Equal = EqualCreateDataAccount;
    return v;
}
ACME_API CreateIdentity_init(CreateIdentity *v) {
    v->GetType = GetTypeCreateIdentity;
    v->MarshalBinary = MarshalBinaryCreateIdentity;
    v->UnmarshalBinary = UnmarshalBinaryCreateIdentity;
    v->MarshalJSON = MarshalJSONCreateIdentity;
    v->UnmarshalJSON = UnmarshalJSONCreateIdentity;
    v->Equal = EqualCreateIdentity;
    return v;
}
ACME_API CreateKeyBook_init(CreateKeyBook *v) {
    v->GetType = GetTypeCreateKeyBook;
    v->MarshalBinary = MarshalBinaryCreateKeyBook;
    v->UnmarshalBinary = UnmarshalBinaryCreateKeyBook;
    v->MarshalJSON = MarshalJSONCreateKeyBook;
    v->UnmarshalJSON = UnmarshalJSONCreateKeyBook;
    v->Equal = EqualCreateKeyBook;
    return v;
}
ACME_API CreateKeyPage_init(CreateKeyPage *v) {
    v->GetType = GetTypeCreateKeyPage;
    v->MarshalBinary = MarshalBinaryCreateKeyPage;
    v->UnmarshalBinary = UnmarshalBinaryCreateKeyPage;
    v->MarshalJSON = MarshalJSONCreateKeyPage;
    v->UnmarshalJSON = UnmarshalJSONCreateKeyPage;
    v->Equal = EqualCreateKeyPage;
    return v;
}
ACME_API CreateToken_init(CreateToken *v) {
    v->GetType = GetTypeCreateToken;
    v->MarshalBinary = MarshalBinaryCreateToken;
    v->UnmarshalBinary = UnmarshalBinaryCreateToken;
    v->MarshalJSON = MarshalJSONCreateToken;
    v->UnmarshalJSON = UnmarshalJSONCreateToken;
    v->Equal = EqualCreateToken;
    return v;
}
ACME_API CreateTokenAccount_init(CreateTokenAccount *v) {
    v->GetType = GetTypeCreateTokenAccount;
    v->MarshalBinary = MarshalBinaryCreateTokenAccount;
    v->UnmarshalBinary = UnmarshalBinaryCreateTokenAccount;
    v->MarshalJSON = MarshalJSONCreateTokenAccount;
    v->UnmarshalJSON = UnmarshalJSONCreateTokenAccount;
    v->Equal = EqualCreateTokenAccount;
    return v;
}
ACME_API IssueTokens_init(IssueTokens *v) {
    v->GetType = GetTypeIssueTokens;
    v->MarshalBinary = MarshalBinaryIssueTokens;
    v->UnmarshalBinary = UnmarshalBinaryIssueTokens;
    v->MarshalJSON = MarshalJSONIssueTokens;
    v->UnmarshalJSON = UnmarshalJSONIssueTokens;
    v->Equal = EqualIssueTokens;
    return v;
}
ACME_API KeySpecParams_init(KeySpecParams *v) {
    v->GetType = GetTypeKeySpecParams;
    v->MarshalBinary = MarshalBinaryKeySpecParams;
    v->UnmarshalBinary = UnmarshalBinaryKeySpecParams;
    v->MarshalJSON = MarshalJSONKeySpecParams;
    v->UnmarshalJSON = UnmarshalJSONKeySpecParams;
    v->Equal = EqualKeySpecParams;
    return v;
}
ACME_API SegWitDataEntry_init(SegWitDataEntry *v) {
    v->GetType = GetTypeSegWitDataEntry;
    v->MarshalBinary = MarshalBinarySegWitDataEntry;
    v->UnmarshalBinary = UnmarshalBinarySegWitDataEntry;
    v->MarshalJSON = MarshalJSONSegWitDataEntry;
    v->UnmarshalJSON = UnmarshalJSONSegWitDataEntry;
    v->Equal = EqualSegWitDataEntry;
    return v;
}
ACME_API SendTokens_init(SendTokens *v) {
    v->GetType = GetTypeSendTokens;
    v->MarshalBinary = MarshalBinarySendTokens;
    v->UnmarshalBinary = UnmarshalBinarySendTokens;
    v->MarshalJSON = MarshalJSONSendTokens;
    v->UnmarshalJSON = UnmarshalJSONSendTokens;
    v->Equal = EqualSendTokens;
    return v;
}
ACME_API SignPending_init(SignPending *v) {
    v->GetType = GetTypeSignPending;
    v->MarshalBinary = MarshalBinarySignPending;
    v->UnmarshalBinary = UnmarshalBinarySignPending;
    v->MarshalJSON = MarshalJSONSignPending;
    v->UnmarshalJSON = UnmarshalJSONSignPending;
    v->Equal = EqualSignPending;
    return v;
}
ACME_API SyntheticAnchor_init(SyntheticAnchor *v) {
    v->GetType = GetTypeSyntheticAnchor;
    v->MarshalBinary = MarshalBinarySyntheticAnchor;
    v->UnmarshalBinary = UnmarshalBinarySyntheticAnchor;
    v->MarshalJSON = MarshalJSONSyntheticAnchor;
    v->UnmarshalJSON = UnmarshalJSONSyntheticAnchor;
    v->Equal = EqualSyntheticAnchor;
    return v;
}
ACME_API SyntheticBurnTokens_init(SyntheticBurnTokens *v) {
    v->GetType = GetTypeSyntheticBurnTokens;
    v->MarshalBinary = MarshalBinarySyntheticBurnTokens;
    v->UnmarshalBinary = UnmarshalBinarySyntheticBurnTokens;
    v->MarshalJSON = MarshalJSONSyntheticBurnTokens;
    v->UnmarshalJSON = UnmarshalJSONSyntheticBurnTokens;
    v->Equal = EqualSyntheticBurnTokens;
    return v;
}
ACME_API SyntheticCreateChain_init(SyntheticCreateChain *v) {
    v->GetType = GetTypeSyntheticCreateChain;
    v->MarshalBinary = MarshalBinarySyntheticCreateChain;
    v->UnmarshalBinary = UnmarshalBinarySyntheticCreateChain;
    v->MarshalJSON = MarshalJSONSyntheticCreateChain;
    v->UnmarshalJSON = UnmarshalJSONSyntheticCreateChain;
    v->Equal = EqualSyntheticCreateChain;
    return v;
}
ACME_API SyntheticDepositCredits_init(SyntheticDepositCredits *v) {
    v->GetType = GetTypeSyntheticDepositCredits;
    v->MarshalBinary = MarshalBinarySyntheticDepositCredits;
    v->UnmarshalBinary = UnmarshalBinarySyntheticDepositCredits;
    v->MarshalJSON = MarshalJSONSyntheticDepositCredits;
    v->UnmarshalJSON = UnmarshalJSONSyntheticDepositCredits;
    v->Equal = EqualSyntheticDepositCredits;
    return v;
}
ACME_API SyntheticDepositTokens_init(SyntheticDepositTokens *v) {
    v->GetType = GetTypeSyntheticDepositTokens;
    v->MarshalBinary = MarshalBinarySyntheticDepositTokens;
    v->UnmarshalBinary = UnmarshalBinarySyntheticDepositTokens;
    v->MarshalJSON = MarshalJSONSyntheticDepositTokens;
    v->UnmarshalJSON = UnmarshalJSONSyntheticDepositTokens;
    v->Equal = EqualSyntheticDepositTokens;
    return v;
}
ACME_API SyntheticMirror_init(SyntheticMirror *v) {
    v->GetType = GetTypeSyntheticMirror;
    v->MarshalBinary = MarshalBinarySyntheticMirror;
    v->UnmarshalBinary = UnmarshalBinarySyntheticMirror;
    v->MarshalJSON = MarshalJSONSyntheticMirror;
    v->UnmarshalJSON = UnmarshalJSONSyntheticMirror;
    v->Equal = EqualSyntheticMirror;
    return v;
}
ACME_API SyntheticWriteData_init(SyntheticWriteData *v) {
    v->GetType = GetTypeSyntheticWriteData;
    v->MarshalBinary = MarshalBinarySyntheticWriteData;
    v->UnmarshalBinary = UnmarshalBinarySyntheticWriteData;
    v->MarshalJSON = MarshalJSONSyntheticWriteData;
    v->UnmarshalJSON = UnmarshalJSONSyntheticWriteData;
    v->Equal = EqualSyntheticWriteData;
    return v;
}
ACME_API TokenRecipient_init(TokenRecipient *v) {
    v->GetType = GetTypeTokenRecipient;
    v->MarshalBinary = MarshalBinaryTokenRecipient;
    v->UnmarshalBinary = UnmarshalBinaryTokenRecipient;
    v->MarshalJSON = MarshalJSONTokenRecipient;
    v->UnmarshalJSON = UnmarshalJSONTokenRecipient;
    v->Equal = EqualTokenRecipient;
    return v;
}
ACME_API UpdateKeyPage_init(UpdateKeyPage *v) {
    v->GetType = GetTypeUpdateKeyPage;
    v->MarshalBinary = MarshalBinaryUpdateKeyPage;
    v->UnmarshalBinary = UnmarshalBinaryUpdateKeyPage;
    v->MarshalJSON = MarshalJSONUpdateKeyPage;
    v->UnmarshalJSON = UnmarshalJSONUpdateKeyPage;
    v->Equal = EqualUpdateKeyPage;
    return v;
}
ACME_API WriteData_init(WriteData *v) {
    v->GetType = GetTypeWriteData;
    v->MarshalBinary = MarshalBinaryWriteData;
    v->UnmarshalBinary = UnmarshalBinaryWriteData;
    v->MarshalJSON = MarshalJSONWriteData;
    v->UnmarshalJSON = UnmarshalJSONWriteData;
    v->Equal = EqualWriteData;
    return v;
}
ACME_API WriteDataResult_init(WriteDataResult *v) {
    v->GetType = GetTypeWriteDataResult;
    v->MarshalBinary = MarshalBinaryWriteDataResult;
    v->UnmarshalBinary = UnmarshalBinaryWriteDataResult;
    v->MarshalJSON = MarshalJSONWriteDataResult;
    v->UnmarshalJSON = UnmarshalJSONWriteDataResult;
    v->Equal = EqualWriteDataResult;
    return v;
}
ACME_API WriteDataTo_init(WriteDataTo *v) {
    v->GetType = GetTypeWriteDataTo;
    v->MarshalBinary = MarshalBinaryWriteDataTo;
    v->UnmarshalBinary = UnmarshalBinaryWriteDataTo;
    v->MarshalJSON = MarshalJSONWriteDataTo;
    v->UnmarshalJSON = UnmarshalJSONWriteDataTo;
    v->Equal = EqualWriteDataTo;
    return v;
}

/// Transaction Type
ACME_API TxType GetTypeAcmeFaucet();
ACME_API TxType GetTypeAddCredits();
ACME_API TxType GetTypeBurnTokens();
ACME_API TxType GetTypeCreateDataAccount();
ACME_API TxType GetTypeCreateIdentity();
ACME_API TxType GetTypeCreateKeyBook();
ACME_API TxType GetTypeCreateKeyPage();
ACME_API TxType GetTypeCreateToken();
ACME_API TxType GetTypeCreateTokenAccount();
ACME_API TxType GetTypeIssueTokens();
ACME_API TxType GetTypeSegWitDataEntry();
ACME_API TxType GetTypeSendTokens();
ACME_API TxType GetTypeSignPending();
ACME_API TxType GetTypeSyntheticAnchor();
ACME_API TxType GetTypeSyntheticBurnTokens();
ACME_API TxType GetTypeSyntheticCreateChain();
ACME_API TxType GetTypeSyntheticDepositCredits();
ACME_API TxType GetTypeSyntheticDepositTokens();
ACME_API TxType GetTypeSyntheticMirror();
ACME_API TxType GetTypeSyntheticWriteData();
ACME_API TxType GetTypeUpdateKeyPage();
ACME_API TxType GetTypeWriteData();
ACME_API TxType GetTypeWriteDataTo();

/// Comparisons
ACME_API bool EqualAcmeFaucet(AcmeFaucet *v, AcmeFaucet *u);
ACME_API bool EqualAddCredits(AddCredits *v, AddCredits *u);
ACME_API bool EqualAnchoredRecord(AnchoredRecord *v, AnchoredRecord *u);
ACME_API bool EqualBurnTokens(BurnTokens *v, BurnTokens *u);
ACME_API bool EqualChainParams(ChainParams *v, ChainParams *u);
ACME_API bool EqualCreateDataAccount(CreateDataAccount *v, CreateDataAccount *u);
ACME_API bool EqualCreateIdentity(CreateIdentity *v, CreateIdentity *u);
ACME_API bool EqualCreateKeyBook(CreateKeyBook *v, CreateKeyBook *u);
ACME_API bool EqualCreateKeyPage(CreateKeyPage *v, CreateKeyPage *u);
ACME_API bool EqualCreateToken(CreateToken *v, CreateToken *u);
ACME_API bool EqualCreateTokenAccount(CreateTokenAccount *v, CreateTokenAccount *u);
ACME_API bool EqualIssueTokens(IssueTokens *v, IssueTokens *u);
ACME_API bool EqualKeySpecParams(KeySpecParams *v, KeySpecParams *u);
ACME_API bool EqualSegWitDataEntry(SegWitDataEntry *v, SegWitDataEntry *u);
ACME_API bool EqualSendTokens(SendTokens *v, SendTokens *u);
ACME_API bool EqualSignPending(SignPending *v, SignPending *u);
ACME_API bool EqualSyntheticAnchor(SyntheticAnchor *v, SyntheticAnchor *u);
ACME_API bool EqualSyntheticBurnTokens(SyntheticBurnTokens *v, SyntheticBurnTokens *u);
ACME_API bool EqualSyntheticCreateChain(SyntheticCreateChain *v, SyntheticCreateChain *u);
ACME_API bool EqualSyntheticDepositCredits(SyntheticDepositCredits *v, SyntheticDepositCredits *u);
ACME_API bool EqualSyntheticDepositTokens(SyntheticDepositTokens *v, SyntheticDepositTokens *u);
ACME_API bool EqualSyntheticMirror(SyntheticMirror *v, SyntheticMirror *u);
ACME_API bool EqualSyntheticWriteData(SyntheticWriteData *v, SyntheticWriteData *u);
ACME_API bool EqualTokenRecipient(TokenRecipient *v, TokenRecipient *u);
ACME_API bool EqualUpdateKeyPage(UpdateKeyPage *v, UpdateKeyPage *u);
ACME_API bool EqualWriteData(WriteData *v, WriteData *u);
ACME_API bool EqualWriteDataResult(WriteDataResult *v, WriteDataResult *u);
ACME_API bool EqualWriteDataTo(WriteDataTo *v, WriteDataTo *u);

/// Marshaled Binary Size Calculations
ACME_API int BinarySizeAcmeFaucet(AcmeFaucet *v);
ACME_API int BinarySizeAddCredits(AddCredits *v);
ACME_API int BinarySizeAnchoredRecord(AnchoredRecord *v);
ACME_API int BinarySizeBurnTokens(BurnTokens *v);
ACME_API int BinarySizeChainParams(ChainParams *v);
ACME_API int BinarySizeCreateDataAccount(CreateDataAccount *v);
ACME_API int BinarySizeCreateIdentity(CreateIdentity *v);
ACME_API int BinarySizeCreateKeyBook(CreateKeyBook *v);
ACME_API int BinarySizeCreateKeyPage(CreateKeyPage *v);
ACME_API int BinarySizeCreateToken(CreateToken *v);
ACME_API int BinarySizeCreateTokenAccount(CreateTokenAccount *v);
ACME_API int BinarySizeIssueTokens(IssueTokens *v);
ACME_API int BinarySizeKeySpecParams(KeySpecParams *v);
ACME_API int BinarySizeSegWitDataEntry(SegWitDataEntry *v);
ACME_API int BinarySizeSendTokens(SendTokens *v);
ACME_API int BinarySizeSignPending(SignPending *v);
ACME_API int BinarySizeSyntheticAnchor(SyntheticAnchor *v);
ACME_API int BinarySizeSyntheticBurnTokens(SyntheticBurnTokens *v);
ACME_API int BinarySizeSyntheticCreateChain(SyntheticCreateChain *v);
ACME_API int BinarySizeSyntheticDepositCredits(SyntheticDepositCredits *v);
ACME_API int BinarySizeSyntheticDepositTokens(SyntheticDepositTokens *v);
ACME_API int BinarySizeSyntheticMirror(SyntheticMirror *v);
ACME_API int BinarySizeSyntheticWriteData(SyntheticWriteData *v);
ACME_API int BinarySizeTokenRecipient(TokenRecipient *v);
ACME_API int BinarySizeUpdateKeyPage(UpdateKeyPage *v);
ACME_API int BinarySizeWriteData(WriteData *v);
ACME_API int BinarySizeWriteDataResult(WriteDataResult *v);
ACME_API int BinarySizeWriteDataTo(WriteDataTo *v);

/// Binary Marshalers
ACME_API ReturnBytes MarshalBinaryAcmeFaucet(AcmeFaucet *v);
ACME_API ReturnBytes MarshalBinaryAddCredits(AddCredits *v);
ACME_API ReturnBytes MarshalBinaryAnchoredRecord(AnchoredRecord *v);
ACME_API ReturnBytes MarshalBinaryBurnTokens(BurnTokens *v);
ACME_API ReturnBytes MarshalBinaryChainParams(ChainParams *v);
ACME_API ReturnBytes MarshalBinaryCreateDataAccount(CreateDataAccount *v);
ACME_API ReturnBytes MarshalBinaryCreateIdentity(CreateIdentity *v);
ACME_API ReturnBytes MarshalBinaryCreateKeyBook(CreateKeyBook *v);
ACME_API ReturnBytes MarshalBinaryCreateKeyPage(CreateKeyPage *v);
ACME_API ReturnBytes MarshalBinaryCreateToken(CreateToken *v);
ACME_API ReturnBytes MarshalBinaryCreateTokenAccount(CreateTokenAccount *v);
ACME_API ReturnBytes MarshalBinaryIssueTokens(IssueTokens *v);
ACME_API ReturnBytes MarshalBinaryKeySpecParams(KeySpecParams *v);
ACME_API ReturnBytes MarshalBinarySegWitDataEntry(SegWitDataEntry *v);
ACME_API ReturnBytes MarshalBinarySendTokens(SendTokens *v);
ACME_API ReturnBytes MarshalBinarySignPending(SignPending *v);
ACME_API ReturnBytes MarshalBinarySyntheticAnchor(SyntheticAnchor *v);
ACME_API ReturnBytes MarshalBinarySyntheticBurnTokens(SyntheticBurnTokens *v);
ACME_API ReturnBytes MarshalBinarySyntheticCreateChain(SyntheticCreateChain *v);
ACME_API ReturnBytes MarshalBinarySyntheticDepositCredits(SyntheticDepositCredits *v);
ACME_API ReturnBytes MarshalBinarySyntheticDepositTokens(SyntheticDepositTokens *v);
ACME_API ReturnBytes MarshalBinarySyntheticMirror(SyntheticMirror *v);
ACME_API ReturnBytes MarshalBinarySyntheticWriteData(SyntheticWriteData *v);
ACME_API ReturnBytes MarshalBinaryTokenRecipient(TokenRecipient *v);
ACME_API ReturnBytes MarshalBinaryUpdateKeyPage(UpdateKeyPage *v);
ACME_API ReturnBytes MarshalBinaryWriteData(WriteData *v);
ACME_API ReturnBytes MarshalBinaryWriteDataResult(WriteDataResult *v);
ACME_API ReturnBytes MarshalBinaryWriteDataTo(WriteDataTo *v);

/// Binary Unmarshalers
ACME_API Error UnmarshalBinaryAcmeFaucet(AcmeFaucet*v, data []byte);
ACME_API Error UnmarshalBinaryAddCredits(AddCredits*v, data []byte);
ACME_API Error UnmarshalBinaryAnchoredRecord(AnchoredRecord*v, data []byte);
ACME_API Error UnmarshalBinaryBurnTokens(BurnTokens*v, data []byte);
ACME_API Error UnmarshalBinaryChainParams(ChainParams*v, data []byte);
ACME_API Error UnmarshalBinaryCreateDataAccount(CreateDataAccount*v, data []byte);
ACME_API Error UnmarshalBinaryCreateIdentity(CreateIdentity*v, data []byte);
ACME_API Error UnmarshalBinaryCreateKeyBook(CreateKeyBook*v, data []byte);
ACME_API Error UnmarshalBinaryCreateKeyPage(CreateKeyPage*v, data []byte);
ACME_API Error UnmarshalBinaryCreateToken(CreateToken*v, data []byte);
ACME_API Error UnmarshalBinaryCreateTokenAccount(CreateTokenAccount*v, data []byte);
ACME_API Error UnmarshalBinaryIssueTokens(IssueTokens*v, data []byte);
ACME_API Error UnmarshalBinaryKeySpecParams(KeySpecParams*v, data []byte);
ACME_API Error UnmarshalBinarySegWitDataEntry(SegWitDataEntry*v, data []byte);
ACME_API Error UnmarshalBinarySendTokens(SendTokens*v, data []byte);
ACME_API Error UnmarshalBinarySignPending(SignPending*v, data []byte);
ACME_API Error UnmarshalBinarySyntheticAnchor(SyntheticAnchor*v, data []byte);
ACME_API Error UnmarshalBinarySyntheticBurnTokens(SyntheticBurnTokens*v, data []byte);
ACME_API Error UnmarshalBinarySyntheticCreateChain(SyntheticCreateChain*v, data []byte);
ACME_API Error UnmarshalBinarySyntheticDepositCredits(SyntheticDepositCredits*v, data []byte);
ACME_API Error UnmarshalBinarySyntheticDepositTokens(SyntheticDepositTokens*v, data []byte);
ACME_API Error UnmarshalBinarySyntheticMirror(SyntheticMirror*v, data []byte);
ACME_API Error UnmarshalBinarySyntheticWriteData(SyntheticWriteData*v, data []byte);
ACME_API Error UnmarshalBinaryTokenRecipient(TokenRecipient*v, data []byte);
ACME_API Error UnmarshalBinaryUpdateKeyPage(UpdateKeyPage*v, data []byte);
ACME_API Error UnmarshalBinaryWriteData(WriteData*v, data []byte);
ACME_API Error UnmarshalBinaryWriteDataResult(WriteDataResult*v, data []byte);
ACME_API Error UnmarshalBinaryWriteDataTo(WriteDataTo*v, data []byte);

/// JSON Marshaling

/// JSON Marshaling
ACME_API ReturnBytes MarshalJSONAnchoredRecord(AnchoredRecord *v);
ACME_API ReturnBytes MarshalJSONBurnTokens(BurnTokens *v);
ACME_API ReturnBytes MarshalJSONChainParams(ChainParams *v);
ACME_API ReturnBytes MarshalJSONCreateIdentity(CreateIdentity *v);
ACME_API ReturnBytes MarshalJSONCreateToken(CreateToken *v);
ACME_API ReturnBytes MarshalJSONIssueTokens(IssueTokens *v);
ACME_API ReturnBytes MarshalJSONKeySpecParams(KeySpecParams *v);
ACME_API ReturnBytes MarshalJSONSegWitDataEntry(SegWitDataEntry *v);
ACME_API ReturnBytes MarshalJSONSendTokens(SendTokens *v);
ACME_API ReturnBytes MarshalJSONSyntheticAnchor(SyntheticAnchor *v);
ACME_API ReturnBytes MarshalJSONSyntheticBurnTokens(SyntheticBurnTokens *v);
ACME_API ReturnBytes MarshalJSONSyntheticCreateChain(SyntheticCreateChain *v);
ACME_API ReturnBytes MarshalJSONSyntheticDepositCredits(SyntheticDepositCredits *v);
ACME_API ReturnBytes MarshalJSONSyntheticDepositTokens(SyntheticDepositTokens *v);
ACME_API ReturnBytes MarshalJSONSyntheticWriteData(SyntheticWriteData *v);
ACME_API ReturnBytes MarshalJSONTokenRecipient(TokenRecipient *v);
ACME_API ReturnBytes MarshalJSONUpdateKeyPage(UpdateKeyPage *v);
ACME_API ReturnBytes MarshalJSONWriteDataResult(WriteDataResult *v);

/// JSON Unmarshaling
ACME_API Error UnmarshalJSONAnchoredRecord(AnchoredRecord *v,data []byte);
ACME_API Error UnmarshalJSONBurnTokens(BurnTokens *v,data []byte);
ACME_API Error UnmarshalJSONChainParams(ChainParams *v,data []byte);
ACME_API Error UnmarshalJSONCreateIdentity(CreateIdentity *v,data []byte);
ACME_API Error UnmarshalJSONCreateToken(CreateToken *v,data []byte);
ACME_API Error UnmarshalJSONIssueTokens(IssueTokens *v,data []byte);
ACME_API Error UnmarshalJSONKeySpecParams(KeySpecParams *v,data []byte);
ACME_API Error UnmarshalJSONSegWitDataEntry(SegWitDataEntry *v,data []byte);
ACME_API Error UnmarshalJSONSendTokens(SendTokens *v,data []byte);
ACME_API Error UnmarshalJSONSyntheticAnchor(SyntheticAnchor *v,data []byte);
ACME_API Error UnmarshalJSONSyntheticBurnTokens(SyntheticBurnTokens *v,data []byte);
ACME_API Error UnmarshalJSONSyntheticCreateChain(SyntheticCreateChain *v,data []byte);
ACME_API Error UnmarshalJSONSyntheticDepositCredits(SyntheticDepositCredits *v,data []byte);
ACME_API Error UnmarshalJSONSyntheticDepositTokens(SyntheticDepositTokens *v,data []byte);
ACME_API Error UnmarshalJSONSyntheticWriteData(SyntheticWriteData *v,data []byte);
ACME_API Error UnmarshalJSONTokenRecipient(TokenRecipient *v,data []byte);
ACME_API Error UnmarshalJSONUpdateKeyPage(UpdateKeyPage *v,data []byte);
ACME_API Error UnmarshalJSONWriteDataResult(WriteDataResult *v,data []byte);
#ifdef __cplusplus
}
#endif
