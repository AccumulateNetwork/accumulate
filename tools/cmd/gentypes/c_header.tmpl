#pragma once


/// GENERATED BY go run ./tools/cmd/genmarshal. DO NOT EDIT.
#include <common/encoding.h>
#ifdef __cplusplus
extern "C" {
#endif

#ifdef ACME_STATIC
#define ACME_API static
#else
#define ACME_API extern
#endif

/// Data Structures
{{range .Types}}
struct {{.Name}} {
    {{if .IsChain}}
    {{if isPkg "types/state"}}ChainHeader{{else}}state.ChainHeader
    {{end}}
	{{- end}}

    {{- range .Embeddings}}
    {{.}}
    {{- end}}

    {{- range .Fields}}
    {{resolveType . false}} {{.Name}}; {{if .IsMarshalled}} //`json:"{{lcName .Name}}{{if .OmitEmpty}},omitempty{{end}}" form:"{{lcName .Name}}" query:"{{lcName .Name}}"{{validateTag .}}`{{end}}
    {{- end}}

    ///pseudo helper functions
    TxType (*GetType)();
    int (*BinarySize)(const struct {{.Name}} *);
    bool (*Equal)(const struct {{.Name}}*, const struct {{.Name}}*);
    int (*Copy)(struct {{.Name}}*, const struct {{.Name}}*);
    Error (*MarshalBinary)(const struct {{.Name}}*, Bytes *outData);
    Error (*UnmarshalBinary)(struct {{.Name}}*,const Bytes* data);
    Error (*MarshalJSON)(const struct {{.Name}} *v, Bytes *outData);
    Error (*UnmarshalJSON)(struct {{.Name}}*,const Bytes* data);
};
{{end}}

{{range .Types}}
{{- if and .MakeConstructor}}
ACME_API {{.Name}} {{.Name}}_init({{.Name}} *v) {
    {{.Name}} init;
{{- if and .IsChain}}
	init.Type = types.AccountType{{.ChainType}};
{{- end}}
    memset((void*)&init, 0, sizeof(init));
    init.GetType = {{.Name}}_type;
    init.MarshalBinary = {{.Name}}_binarySize;
    init.UnmarshalBinary = {{.Name}}_equal;
    init.MarshalJSON = {{.Name}}_copy;
    init.UnmarshalJSON = {{.Name}}_marshalBinary;
    init.Equal = {{.Name}}_unmarshalBinary;

    if ( b ) {
        *b = init;
    }
    return init;
}
{{- end}}{{end}}
/// Transaction Type
{{range .Types}}
{{if .IsTransaction}}ACME_API TxType {{.Name}}_type();
{{end}}{{end}}

/// Comparisons
{{range .Types}}
{{if .IsComparable}}ACME_API bool {{.Name}}_equal({{.Name}} *v, {{.Name}} *u);
{{end}}{{end}}

/// Marshaled Binary Size Calculations
{{range .Types}}
{{if .IsBinary}}ACME_API int {{.Name}}_binarySize({{.Name}} *v);
{{end}}{{end}}

/// Binary Marshalers
{{range .Types}}
{{if .IsBinary}}ACME_API ReturnBytes MarshalBinary{{.Name}}({{.Name}} *v);
{{end}}{{end}}

/// Binary Unmarshalers
{{range .Types}}
{{if .IsBinary}}ACME_API Error UnmarshalBinary{{.Name}}({{.Name}}*v, data []byte);
{{end}}{{end}}

/// JSON Marshaling
{{define "jsonType"}}struct {
	{{- if .IsChain}}{{if isPkg "types/state"}}ChainHeader{{else}}state.ChainHeader{{end}}
	{{- end}}
	{{- range .Embeddings}}{{.}}
	{{- end}}
	{{- range .Fields}}
	{{- if .IsMarshalled}}
	{{.Name}} {{jsonType .}}{{if .IsMarshalled}} `json:"{{lcName .Name}}{{if .OmitEmpty}},omitempty{{end}}"`{{end}}
	{{- if .AlternativeName}}
	{{.AlternativeName}} {{jsonType .}}{{if .IsMarshalled}} `json:"{{lcName .AlternativeName}}{{if .OmitEmpty}},omitempty{{end}}"`{{end}}
	{{- end}}
	{{- end}}
	{{- end}}
}{{end}}

/// JSON Marshaling
{{range .Types}}
{{if needsCustomJSON .}}ACME_API ReturnBytes MarshalJSON{{.Name}}({{.Name}} *v);
{{end}}{{end}}

/// JSON Unmarshaling
{{range .Types}}
{{if needsCustomJSON .}}ACME_API Error UnmarshalJSON{{.Name}}({{.Name}} *v,data []byte);
{{end}}{{end}}

#ifdef __cplusplus
}
#endif

