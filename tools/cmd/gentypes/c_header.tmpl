#pragma once

/// GENERATED BY go run ./tools/cmd/genmarshal. DO NOT EDIT.
#include <jsmn.h>
#include <encoding.h>
#include <transactions.h>
#include <types.h>
#include <url.h>
#include <state.h>
#include <big.h>
{{- if not (isPkg "types/state")}}
#include "types/state.h"
{{- end}}
{{- if not (isPkg "types/api/transactions")}}
#include "types/api/transactions"
{{- end}}

/// Data Structures
{{range .Types}}
struct {{.Name}} {
    {{if .IsChain}}
    {{if isPkg "types/state"}}ChainHeader{{else}}state.ChainHeader
    {{end}}
	{{- end}}

	{{- range .Embeddings}}
	{{.}}
	{{- end}}

	{{- range .Fields}}
	{{resolveType . false}} {{.Name}}; {{if .IsMarshalled}} //`json:"{{lcName .Name}}{{if .OmitEmpty}},omitempty{{end}}" form:"{{lcName .Name}}" query:"{{lcName .Name}}"{{validateTag .}}`{{end}}
	{{- end}}

    ///pseudo helper functions
    int (*GetType)();
    rbytes (*MarshalBinary)(v *{{.Name}});
    error (*UnmarshalBinary)(v *{{.Name}});
    rbytes (*MarshalJSON)(v *{{.Name}});
    error (*UnmarshalJSON)(v *{{.Name}});
    bool (*Equal)(v *{{.Name}},u *{{.Name}});
    int (*BinarySize)(v *{{.Name}});
};
{{end}}

{{range .Types}}
{{- if and .MakeConstructor}}
func New{{.Name}}() {{.Name}} {
	{{.Name}} v;
{{- if and .IsChain}}
	v.Type = types.AccountType{{.ChainType}};
{{- end}}
    v.GetType = GetType{{.Name}};
    v.MarshalBinary = MarshalBinary{{.Name}};
    v.UnmarshalBinary = UnmarshalBinary{{.Name}};
    v.MarshalJSON = MarshalJSON{{.Name}};
    v.UnmarshalJSON = UnmarshalJSON{{.Name}};
    v.Equal = Equal{{.Name}};
    return v;
}
{{- end}}{{end}}
/// Transaction Type
{{range .Types}}
{{if .IsTransaction}}TxType GetType{{.Name}}();
{{end}}{{end}}

/// Comparisons
{{range .Types}}
{{if .IsComparable}}bool Equal{{.Name}}({{.Name}} *v, {{.Name}} *u);
{{end}}{{end}}

/// Marshaled Binary Size Calculations
{{range .Types}}
{{if .IsBinary}}int BinarySize{{.Name}}({{.Name}} *v);
{{end}}{{end}}

/// Binary Marshalers
{{range .Types}}
{{if .IsBinary}}rbytes MarshalBinary{{.Name}}({{.Name}} *v);
{{end}}{{end}}

/// Binary Unmarshalers
{{range .Types}}
{{if .IsBinary}}error UnmarshalBinary{{.Name}}({{.Name}}*v, data []byte);
{{end}}{{end}}

/// JSON Marshaling
{{define "jsonType"}}struct {
	{{- if .IsChain}}{{if isPkg "types/state"}}ChainHeader{{else}}state.ChainHeader{{end}}
	{{- end}}
	{{- range .Embeddings}}{{.}}
	{{- end}}
	{{- range .Fields}}
	{{- if .IsMarshalled}}
	{{.Name}} {{jsonType .}}{{if .IsMarshalled}} `json:"{{lcName .Name}}{{if .OmitEmpty}},omitempty{{end}}"`{{end}}
	{{- if .AlternativeName}}
	{{.AlternativeName}} {{jsonType .}}{{if .IsMarshalled}} `json:"{{lcName .AlternativeName}}{{if .OmitEmpty}},omitempty{{end}}"`{{end}}
	{{- end}}
	{{- end}}
	{{- end}}
}{{end}}

/// JSON Marshaling
{{range .Types}}
{{if needsCustomJSON .}}rbytes MarshalJSON{{.Name}}({{.Name}} *v);
{{end}}{{end}}

/// JSON Unmarshaling
{{range .Types}}
{{if needsCustomJSON .}}error UnmarshalJSON{{.Name}}({{.Name}} *v,data []byte);
{{end}}{{end}}

