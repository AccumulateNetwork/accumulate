#pragma once


/// GENERATED BY go run ./tools/cmd/genmarshal. DO NOT EDIT.
#include <common/encoding.h>
#include "_enums.h"
#ifdef __cplusplus
extern "C" {
#endif

#ifdef ACME_STATIC
#define ACME_API static
#else
#define ACME_API extern
#endif

/// Data Structures
{{range .Types}}
typedef struct {{.Name}} {
    {{if .IsChain}}
    {{if isPkg "types/state"}}ChainHeader{{else}}state.ChainHeader
    {{end}}
	{{- end}}

    {{- range .Embeddings}}
    {{.}}
    {{- end}}

    {{- range .Fields}}
    {{resolveType . false}} {{.Name}}; {{if .IsMarshalled}} //`json:"{{lcName .Name}}{{if .OmitEmpty}},omitempty{{end}}" form:"{{lcName .Name}}" query:"{{lcName .Name}}"{{validateTag .}}`{{end}}
    {{- end}}

    ///pseudo helper functions
    TransactionType (*GetType)();
    int (*BinarySize)(const struct {{.Name}} *);
    bool (*Equal)(const struct {{.Name}}*, const struct {{.Name}}*);
    //int (*Copy)(struct {{.Name}}*, const struct {{.Name}}*);
    Error (*MarshalBinary)(const struct {{.Name}}*, Bytes *outData);
    Error (*UnmarshalBinary)(struct {{.Name}}*,const Bytes* data);
    Error (*MarshalJSON)(const struct {{.Name}} *v, Bytes *outData);
    Error (*UnmarshalJSON)(struct {{.Name}}*,const Bytes* data);
} {{.Name}};
{{end}}

/// Transaction Type
{{range .Types}}
{{if .IsTransaction}}static TransactionType {{.Name}}_type() { return TransactionType{{.TransactionType}}; }
{{end}}{{end}}

/// Comparisons
{{range .Types}}
{{if .IsComparable}}static bool {{.Name}}_equal(const {{.Name}} *v, const {{.Name}} *u) {
    {{- if .IsChain}}
    if !v.ChainHeader.Equal(&u.ChainHeader) {
        return false;
    }
    {{end}}

    {{- range .Fields}}
    {{- if .IsMarshalled}}
    {{areEqual . (print "v->" .Name) (print "&v->" .Name ",&u->" .Name)}}
    {{- end}}
    {{- end}}

    return true;
}
{{end}}{{end}}


/// Marshaled Binary Size Calculations
{{range .Types}}
{{if .IsBinary}}ACME_API int {{.Name}}_binarySize(const {{.Name}} *v) {
    int n = 0;

    {{if .IsTransaction}}
    n += varint_size((uint64_t)(v->GetType()));
    {{end}}

    {{if .IsChain}}
    // Enforce sanity
    v.Type = types.AccountType{{.ChainType}}

    n += v.ChainHeader.GetHeaderSize()
    {{end}}

    {{- range .Embeddings}}
    n += v->{{.}}.BinarySize(v);
    {{end}}

    {{- range .Fields}}
    {{- if .IsMarshalled}}
    {{binarySize . (print "v->" .Name)}}
    {{- end}}
    {{- end}}

    return n;
}
{{end}}{{end}}

/// Binary Marshalers
{{range .Types}}
{{if .IsBinary}}ACME_API Error {{.Name}}_marshalBinary({{.Name}} *v, Bytes *outData) {
    return ErrorCode[ErrorNotImplemented];
}
{{end}}{{end}}

/// Binary Unmarshalers
{{range .Types}}
{{if .IsBinary}}ACME_API Error {{.Name}}_unmarshalBinary({{.Name}}*v, const Bytes *inData) {
    return ErrorCode[ErrorNotImplemented];
}
{{end}}{{end}}

/// JSON Marshaling
{{define "jsonType"}}struct {
	{{- if .IsChain}}{{if isPkg "types/state"}}ChainHeader{{else}}state.ChainHeader{{end}}
	{{- end}}
	{{- range .Embeddings}}{{.}} {{lcName .}};
	{{- end}}
	{{- range .Fields}}
	{{- if .IsMarshalled}}
	{{.Name}} {{jsonType .}}{{if .IsMarshalled}} `json:"{{lcName .Name}}{{if .OmitEmpty}},omitempty{{end}}"`{{end}}
	{{- if .AlternativeName}}
	{{.AlternativeName}} {{jsonType .}}{{if .IsMarshalled}} `json:"{{lcName .AlternativeName}}{{if .OmitEmpty}},omitempty{{end}}"`{{end}}
	{{- end}}
	{{- end}}
	{{- end}}
}{{end}}

/// JSON Marshaling
{{range .Types}}
{{if needsCustomJSON .}}static Error {{.Name}}_marshalJSON(const {{.Name}} *v, const Bytes *inData) {
    return ErrorCode[ErrorNotImplemented];
}
{{end}}{{end}}

/// JSON Unmarshaling
{{range .Types}}
{{if needsCustomJSON .}}static Error {{.Name}}_unmarshalJSON({{.Name}} *v,Bytes *outData) {
    return ErrorCode[ErrorNotImplemented];
}
{{end}}{{end}}

{{range .Types}}
{{- if and .MakeConstructor}}
static {{.Name}} {{.Name}}_init({{.Name}} *v) {
    {{.Name}} init;
    memset((void*)&init, 0, sizeof(init));

{{- if and .IsChain}}
	init.Type = types.AccountType{{.ChainType}};
{{- end}}
    init.GetType = {{.Name}}_type;
    init.BinarySize = {{.Name}}_binarySize;
    init.Equal = {{.Name}}_equal;
    //init.Copy = {{.Name}}_copy;
    init.MarshalBinary = {{.Name}}_marshalBinary;
    init.UnmarshalBinary = {{.Name}}_unmarshalBinary;
    {{if needsCustomJSON .}}
    init.MarshalJSON = {{.Name}}_marshalJSON;
    init.UnmarshalJSON = {{.Name}}_unmarshalJSON;
    {{end}}

    if ( v ) {
        *v = init;
    }
    return init;
}
{{- end}}{{end}}

#ifdef __cplusplus
}
#endif

