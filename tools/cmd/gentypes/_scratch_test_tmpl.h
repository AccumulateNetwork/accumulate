#ifndef ENCODING_H
#define ENCODING_H

// go run ./tools/cmd/gentypes ../../../protocol/basic.yml --language c --out _test.h
// GENERATED BY go run ./tools/cmd/genmarshal. DO NOT EDIT.

#include <common/jsmn.h>
#include <common/uint256.h>
#include <common/varint.h>

struct Error {
   int code;
   char err[64];
} Error_init = { 0, {0} };

struct Bytes {
   size_t len;
   uint8_t *data;
   int (*BinarySize)(Bytes *);
} Bytes_init = { 0, 0 };

struct Bytes32 {
    uint64_t len;
    uint8_t data[32];
    int (*BinarySize)(Bytes32 *);
} Bytes32_init = { {0}, 32 };

struct Bytes64 {
    uint64_t len;
    uint8_t data[64];
    int (*BinarySize)(Bytes64 *);
} Bytes64_init = { {0}, 64 };

struct BigInt {
    uint256_t bigInt;
};

struct ReturnBytes {
   Bytes bytes;
   Error err;
} ReturnBytes_init = { Bytes_init, Error_init };

struct String {
   Bytes string;
   int (*BinarySize)(String *);
} String_init = { Bytes_init, BinarySizeString };


int BinarySizeString(String *s) {
    return s->len;
}

int BinarySizeBytes(Bytes *s) {
    return s->len;
}

int BinarySizeBytes32(String *s) {
    return s->len;
}

int BinarySizeString(String *s) {
    return s->len;
}

#endif