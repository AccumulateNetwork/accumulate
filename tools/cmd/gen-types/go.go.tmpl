package {{.Package}}

// GENERATED BY go run ./tools/cmd/genmarshal. DO NOT EDIT.

import (
	"bytes"
	"encoding/json"
	"fmt"
	"math/big"
	"time"

	"gitlab.com/accumulatenetwork/accumulate/config"
	"gitlab.com/accumulatenetwork/accumulate/internal/encoding"
	"gitlab.com/accumulatenetwork/accumulate/internal/url"
	"gitlab.com/accumulatenetwork/accumulate/types"
	{{- if not (isPkg "protocol")}}
	"gitlab.com/accumulatenetwork/accumulate/protocol"
	{{- end}}
	{{- if not (isPkg "types/state")}}
	"gitlab.com/accumulatenetwork/accumulate/types/state"
	{{- end}}
	{{- if not (isPkg "types/api/transactions")}}
	"gitlab.com/accumulatenetwork/accumulate/types/api/transactions"
	{{- end}}
)

{{range .Types}}
type {{.Name}} struct {
	{{if .IsChain}}{{if not (isPkg "protocol")}}protocol.{{end}}AccountHeader
	{{- end}}
	{{- range .Embeddings}}
	{{.Name}}
	{{- end}}
	{{- range .Fields}}
	{{.Name}} {{resolveType . false}}{{if .IsMarshalled}} `json:"{{lcName .Name}}{{if .OmitEmpty}},omitempty{{end}}" form:"{{lcName .Name}}" query:"{{lcName .Name}}"{{validateTag .}}`{{end}}
	{{- end}}
}
{{end}}

{{range .Types}}
{{- if and .IsChain .MakeConstructor}}
func New{{.Name}}() *{{.Name}} {
	v := new({{.Name}})
	v.Type = {{if not (isPkg "protocol")}}protocol.{{end}}AccountType{{.ChainType}}
	return v
}
{{- end}}
{{end}}

{{range .Types}}{{if or .IsTransaction .IsTxResult}}
func (*{{.Name}}) GetType() {{if not (isPkg "protocol")}}protocol.{{end}}TransactionType { return {{if not (isPkg "protocol")}}protocol.{{end}}TransactionType{{.TransactionType}} }
{{end}}{{end}}

{{range .Types}}{{if .IsComparable}}
func (v *{{.Name}}) Equal(u *{{.Name}}) bool {
	{{- if .IsChain}}
	if !v.AccountHeader.Equal(&u.AccountHeader) {
		return false
	}
	{{end}}

	{{- range .Fields}}
	{{- if .IsMarshalled}}
	{{areEqual . (print "v." .Name) (print "u." .Name)}}
	{{- end}}
	{{- end}}

	return true
}
{{end}}{{end}}

{{range .Types}}{{if .IsBinary}}
func (v *{{.Name}}) BinarySize() int {
	var n int

	{{if or .IsTransaction .IsTxResult}}
	n += encoding.UvarintBinarySize({{if not (isPkg "protocol")}}protocol.{{end}}TransactionType{{.TransactionType}}.ID())
	{{end}}

	{{if .IsChain}}
	// Enforce sanity
	v.Type = {{if not (isPkg "protocol")}}protocol.{{end}}AccountType{{.ChainType}}

	n += v.AccountHeader.GetHeaderSize()
	{{end}}

	{{- range .Embeddings}}
	n += v.{{.Name}}.BinarySize()
	{{end}}

	{{- range .Fields}}
	{{- if .IsMarshalled}}
	{{binarySize . (print "v." .Name)}}
	{{- end}}
	{{- end}}

	return n
}
{{end}}{{end}}

{{range .Types}}{{if .IsBinary}}
func (v *{{.Name}}) MarshalBinary() ([]byte, error) {
	var buffer bytes.Buffer

	{{if or .IsTransaction .IsTxResult}}
	buffer.Write(encoding.UvarintMarshalBinary({{if not (isPkg "protocol")}}protocol.{{end}}TransactionType{{.TransactionType}}.ID()))
	{{end}}

	{{if .IsChain}}
	// Enforce sanity
	v.Type = {{if not (isPkg "protocol")}}protocol.{{end}}AccountType{{.ChainType}}

	if b, err := v.AccountHeader.MarshalBinary(); err != nil {
		return nil, fmt.Errorf("error encoding header: %w", err)
	} else {
		buffer.Write(b)
	}
	{{- end}}

	{{- range .Embeddings}}
	if b, err := v.{{.Name}}.MarshalBinary(); err != nil {
		return nil, err
	} else {
		buffer.Write(b)
	}
	{{end}}

	{{- range .Fields}}
	{{- if .IsMarshalled}}
	{{binaryMarshalValue . (print "v." .Name) .Name}}
	{{- end}}
	{{- end}}

	return buffer.Bytes(), nil
}
{{end}}{{end}}

{{range .Types}}{{if .IsBinary}}
func (v *{{.Name}}) UnmarshalBinary(data []byte) error {
	{{- if or .IsTransaction .IsTxResult}}
	typ := {{if not (isPkg "protocol")}}protocol.{{end}}TransactionType{{.TransactionType}}
	if v, err := encoding.UvarintUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding TX type: %w", err)
	} else if v != uint64(typ) {
		return fmt.Errorf("invalid TX type: want %v, got %v", typ, {{if not (isPkg "protocol")}}protocol.{{end}}TransactionType(v))
	}
	data = data[encoding.UvarintBinarySize(uint64(typ)):]
	{{end}}

	{{- if .IsChain}}
	typ := {{if not (isPkg "protocol")}}protocol.{{end}}AccountType{{.ChainType}}
	if err := v.AccountHeader.UnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding header: %w", err)
	} else if v.Type != typ {
		return fmt.Errorf("invalid account type: want %v, got %v", typ, v.Type)
	}
	data = data[v.GetHeaderSize():]
	{{end}}

	{{- range .Embeddings}}
	if err := v.{{.Name}}.UnmarshalBinary(data); err != nil {
		return err
	}
	data = data[v.{{.Name}}.BinarySize():]
	{{end}}

	{{- range .Fields}}
	{{- if .IsMarshalled}}
	{{binaryUnmarshalValue . (print "v." .Name) .Name}}
	{{- end}}
	{{- end}}

	return nil
}
{{end}}{{end}}

{{define "jsonField"}}
{{- if .IsMarshalled}}
{{.Name}} {{jsonType .}}{{if .IsMarshalled}} `json:"{{lcName .Name}}{{if .OmitEmpty}},omitempty{{end}}"`{{end}}
{{- if .AlternativeName}}
{{.AlternativeName}} {{jsonType .}}{{if .IsMarshalled}} `json:"{{lcName .AlternativeName}}{{if .OmitEmpty}},omitempty{{end}}"`{{end}}
{{- end}}
{{- end}}
{{- end}}

{{define "jsonType"}}struct {
	{{- if .IsChain}}
	{{if not (isPkg "protocol")}}protocol.{{end}}AccountHeader{{end}}
	{{- if .IsTxResult}}
	Type {{if isPkg "types"}}TransactionType{{else}}{{if not (isPkg "protocol")}}protocol.{{end}}TransactionType{{end}} `json:"type"`{{end}}
	{{- range .Embeddings}}
	{{- range .Fields}}
	{{- template "jsonField" .}}
	{{- end}}
	{{- end}}
	{{- range .Fields}}
	{{- template "jsonField" .}}
	{{- end}}
}
{{- end}}

{{define "valueToJson"}}
{{- if .Field.IsMarshalled}}
{{valueToJson .Field (print .Dst "." .Field.Name) (print .Src "." .Field.Name) .ForUnmarshal .Field.Name}}
{{- if .Field.AlternativeName}}
{{valueToJson .Field (print .Dst "." .Field.AlternativeName) (print .Src "." .Field.Name) .ForUnmarshal .Field.Name}}
{{- end}}
{{- end}}
{{- end}}

{{define "valueFromJson"}}
{{- if .Field.IsMarshalled}}
{{- if .Field.AlternativeName}}
if u.{{.Field.Name}} != {{jsonZeroValue .Field}} {
	{{valueFromJson .Field (print .Dst "." .Field.Name) (print .Src "." .Field.Name) .Field.Name}}
} else {
	{{valueFromJson .Field (print .Dst "." .Field.Name) (print .Src "." .Field.AlternativeName) .Field.Name}}
}
{{- else}}
{{valueFromJson .Field (print .Dst "." .Field.Name) (print .Src "." .Field.Name) .Field.Name}}
{{- end}}
{{- end}}
{{- end}}

{{range .Types}}{{if needsCustomJSON .}}
func (v *{{.Name}}) MarshalJSON() ([]byte, error) {
	u := {{template "jsonType" .}}{}

	{{- if .IsChain}}
	u.AccountHeader = v.AccountHeader
	{{- end}}

	{{- if .IsTxResult}}
	u.Type = v.GetType()
	{{- end}}

	{{- range .Embeddings}}
	{{- $name := .Name}}
	{{- range .Fields}}
	{{- template "valueToJson" map "Field" . "Src" (print "v." $name) "Dst" "u" "ForUnmarshal" false}}
	{{- end}}
	{{- end}}

	{{- range .Fields}}
	{{- template "valueToJson" map "Field" . "Src" "v" "Dst" "u" "ForUnmarshal" false}}
	{{- end}}
	return json.Marshal(&u)
}
{{end}}{{end}}

{{range .Types}}{{if needsCustomJSON .}}
func (v *{{.Name}}) UnmarshalJSON(data []byte) error {
	u := {{template "jsonType" .}}{}

	{{- if .IsChain}}
	u.AccountHeader = v.AccountHeader
	{{- end}}

	{{- if .IsTxResult}}
	u.Type = v.GetType()
	{{- end}}

	{{- range .Embeddings}}
	{{- $name := .Name}}
	{{- range .Fields}}
	{{- template "valueToJson" map "Field" . "Src" (print "v." $name) "Dst" "u" "ForUnmarshal" true}}
	{{- end}}
	{{- end}}

	{{- range .Fields}}
	{{- template "valueToJson" map "Field" . "Src" "v" "Dst" "u" "ForUnmarshal" true}}
	{{- end}}
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}

	{{- if .IsChain}}
	v.AccountHeader = u.AccountHeader
	{{- end}}

	{{- range .Embeddings}}
	{{- $name := .Name}}
	{{- range .Fields}}
	{{- template "valueFromJson" map "Field" . "Src" "u" "Dst" (print "v." $name)}}
	{{- end}}
	{{- end}}

	{{- range .Fields}}
	{{- template "valueFromJson" map "Field" . "Src" "u" "Dst" "v"}}
	{{- end}}
	return nil
}
{{end}}{{end}}