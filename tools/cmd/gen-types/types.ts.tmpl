import BN from "bn.js";
import { encodeAs } from "../encoding";

// DO NOT EDIT. Generated by gitlab.com/accumulatenetwork/accumulate/tools/cmd/gen-types.

/* eslint-disable @typescript-eslint/no-namespace */
/* eslint-disable @typescript-eslint/no-empty-function */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/ban-types */

{{  define "objectify"}}
this.{{lcName .Name}} &&
{{-   if .Repeatable -}}
this.{{lcName .Name}}?.map(v => {{objectify . "v"}})
{{-   else}}
{{objectify . (print "this." (lcName .Name))}}
{{-   end}}
{{- end}}

{{  range .Types -}}
export namespace {{.Name}} {
  {{  if needsCtor .}}
  export type Args = {
    {{- range .Fields}}
    {{-   if and .IsMarshalled (not .Virtual)}}
    {{-     if .IsEmbedded}}
    {{-       range .TypeRef.Fields}}
    {{lcName .Name}}?: {{inputType .}};
    {{-       end}}
    {{-     else}}
    {{lcName .Name}}?: {{inputType .}};
    {{-     end}}
    {{-   end}}
    {{- end}}
  }
  {{- else}}
  export type Args = {};
  {{- end}}
  {{- if .IsUnion}}
  export type ArgsWithType = {{if needsCtor .}}Args &{{end}} { type: {{.UnionType}}.{{.UnionValue}} | '{{lcName .UnionValue}}' };
  {{- end}}
}
export class {{.Name}} {{if eq .Name "Transaction"}}extends TransactionBase{{end}} {
  {{- if .IsUnion}}
  @encodeAs.field(1).keepEmpty.enum
  public readonly type = {{.UnionType}}.{{.UnionValue}};
  {{- end}}
  {{- range .Fields}}
  {{-   if and .IsMarshalled (not .Virtual)}}
  {{-     $no := .Number}}
  {{-     if .IsEmbedded}}
  {{-       range .TypeRef.Fields}}
  {{- if not .NonBinary}}@encodeAs.field({{$no}}, {{.Number}}){{if .Repeatable}}.repeatable{{end}}{{if .KeepEmpty}}.keepEmpty{{end}}.{{encodeAnnotation .}}{{end}}
  public {{lcName .Name}}?: {{resolveType .}};
  {{-       end}}
  {{-     else}}
  {{- if not .NonBinary}}@encodeAs.field({{.Number}}){{if .Repeatable}}.repeatable{{end}}{{if .KeepEmpty}}.keepEmpty{{end}}.{{encodeAnnotation .}}{{end}}
  public {{lcName .Name}}?: {{resolveType .}};
  {{-     end}}
  {{-   end}}
  {{- end}}

  {{  if needsCtor .}}
  constructor(args: {{.Name}}.Args) {
    {{- if eq .Name "Transaction"}}
    super()
    {{- end}}
    {{- range .Fields}}
    {{-   if and .IsMarshalled (not .Virtual)}}
    {{-     if .IsEmbedded}}
    {{-       range .TypeRef.Fields}}
    this.{{lcName .Name}} = args.{{lcName .Name}} == undefined ? undefined : ({{unobjectify . (print "args." (lcName .Name))}})
    {{-       end}}
    {{-     else}}
    this.{{lcName .Name}} = args.{{lcName .Name}} == undefined ? undefined : ({{unobjectify . (print "args." (lcName .Name))}})
    {{-     end}}
    {{-   end}}
    {{- end}}
  }
  {{- else}}
  constructor(_: {{.Name}}.Args) {}
  {{- end}}

  copy() { return new {{.Name}}(this) }

  {{ $ctor := needsCtor . }}
  asObject(): {{.Name}}.Args{{if .IsUnion}}WithType{{end}} {
    return {
      {{- if .IsUnion}}
        type: this.type,
      {{- end}}
      {{- range .Fields}}
      {{-   if and .IsMarshalled (not .Virtual)}}
      {{-     if .IsEmbedded}}
      {{-       range .TypeRef.Fields}}
        {{lcName .Name}}: {{template "objectify" .}},
      {{-       end}}
      {{-     else}}
        {{lcName .Name}}: {{template "objectify" .}},
      {{-     end}}
      {{-   end}}
      {{- end}}
    }
  }
}

{{  end}}