import { encodeAs } from "../encoding";

// DO NOT EDIT. Generated by gitlab.com/accumulatenetwork/accumulate/tools/cmd/gen-types.

/* eslint-disable @typescript-eslint/no-namespace */
/* eslint-disable @typescript-eslint/no-empty-function */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/ban-types */

{{  define "objectify"}}
this.{{lcName .Name}} &&
{{-   if .Repeatable -}}
this.{{lcName .Name}}?.map(v => {{objectify . "v"}})
{{-   else}}
{{objectify . (print "this." (lcName .Name))}}
{{-   end}}
{{- end}}

{{  $lud := .LongUnionDiscriminator -}}
{{  range .Types -}}
{{  if needsCtor .}}
export type {{.TypescriptFullName true false true true}} = {
  {{- range .Fields}}
  {{-   if and .IsMarshalled (not .Virtual)}}
  {{-     if .IsEmbedded}}
  {{-       range .TypeRef.Fields}}
  {{lcName .Name}}?: {{inputType .}};
  {{-       end}}
  {{-     else}}
  {{lcName .Name}}?: {{inputType .}};
  {{-     end}}
  {{-   end}}
  {{- end}}
}
{{- else}}
export type {{.TypescriptFullName true false true true}} = {};
{{- end}}
{{- if .IsUnion}}
export type {{.TypescriptFullName true true true true}} = {{if needsCtor .}}{{.TypescriptFullName true false true false}} &{{end}} { {{if $lud}}{{lcName .UnionType}}{{else}}type{{end}}: {{.UnionType}}.{{.UnionValue}} | '{{lcName .UnionValue}}' };
{{- end}}
export class {{.TypescriptFullName false false true true}} {{if eq .Name "Transaction"}}extends TransactionBase{{end}} {
  {{- if .IsUnion}}
  {{-   if .IsBinary}}
  @encodeAs.field(1).keepEmpty.enum
  {{-   end}}
  public readonly {{if $lud}}{{lcName .UnionType}}{{else}}type{{end}} = {{.UnionType}}.{{.UnionValue}};
  {{- end}}
  {{- $bin := .IsBinary}}
  {{- range .Fields}}
  {{-   if and .IsMarshalled (not .Virtual)}}
  {{-     $no := .Number}}
  {{-     if .IsEmbedded}}
  {{-       range .TypeRef.Fields}}
  {{-         if $bin}}
  @encodeAs.field({{$no}}, {{.Number}}){{if .Repeatable}}.repeatable{{end}}{{if .KeepEmpty}}.keepEmpty{{end}}.{{encodeAnnotation .}}
  {{-         end}}
  public {{lcName .Name}}?: {{resolveType .}};
  {{-       end}}
  {{-     else}}
  {{-       if $bin}}
  @encodeAs.field({{.Number}}){{if .Repeatable}}.repeatable{{end}}{{if .KeepEmpty}}.keepEmpty{{end}}.{{encodeAnnotation .}}
  {{-       end}}
  public {{lcName .Name}}?: {{resolveType .}};
  {{-     end}}
  {{-   end}}
  {{- end}}

  {{  if needsCtor .}}
  constructor(args: {{.TypescriptFullName true false true false}}) {
    {{- if eq .Name "Transaction"}}
    super()
    {{- end}}
    {{- range .Fields}}
    {{-   if and .IsMarshalled (not .Virtual)}}
    {{-     if .IsEmbedded}}
    {{-       range .TypeRef.Fields}}
    this.{{lcName .Name}} = args.{{lcName .Name}} == undefined ? undefined : ({{unobjectify . (print "args." (lcName .Name))}})
    {{-       end}}
    {{-     else}}
    this.{{lcName .Name}} = args.{{lcName .Name}} == undefined ? undefined : ({{unobjectify . (print "args." (lcName .Name))}})
    {{-     end}}
    {{-   end}}
    {{- end}}
  }
  {{- else}}
  constructor(_: {{.TypescriptFullName true false true false}}) {}
  {{- end}}

  copy() { return new {{.TypescriptFullName false false true false}}(this.asObject()) }

  {{ $ctor := needsCtor . }}
  asObject(): {{if .IsUnion}}{{.TypescriptFullName true true true false}}{{else}}{{.TypescriptFullName true false true false}}{{end}} {
    return {
      {{- if .IsUnion}}
        {{if $lud}}{{lcName .UnionType}}{{else}}type{{end}}: '{{lcName .UnionValue}}',
      {{- end}}
      {{- range .Fields}}
      {{-   if and .IsMarshalled (not .Virtual)}}
      {{-     if .IsEmbedded}}
      {{-       range .TypeRef.Fields}}
        {{lcName .Name}}: {{template "objectify" .}},
      {{-       end}}
      {{-     else}}
        {{lcName .Name}}: {{template "objectify" .}},
      {{-     end}}
      {{-   end}}
      {{- end}}
    }
  }
}

{{  end}}