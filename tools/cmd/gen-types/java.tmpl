package {{.Package}}.generated.{{.SubPackage}};

/**
    GENERATED BY go run ./tools/cmd/gen-api. DO NOT EDIT.
**/

import {{.Package}}.protocol.*;
import {{.Package}}.generated.apiv2.*;
import {{.Package}}.generated.protocol.*;
import {{.Package}}.generated.query.*;
import {{.Package}}.generated.config.*;
import {{.Package}}.generated.managed.*;
import {{.Package}}.generated.core.*;
import {{.Package}}.generated.errors.Error;
import {{.Package}}.generated.errors.*;
import {{.Package}}.support.*;
import {{.Package}}.support.serializers.*;
import java.time.Duration;
import java.time.OffsetDateTime;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;

{{- if .IsUnion}}{{skip}}{{end}}
// UnionType: {{.UnionType}}
// UnionValue: {{.UnionValue}}

@JsonIgnoreProperties(ignoreUnknown = true)
@JsonTypeName("{{.Name}}")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class {{safeClassName .Name}}{{
    if and (eq .UnionType "TransactionType") (hasSuffix .Name "Result")}} implements TransactionResult{{-
    else if eq .UnionType "TransactionType"}} implements TransactionBody{{-
    else if eq .UnionType "AccountAuthOperationType"}} implements AccountAuthOperation{{-
    else if eq .UnionType "DataEntryType"}} implements DataEntry{{-
    else if eq .UnionType "AccountType"}} implements Account {{-
    else if eq .UnionType "KeyPageOperationType"}} implements KeyPageOperation{{-
    else if eq .UnionType "SignatureType"}} implements Signature{{-
    else }} implements Marhallable{{-
    end}} {

	{{- range .Fields}}
	{{-   if and (.Virtual) (ne .ParentUnionValue "")}}
	    {{-   if eq (lcName .Name) "type"}}
	public final {{resolveType .}} {{lcName .Name}} = {{resolveType .}}.{{underscoreUpperCase .ParentUnionValue}};
	    {{-   end}}
	{{-   end}}
	{{- end}}

	{{- range .Fields}}
	{{-   if (not .Virtual)}}
	{{-   if eq .MarshalAs 1 }}
	@JsonIgnore{{- end}}
	private {{resolveType .}} {{lcName .Name}};
	{{-   end}}
	{{- end}}

    //
	{{- range .Fields}}
	{{-   if not .Virtual}}
	{{-   if eq .MarshalAs 1 }}
	@JsonIgnore{{- end}}
	{{-   if eq (resolveType .) "byte[]" }}
	@JsonDeserialize(using = HexDeserializer.class){{- end}}
	{{-   if eq (resolveType .) "java.math.BigInteger" }}
	@JsonDeserialize(using = GoBigIntDeserializer.class){{- end}}
	public {{resolveType .}} get{{.Name}}() {
	    return {{lcName .Name}};
	}

	{{-   if eq (resolveType .) "byte[]" }}
	@JsonSerialize(using = HexSerializer.class){{- end}}
	{{-   if eq (resolveType .) "java.math.BigInteger" }}
	@JsonSerialize(using = GoBigIntSerializer.class){{- end}}
	public void set{{.Name}}(final {{resolveType .}} value) {
	    this.{{lcName .Name}} = value;
	}

	public {{.ParentTypeName}} {{lcName .Name}}(final {{resolveType .}} value) {
	    set{{.Name}}(value);
	    return this;
	}

	{{-     if eq (resolveType .) "Url"}}
	public {{.ParentTypeName}} {{lcName .Name}}(final String value) {
	    set{{.Name}}(Url.parse(value));
	    return this;
	}
	{{-     end}}
	{{-     if eq (resolveType .) "byte[]"}}
	public {{.ParentTypeName}} {{lcName .Name}}(final String value) {
		try {
			set{{.Name}}(org.apache.commons.codec.binary.Hex.decodeHex(value));
		} catch (org.apache.commons.codec.DecoderException e) {
			throw new RuntimeException(e);
		}
	    return this;
	}
	{{-     end}}
	{{-   end}}
	{{- end}}

    public byte[] marshalBinary() {
        final var marshaller = new Marshaller();
        {{- range .Fields}}
        {{-   if and .IsBinary .IsMarshalled}}
        {{-     if .OmitEmpty}}
        {{-       if .Type.IsKnown}}
        if (!({{isZero . (print "this." (lcName .Name))}})) {
            marshaller.write{{.Type.Title}}({{.Number}}, this.{{lcName .Name}});
        {{-       else }}
        if (!(this.{{lcName .Name}} == null)) {
            marshaller.writeValue({{.Number}}, {{lcName .Name}});
        {{-       end}}
        }
        {{-     else }}
        {{-       if .Type.IsKnown}}
        marshaller.write{{.Type.Title}}({{.Number}}, this.{{lcName .Name}});
        {{-       else }}
        marshaller.writeValue({{.Number}}, {{lcName .Name}});
        {{-       end}}
        {{-     end}}
        {{-   end}}
        {{- end}}
        return marshaller.array();
    }
}
