// GENERATED BY go run ./tools/cmd/gen-types (c_union_source). DO NOT EDIT.
#include <accumulate/protocol/{{snake .Interface}}_union.h>
{{- if not (eq .Type "result")}}{{- range .Members}}
#include <accumulate/protocol/{{snake .Name}}.h>
{{- end}}{{- end}}

{{if not (eq .Type "result")}}
{{$interface := .Interface}}{{range .Members}}
int new{{.Name}}(Unmarshaler *m, {{$interface}} *v) {
    v->_{{.Name}} = ({{.Name}}*)unmarshalerAlloc(m, sizeof({{.Name}}));
    CHECK_ERROR_INT(v->_{{.Name}})
    v->_{{.Name}}->Type = {{.UnionType}}{{.UnionValue}};
    return ErrorNone;
}
{{end}}
int read{{.Interface}}(Unmarshaler *m, {{.Interface}} *v) {
    CHECK_ERROR_INT(m)
    CHECK_ERROR_INT(v)
    int n = 0;
    uint64_t field = 0;
    uint64_t type = 0;

    int b = readField(m, &field);
    CHECK_ERROR_CODE(b)

    if ( field != 1 ) {
        return ErrorInvalidField;
    }
    n += b;

    b = readUInt(m, &type);
    if ( IsError(ErrorCode(b))) {
        return b;
    }
    n += b;
    switch ( type ) {
	{{- range .Members}}
    case {{.UnionType}}{{.UnionValue}}:
        b = new{{.Name}}(m, v);
        CHECK_ERROR_CODE(b)

        b = read{{.Type.Name}}(m, v->_{{.Name}});
        CHECK_ERROR_CODE(b)

        n += b;
        break;
	{{- end}}
	default:
            n = ErrorNotImplemented;
    }
    return n;
}
{{- end}}

