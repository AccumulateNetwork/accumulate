// Copyright 2022 The Accumulate Authors
//
// Use of this source code is governed by an MIT-style
// license that can be found in the LICENSE file or at
// https://opensource.org/licenses/MIT.

package {{.Package}}.generated.{{.SubPackage}}

/**
    GENERATED BY go run ./tools/cmd/gen-api. DO NOT EDIT.
**/

import {{.Package}}.protocol.*
import {{.Package}}.generated.apiv3.*
import {{.Package}}.generated.apiv3.Records.*
import {{.Package}}.generated.protocol.*
import {{.Package}}.generated.protocol.Signatures.*
import {{.Package}}.generated.types.*
import {{.Package}}.generated.errors.*
import {{.Package}}.support.*
import {{.Package}}.support.serializers.*
import kotlinx.serialization.Required
import kotlinx.serialization.Serializable
import kotlinx.serialization.SerialName
import kotlinx.serialization.Transient


@Serializable
@SerialName("{{lcName .Name}}")
class {{.Name}}() : Marshallable {

{{- $className := .Name -}}
{{- range .Fields}}
{{-   if not .Virtual}}
{{-   if eq .MarshalAs 1 }}
    @Transient{{- end}}
{{-   if eq (resolveType .) "ByteArray" }}
    @Serializable(with = HexSerializer::class){{- end}}
{{-   if eq (resolveType .) "Array<ByteArray>" }}
    @Serializable(with = Hex2DSerializer::class){{- end}}
    var {{lcName .Name}}:{{resolveType .}}? = null

    fun {{lcName .Name}}(value: {{resolveType .}}) : {{$className}} {
        this.{{lcName .Name}} = value
        return this
    }

{{-     if eq (resolveType .) "AccUrl"}}
    fun {{lcName .Name}}(value: String) : {{$className}} {
        this.{{lcName .Name}} = AccUrl.parse(value)
        return this
    }
{{-     end}}
{{-     if eq (resolveType .) "ByteArray"}}
    fun {{lcName .Name}}(value: String) : {{$className}} {
        this.{{lcName .Name}} = value.decodeHex()
        return this
    }
{{-     end}}
{{-   end}}
{{- end}}


    override fun marshalBinary(): UByteArray {
      val marshaller = Marshaller()
    {{- range .Fields}}
    {{-   if and .IsBinary .IsMarshalled}}
    {{-     if .OmitEmpty}}
    {{-       if .Type.IsKnown}}
      {{lcName .Name}}?.let{ marshaller.write{{.Type.Title}}({{.Number}}, it) }
    {{-       else }}
      {{lcName .Name}}?.let { marshaller.writeValue({{.Number}}, it) }
    {{-       end}}
    {{-     else }}
    {{-       if .Type.IsKnown}}
      marshaller.write{{.Type.Title}}({{.Number}}, this.{{lcName .Name}})
    {{-       else }}
      marshaller.writeValue({{.Number}}, {{lcName .Name}})
    {{-       end}}
    {{-     end}}
    {{-   end}}
    {{- end}}
      return marshaller.array()
    }
}