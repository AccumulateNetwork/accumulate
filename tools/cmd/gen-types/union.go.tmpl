package {{.Package}}

// GENERATED BY go run ./tools/cmd/gen-types. DO NOT EDIT.

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"

	"gitlab.com/accumulatenetwork/accumulate/internal/encoding"
)

{{- range .Unions}}{{if not (eq .Type "result")}}

// New{{.Interface}} creates a new {{.Interface}} for the specified {{.Enumeration}}.
func New{{.Interface}}(typ {{.Enumeration}}) ({{.Interface}}, error) {
	switch typ {
	{{- range .Members}}
	case {{.UnionType}}{{.UnionValue}}:
		return new({{.Name}}), nil
	{{- end}}
	default:
		return nil, fmt.Errorf("unknown {{natural .Type}} %v", typ)
	}
}

//Equal{{.Interface}} is used to compare the values of the union
func Equal{{.Interface}}(a, b {{.Interface}}) bool {
	if a == b {
		return true
	}
	switch a := a.(type){
	{{- range .Members}}
	case *{{.Type.Name}}:
		b, ok := b.(*{{.Type.Name}})
		return ok && a.Equal(b)
	{{- end}}
	default:
		return false
	}
}


// Unmarshal{{.Enumeration}} unmarshals the {{.Enumeration}} from the start of a {{.Interface}}.
func Unmarshal{{.Enumeration}}(r io.Reader) ({{.Enumeration}}, error) {
	var typ {{.Enumeration}}
	err := encoding.UnmarshalEnumType(r, &typ)
	return typ, err
}

// Unmarshal{{.Interface}} unmarshals a {{.Interface}}.
func Unmarshal{{.Interface}}(data []byte) ({{.Interface}}, error) {
	typ, err := Unmarshal{{.Enumeration}}(bytes.NewReader(data))
	if err != nil {
		return nil, err
	}

	v, err := New{{.Interface}}(typ)
	if err != nil {
		return nil, err
	}

	err = v.UnmarshalBinary(data)
	if err != nil {
		return nil, err
	}

	return v, nil
}

// Unmarshal{{.Interface}}From unmarshals a {{.Interface}}.
func Unmarshal{{.Interface}}From(rd io.ReadSeeker) ({{.Interface}}, error) {
	// Get the reader's current position
	pos, err := rd.Seek(0, io.SeekCurrent)
	if err != nil {
		return nil, err
	}

	// Read the type code
	typ, err := Unmarshal{{.Enumeration}}(rd)
	if err != nil {
		return nil, err
	}

	// Reset the reader's position
	_, err = rd.Seek(pos, io.SeekStart)
	if err != nil {
		return nil, err
	}

	// Create a new transaction result
	v, err := New{{.Interface}}({{.Enumeration}}(typ))
	if err != nil {
		return nil, err
	}

	// Unmarshal the result
	err = v.UnmarshalBinaryFrom(rd)
	if err != nil {
		return nil, err
	}

	return v, nil
}

// Unmarshal{{.Interface}}Json unmarshals a {{.Interface}}.
func Unmarshal{{.Interface}}JSON(data []byte) ({{.Interface}}, error) {
	var typ *struct{ Type {{.Enumeration}} }
	err := json.Unmarshal(data, &typ)
	if err != nil {
		return nil, err
	}

	if typ == nil {
		return nil, nil
	}

	acnt, err := New{{.Interface}}(typ.Type)
	if err != nil {
		return nil, err
	}

	err = json.Unmarshal(data, acnt)
	if err != nil {
		return nil, err
	}

	return acnt, nil
}

{{- end}}
{{end}}
