// Copyright 2022 The Accumulate Authors
//
// Use of this source code is governed by an MIT-style
// license that can be found in the LICENSE file or at
// https://opensource.org/licenses/MIT.

package {{.Package}}

// GENERATED BY go run ./tools/cmd/gen-types. DO NOT EDIT.

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"

	"gitlab.com/accumulatenetwork/accumulate/pkg/types/encoding"
)

{{- range .Unions}}{{if not (eq .Type "result")}}

// New{{.Interface}} creates a new {{.Interface}} for the specified {{.Enumeration}}.
func New{{.Interface}}(typ {{.Enumeration}}) ({{.Interface}}, error) {
	switch typ {
	{{- range .Members}}
	case {{.UnionType}}{{.UnionValue}}:
		return new({{.FullName false true}}), nil
	{{- end}}
	default:
		return nil, fmt.Errorf("unknown {{natural .Type}} %v", typ)
	}
}

{{if (index .Members 0).IsComparable}}
//Equal{{.Interface}} is used to compare the values of the union
func Equal{{.Interface}}(a, b {{.Interface}}) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	switch a := a.(type){
	{{- range .Members}}
	case *{{.Type.FullName false true}}:
		b, ok := b.(*{{.Type.FullName false true}})
		return ok && a.Equal(b)
	{{- end}}
	default:
		return false
	}
}

//Copy{{.Interface}} copies a {{.Interface}}.
func Copy{{.Interface}}(v {{.Interface}}) {{.Interface}} {
	switch v := v.(type){
	{{- range .Members}}
	{{- if not .Params}}
	case *{{.Type.Name}}:
		return v.Copy()
	{{- end}}
	{{- end}}
	default:
		return v.CopyAsInterface().({{.Interface}})
	}
}
{{end}}

{{if (index .Members 0).IsBinary}}
// Unmarshal{{.Interface}} unmarshals a {{.Interface}}.
func Unmarshal{{.Interface}}(data []byte) ({{.Interface}}, error) {
	return Unmarshal{{.Interface}}From(bytes.NewReader(data))
}

// Unmarshal{{.Interface}}From unmarshals a {{.Interface}}.
func Unmarshal{{.Interface}}From(rd io.Reader) ({{.Interface}}, error) {
	reader := encoding.NewReader(rd)

	// Read the type code
	var typ {{.Enumeration}}
	if !reader.ReadEnum(1, &typ) {
		return nil, fmt.Errorf("field Type: missing")
	}

	// Create a new {{natural .Interface}}
	v, err := New{{.Interface}}({{.Enumeration}}(typ))
	if err != nil {
		return nil, err
	}

	// Unmarshal the rest of the {{natural .Interface}}
	err = v.UnmarshalFieldsFrom(reader)
	if err != nil {
		return nil, err
	}

	return v, nil
}
{{end}}

// Unmarshal{{.Interface}}Json unmarshals a {{.Interface}}.
func Unmarshal{{.Interface}}JSON(data []byte) ({{.Interface}}, error) {
	var typ *struct{ Type {{.Enumeration}} }
	err := json.Unmarshal(data, &typ)
	if err != nil {
		return nil, err
	}

	if typ == nil {
		return nil, nil
	}

	acnt, err := New{{.Interface}}(typ.Type)
	if err != nil {
		return nil, err
	}

	err = json.Unmarshal(data, acnt)
	if err != nil {
		return nil, err
	}

	return acnt, nil
}

{{- end}}
{{end}}
