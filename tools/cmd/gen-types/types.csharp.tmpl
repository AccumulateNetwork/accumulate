// GENERATED BY go run ./tools/cmd/gen-types. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.IO;
using Newtonsoft.Json;
using Newtonsoft.Json.Serialization;
using {{.Package}}.Protocol;
using {{.Package}}.Generated.Apiv2;
using {{.Package}}.Generated.Protocol;
using {{.Package}}.Generated.Query;
using {{.Package}}.Generated.Config;
using {{.Package}}.Generated.Database;
using {{.Package}}.Generated.Core;
using {{.Package}}.Generated.Errors;
using {{.Package}}.Support;
using {{.Package}}.Support.Serializers;

{{- if .IsUnion}}{{skip}}{{end}}


namespace {{.Package}}.Generated.{{.SubPackage}}
{
    /// <summary>
    /// Represents the model for <c>{{.Name}}</c>.
    /// </summary>
    [JsonObject(MemberSerialization.OptIn)]
    [JsonTypeName("{{.Name}}")]
    [JsonIgnoreProperties] // Adjust as needed
    // Implement interfaces based on the union type.
    public class {{safeClassName .Name}}
        {{- if and (eq .UnionType "TransactionType") (hasSuffix .Name "Result")}}: ITransactionResult
        {{- else if eq .UnionType "TransactionType"}}: ITransactionBody
        {{- else if eq .UnionType "AccountAuthOperationType"}}: IAccountAuthOperation
        {{- else if eq .UnionType "DataEntryType"}}: IDataEntry
        {{- else if eq .UnionType "AccountType"}}: IAccount
        {{- else if eq .UnionType "KeyPageOperationType"}}: IKeyPageOperation
        {{- else if eq .UnionType "SignatureType"}}: ISignature
        {{- else}}: IMarshallable
        {{- end}}
    {
        // Virtual fields for union discriminators.
        {{- range .Fields}}
            {{- if and .Virtual .ParentType}}
                {{- if eq (lowerCamel .Name) "type"}}
        public readonly {{resolveType .}} {{lowerCamel .Name}} = {{resolveType .}}.{{underscoreUpperCase .ParentType.UnionValue}};
                {{- end}}
            {{- end}}
        {{- end}}

        // Private backing fields for non-virtual fields.
        {{- range .Fields}}
            {{- if not .Virtual}}
                {{- if eq .MarshalAs 1}}
        [JsonIgnore]
                {{- end}}
        private {{resolveType .}} {{lowerCamel .Name}};
            {{- end}}
        {{- end}}

        // Public getter and setter methods with fluent setters.
        {{- range .Fields}}
            {{- if not .Virtual}}
        {{- if eq .MarshalAs 1}}
        [JsonIgnore]
        {{- end}}
        [JsonProperty("{{lowerCamel .Name}}")]
        public {{resolveType .}} Get{{.Name}}()
        {
            return {{lowerCamel .Name}};
        }

        public void Set{{.Name}}({{resolveType .}} value)
        {
            {{lowerCamel .Name}} = value;
        }

        public {{parentTypeName .}} {{lowerCamel .Name}}({{resolveType .}} value)
        {
            Set{{.Name}}(value);
            return ({{parentTypeName .}})this;
        }
        {{- if eq (resolveType .) "Url"}}
        public {{parentTypeName .}} {{lowerCamel .Name}}(string value)
        {
            Set{{.Name}}(Url.Parse(value));
            return ({{parentTypeName .}})this;
        }
        {{- end}}
        {{- if eq (resolveType .) "byte[]"}}
        public {{parentTypeName .}} {{lowerCamel .Name}}(string value)
        {
            try
            {
                Set{{.Name}}(HexDecoder.Decode(value));
            }
            catch(Exception ex)
            {
                throw new Exception("Failed to decode hex", ex);
            }
            return ({{parentTypeName .}})this;
        }
        {{- end}}
            {{- end}}
        {{- end}}

        // Marshal the object into a binary representation.
        public byte[] MarshalBinary()
        {
            var marshaller = new Marshaller();
            {{- range .Fields}}
                {{- if and .IsBinary .IsMarshalled}}
                    {{- if .OmitEmpty}}
                        {{- if .Type.IsKnown}}
            if (!IsZero({{lowerCamel .Name}}))
            {
                marshaller.Write{{.Type.Title}}({{.Number}}, this.{{lowerCamel .Name}});
            }
                        {{- else}}
            if (this.{{lowerCamel .Name}} != null)
            {
                marshaller.WriteValue({{.Number}}, this.{{lowerCamel .Name}});
            }
                        {{- end}}
                    {{- else}}
                        {{- if .Type.IsKnown}}
            marshaller.Write{{.Type.Title}}({{.Number}}, this.{{lowerCamel .Name}});
                        {{- else}}
            marshaller.WriteValue({{.Number}}, this.{{lowerCamel .Name}});
                        {{- end}}
                    {{- end}}
                {{- end}}
            {{- end}}
            return marshaller.Array();
        }
    }
} 