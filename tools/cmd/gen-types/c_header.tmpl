#pragma once
/// GENERATED BY go run ./tools/cmd/gen-types (c_header). DO NOT EDIT.

#include <accumulate/encoding/encoding.h>
#include <accumulate/encoding/marshaler.h>
{{- if .IsUnion}}
#include <accumulate/protocol/{{snake .UnionSpec.Type}}_union.h>
{{- end}}
{{- range .Fields}}
{{- if not (typeIsKnown .)}}
{{- if isUnionFieldType .}}
#include <accumulate/protocol/{{snake (resolveType . true true)}}_union.h>
{{- else}}
#include <accumulate/protocol/{{snake (resolveType . true true)}}.h>
{{- end}}
{{- end}}
{{- end}}
{{- range .Embeddings}}
#include <accumulate/protocol/{{snake .}}.h>
{{- end}}

#ifdef __cplusplus
extern "C" {
#endif

#ifdef ACME_STATIC
#define ACME_API static
#else
#define ACME_API extern
#endif

typedef struct {{.Name}} {
    {{if .IsUnion}}
    {{.UnionType}} Type;
    {{end}}
    {{- range .Embeddings}}
    {{.}} _{{.}}; //"Embedded" struct
    {{- end}}
	{{- range .Fields}}
	{{-   if not .Virtual}}
	{{-     if .Description}}
	/// {{.Name}} {{.Description}}.
	{{-     end}}
	{{-     if .IsEmbedded}}
	{{.Type}} {{.Type}};
    {{- else if and .Pointer .Repeatable}}
    size_t {{.Name}}_length;
	{{resolveType . false true}} {{.Name}}; {{if .IsMarshalled}} //`json:"{{lcName .Name}}{{if .OmitEmpty}},omitempty{{end}}" form:"{{lcName .Name}}" query:"{{lcName .Name}}"{{validateTag .}}`{{end}}
	{{- else if .Repeatable}}
    size_t {{.Name}}_length;
	{{resolveType . false false}} {{.Name}}; {{if .IsMarshalled}} //`json:"{{lcName .Name}}{{if .OmitEmpty}},omitempty{{end}}" form:"{{lcName .Name}}" query:"{{lcName .Name}}"{{validateTag .}}`{{end}}
    {{-     else}}
	{{resolveType . true false}} {{.Name}}; {{if .IsMarshalled}} //`json:"{{lcName .Name}}{{if .OmitEmpty}},omitempty{{end}}" form:"{{lcName .Name}}" query:"{{lcName .Name}}"{{validateTag .}}`{{end}}
    {{-     end}}
	{{-   end}}
	{{- end}}
	{{  if .IsBinary}}Bytes extraData[{{len .Fields}}];{{end}}
} {{.Name}};

{{if .IsBinary}}ACME_API int read{{.Name}}(Unmarshaler *m, {{.Name}} *v);
{{end}}

#ifdef __cplusplus
}
#endif


