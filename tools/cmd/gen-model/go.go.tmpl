// Copyright 2022 The Accumulate Authors
//
// Use of this source code is governed by an MIT-style
// license that can be found in the LICENSE file or at
// https://opensource.org/licenses/MIT.

package {{.Package}}

// GENERATED BY go run ./tools/cmd/gen-model. DO NOT EDIT.

//lint:file-ignore S1008,U1000 generated code

import (
	"encoding/hex"
	"fmt"
	"strconv"

	"gitlab.com/accumulatenetwork/accumulate/pkg/errors"
	"gitlab.com/accumulatenetwork/accumulate/internal/logging"
	"gitlab.com/accumulatenetwork/accumulate/internal/database/record"
	"gitlab.com/accumulatenetwork/accumulate/pkg/url"
	"gitlab.com/accumulatenetwork/accumulate/protocol"
	"gitlab.com/accumulatenetwork/accumulate/pkg/types/merkle"
	"gitlab.com/accumulatenetwork/accumulate/internal/database/smt/storage"
)

{{  define "accessor"}}
{{- if .Private}}get{{end}}{{.Name}}
{{- end}}

{{  define "valueLabel"}}
{{- if not (and .GetParent.Type.IsEntity .GetParent.Root) -}}
c.label + " " +
{{- end -}}
"{{natural .Name}}"
{{- if parameterized . -}}
{{range .GetParameters}} + " " + {{keyToString . (lower .Name)}}{{end}}
{{- end}}
{{- end}}

{{  define "key"}}
{{- if .GetParent.Root -}}
record.Key{}
{{- else -}}
c.key
{{- end -}}
.Append({{template "keyArgs" .}})
{{- end}}

{{  define "keyArgs" -}}
{{- if not .OmitKey -}}
"{{if .Key}}{{.Key}}{{else}}{{.Name}}{{end}}",
{{- end}}
{{- if parameterized . -}}
{{range .GetParameters}}{{lower .Name}}, {{end}}
{{- end}}
{{- end}}

{{  define "encoder" -}}
{{- if wrapped . -}}
record.Wrapped(record.{{title .DataType.String}}Wrapper)
{{- else if .Union -}}
record.Union({{unionMethod . "Unmarshal"}})
{{- else -}}
record.Struct[{{stateType . true}}]()
{{- end}}
{{- end}}

{{  define "newValue"}}
{{- if .IsSet}}
return record.NewSet(c.logger.L, c.store, {{template "key" .}}, {{template "valueLabel" .}}, {{template "encoder" .}},
	{{- if wrapped . -}}
	record.Compare{{title .DataType.String}}
	{{- else if .Comparator -}}
	{{.Comparator}}
	{{- else -}}
	func(u, v {{stateType . false}}) int { return u.Compare(v) }
	{{- end -}}
)
{{- else if .IsList}}
return record.NewList(c.logger.L, c.store, {{template "key" .}}, {{template "valueLabel" .}}, {{template "encoder" .}})
{{- else}}
return record.NewValue(c.logger.L, c.store, {{template "key" .}}, {{template "valueLabel" .}}, {{.EmptyIfMissing}}, {{template "encoder" .}})
{{- end}}
{{- end}}

{{define "newCounted"}}
{{- if wrapped .}}
return record.NewCounted(c.logger.L, c.store, {{template "key" .}}, {{template "valueLabel" .}}, record.WrappedFactory(record.{{title .DataType.String}}Wrapper))
{{- else if .Union}}
return record.NewCounted(c.logger.L, c.store, {{template "key" .}}, {{template "valueLabel" .}}, record.UnionFactory({{unionMethod . "Unmarshal"}}))
{{- else}}
return record.NewCounted(c.logger.L, c.store, {{template "key" .}}, {{template "valueLabel" .}}, record.Struct[{{stateType . true}}])
{{- end}}
{{- end}}

{{define "entity"}}
{{$c := .}}

{{if .Interface}}
type {{.FullName}} interface {
	record.Record
	{{- range .Attributes}}
	{{template "accessor" .}}({{range .GetParameters}}{{lower .Name}} {{parameterType .}},{{end}}) {{recordType . false}}
	{{- end}}
}
{{end}}

type {{fullName .}} struct {
	logger logging.OptionalLogger
	store record.Store
	{{- if not .Root}}
	key record.Key
	label string
	{{- if .GetParent}}
	parent *{{fullName .GetParent}}
	{{- end}}
	{{- end}}
	{{- range .Fields}}
	{{.Name}} {{parameterType .}}
	{{- end}}
	{{  range .Attributes}}
	{{lower .Name}} {{fieldType .}}
	{{- end}}
}

{{range .Attributes}}
{{if parameterized .}}
type {{lower .FullName}}Key struct {
	{{- range $index, $param := .GetParameters}}
	{{.Name}} {{keyType $param}}
	{{- end}}
}

{{$a := .}}
func keyFor{{.FullName}}({{range .GetParameters}}{{lower .Name}} {{parameterType .}}, {{end}}) {{lower $a.FullName}}Key {
	return {{lower $a.FullName}}Key{ {{range .GetParameters}}{{asKey . (lower .Name)}}, {{end}} }
}
{{end}}
{{end}}

{{range .Attributes}}
{{if not .OmitAccessor}}
func (c *{{fullName $c}}) {{template "accessor" .}}({{range .GetParameters}}{{lower .Name}} {{parameterType .}},{{end}}) {{recordType . false}} {
	{{- if parameterized .}}
	return getOrCreateMap(&c.{{lower .Name}}, keyFor{{.FullName}}({{range .GetParameters}}{{lower .Name}},{{end}}),
	{{- else}}
	return getOrCreateField(&c.{{lower .Name}},
	{{- end -}}

	func() {{recordType . true}} {
		{{- if .Type.IsEntity}}
		v := new({{fullName .}})
		v.logger = c.logger
		v.store = c.store
		v.key = {{template "key" .}}
		v.parent = c
		v.label = {{template "valueLabel" .}}
		return v
		{{- else if .Type.IsChain}}
		return database.NewChain(c.logger.L, c.store, {{template "key" .}}, markPower, merkle.ChainType{{title .ChainType}}, "{{chainNameFormat .}}", {{template "valueLabel" .}})
		{{- else if .Type.IsOther}}
		return new{{.DataType}}(c, c.logger.L, c.store, {{template "key" .}}, "{{chainNameFormat .}}", {{template "valueLabel" .}})
		{{- else if .IsCounted}}
		{{- template "newCounted" .}}
		{{- else}}
		{{- template "newValue" .}}
		{{- end}}
	})
}
{{end}}
{{end}}

{{if not .OmitResolve}}
{{range .Attributes}}
	{{if .OmitKey}}
		{{error "%s.omitResolve is false but %[1]s.%s.omitKey is true" (fullName $c) .Name}}
	{{end}}
{{end}}
func (c *{{fullName .}}) {{if .CustomResolve}}base{{end}}Resolve(key record.Key) (record.Record, record.Key, error) {
	if len(key) == 0 {
		return nil, nil, errors.InternalError.With("bad key for {{natural .Name}}")
	}

	switch key[0] {
	{{- range .Attributes}}
	case "{{if .Key}}{{.Key}}{{else}}{{.Name}}{{end}}":
		{{- if parameterized .}}
		if len(key) < {{add 1 (parameterCount .)}} {
			return nil, nil, errors.InternalError.With("bad key for {{natural $c.Name}}")
		}
		{{- range $index, $param := .GetParameters}}
		{{lower .Name}}, ok{{.Name}} := key[{{add 1 $index}}].({{parameterType $param}})
		{{- end}}
		if {{range $index, $param := .GetParameters}}{{if gt $index 0}} || {{end}}!ok{{.Name}}{{end}} {
			return nil, nil, errors.InternalError.With("bad key for {{natural $c.Name}}")
		}
		v := c.{{template "accessor" .}}({{range .GetParameters}}{{lower .Name}},{{end}})
		return v, key[{{add 1 (parameterCount .)}}:], nil
		{{- else}}
		return c.{{template "accessor" .}}(), key[1:], nil
		{{- end}}
	{{- end}}
	default:
		return nil, nil, errors.InternalError.With("bad key for {{natural .Name}}")
	}
}
{{end}}

{{if not .OmitIsDirty}}
func (c *{{fullName .}}) {{if .CustomIsDirty}}base{{end}}IsDirty() bool {
	if c == nil {
		return false
	}

	{{  range .Attributes}}
	{{- if parameterized .}}
	for _, v := range c.{{lower .Name}} {
		if v.IsDirty() {
			return true
		}
	}
	{{- else}}
	if fieldIsDirty(c.{{lower .Name}}) {
		return true
	}
	{{- end}}
	{{- end}}

	return false
}
{{end}}

{{if hasChains .}}
{{/*if not .Root}}
func (c *{{fullName .}}) resolveChain(name string) (chain *MerkleManager, ok bool) {
	{{- range .Attributes}}
	{{- if and (.Type.IsChain) (not (parameterized .))}}
	if name == "{{chainName .}}"{
		return c.{{template "accessor" .}}(), true
	}
	{{- end}}
	{{- end}}

	{{- range .Attributes}}
	{{- if and (parameterized .) (hasChains .)}}
	tryResolveChainParam(&chain, &ok, name, "{{chainName .}}(", {{parameterCount .}}, func(params []string, name string) (*MerkleManager, bool) {
		ok := true
		{{- range $i, $p := .Parameters}}
		param{{$p.Name}} := parseChainParam(&ok, params[{{$i}}], record.Parse{{title $p.Type.String}})
		{{- end}}
		if !ok {
			return nil, false
		}

		return c.{{template "accessor" .}}({{range .Parameters}}param{{.Name}},{{end}}){{if .Type.IsChain}}, true{{else}}.resolveChain(name){{end}}
	})
	{{- else if and (not .Type.IsChain) (hasChains .)}}
	tryResolveChain(&chain, &ok, name, "{{chainName .}}", c.{{template "accessor" .}})
	{{- end}}
	{{- end}}
	return
}
{{end}}*/}}

func (c *{{fullName .}}) dirtyChains() []*MerkleManager {
	if c == nil {
		return nil
	}

	var chains []*MerkleManager
	{{  range .Attributes}}
	{{- if parameterized .}}
	{{- if .Type.IsChain}}
	for _, v := range c.{{lower .Name}} {
		if v.IsDirty() {
			chains = append(chains, v)
		}
	}
	{{- else if hasChains .}}
	for _, v := range c.{{lower .Name}} {
		chains = append(chains, v.dirtyChains()...)
	}
	{{- end}}
	{{- else if .Type.IsChain}}
	if fieldIsDirty(c.{{lower .Name}}) {
		chains = append(chains, c.{{lower .Name}})
	}
	{{- else if hasChains .}}
	chains = append(chains, c.{{lower .Name}}.dirtyChains()...)
	{{- end}}
	{{- end}}

	return chains
}
{{end}}

func (c *{{fullName .}}) WalkChanges(fn record.WalkFunc) error {
	if c == nil {
		return nil
	}

	var err error
	{{- range .Attributes}}
	{{- if not .Type.IsIndex}}
	{{- if parameterized .}}
	for _, v := range c.{{lower .Name}} {
		walkChanges(&err, v, fn)
	}
	{{- else}}
	walkChanges(&err, c.{{lower .Name}}, fn)
	{{- end}}
	{{- end}}
	{{- end}}
	return err
}

{{if not .OmitCommit}}
func (c *{{fullName .}}) {{if .CustomCommit}}base{{end}}Commit() error {
	if c == nil {
		return nil
	}

	var err error
	{{- range .Attributes}}
	{{- if parameterized .}}
	for _, v := range c.{{lower .Name}} {
		commitField(&err, v)
	}
	{{- else}}
	commitField(&err, c.{{lower .Name}})
	{{- end}}
	{{- end}}

	return err
}
{{end}}

{{range .Attributes}}
{{if .Type.IsEntity}}
{{template "entity" .}}
{{end}}
{{end}}
{{end}}

{{range .Records}}
{{template "entity" .}}
{{end}}

func getOrCreateField[T any](ptr *T, create func() T) T {
	var z T
	if any(*ptr) != any(z) {
		return *ptr
	}

	*ptr = create()
	return *ptr
}

func getOrCreateMap[T any, K comparable](ptr *map[K]T, key K, create func() T) T {
	if *ptr == nil {
		*ptr = map[K]T{}
	}

	if v, ok := (*ptr)[key]; ok {
		return v
	}

	v := create()
	(*ptr)[key] = v
	return v
}

func commitField[T record.Record](lastErr *error, field T) {
	var z T
	if *lastErr != nil || any(field) == any(z) {
		return
	}

	*lastErr = field.Commit()
}

func fieldIsDirty[T record.Record](field T) bool {
	var z T
	return any(field) != any(z) && field.IsDirty()
}

func walkChanges[T record.Record](lastErr *error, field T, fn record.WalkFunc) {
	var z T
	if *lastErr != nil || any(field) == any(z) {
		return
	}

	*lastErr = field.WalkChanges(fn)
}