package {{.Package}}

// GENERATED BY go run ./tools/cmd/gen-model. DO NOT EDIT.

import (
	"fmt"

	"gitlab.com/accumulatenetwork/accumulate/internal/errors"
	"gitlab.com/accumulatenetwork/accumulate/internal/logging"
	"gitlab.com/accumulatenetwork/accumulate/internal/database/record"
	"gitlab.com/accumulatenetwork/accumulate/internal/url"
	"gitlab.com/accumulatenetwork/accumulate/protocol"
	"gitlab.com/accumulatenetwork/accumulate/smt/managed"
	"gitlab.com/accumulatenetwork/accumulate/smt/storage"
)

{{  define "valueLabelFormat"}}
{{- if isBaseType .GetParent -}}
c.label + " {{natural .Name}}"
{{- else -}}
"{{valueNameFormat .}}"
{{- end}}
{{- end}}

{{  define "chainNameFormat"}}
{{- if isBaseType .GetParent -}}
c.name + "-{{natural .Name}}"
{{- else -}}
"{{chainNameFormat .}}"
{{- end}}
{{- end}}

{{  define "key"}}
{{- if .GetParent.Root -}}
record.Key{}
{{- else -}}
c.key
{{- end}}
{{- if parameterized . -}}
.Append("{{.Name}}", {{range .GetParameters}}{{lower .Name}}{{end}})
{{- else -}}
.Append("{{.Name}}")
{{- end}}
{{- end}}

{{  define "encoder" -}}
{{- if .Wrapped}}
record.Wrapped(record.{{title .DataType.String}}Wrapper)
{{- else if .Union}}
record.Union({{unionMethod . "Unmarshal"}})
{{- else}}
record.Struct[{{stateType . true}}]()
{{- end}}
{{- end}}

{{  define "newValue"}}
{{- if .Set}}
return record.NewSet(c.logger.L, c.store, {{template "key" .}}, {{template "valueLabelFormat" .}}, {{template "encoder" .}},
	{{- if .Wrapped -}}
	record.Compare{{title .DataType.String}}
	{{- else -}}
	func(u, v {{stateType . false}}) int { return u.Compare(v) }
	{{- end -}}
)
{{- else}}
return record.NewValue(c.logger.L, c.store, {{template "key" .}}, {{template "valueLabelFormat" .}}, {{.EmptyIfMissing}}, {{template "encoder" .}})
{{- end}}
{{- end}}

{{define "newCounted"}}
{{- if .Wrapped}}
return record.NewCounted(c.logger.L, c.store, {{template "key" .}}, {{template "valueLabelFormat" .}}, record.WrappedFactory(record.{{title .DataType.String}}Wrapper))
{{- else if .Union}}
return record.NewCounted(c.logger.L, c.store, {{template "key" .}}, {{template "valueLabelFormat" .}}, record.UnionFactory({{unionMethod . "Unmarshal"}}))
{{- else}}
return record.NewCounted(c.logger.L, c.store, {{template "key" .}}, {{template "valueLabelFormat" .}}, record.Struct[{{stateType . true}}])
{{- end}}
{{- end}}

{{define "entity"}}
type {{.FullName}} struct {
	logger logging.OptionalLogger
	store record.Store
	{{- if not .Root}}
	key record.Key
	{{- if .GetParent}}
	parent *{{.GetParent.FullName}}
	{{- end}}
	{{- end}}
	{{- range .Fields}}
	{{.Name}} {{parameterType .}}
	{{- end}}
	{{  range .Attributes}}
	{{lower .Name}} {{fieldType .}}
	{{- end}}
}

{{$c := .}}
{{range .Attributes}}
{{if not .OmitAccessor}}
func (c *{{$c.FullName}}) {{.Name}}({{range .GetParameters}}{{lower .Name}} {{parameterType .}},{{end}}) *{{recordType .}} {
	{{- if parameterized .}}
	return getOrCreateMap(&c.{{lower .Name}}, {{template "key" .}},
	{{- else}}
	return getOrCreateField(&c.{{lower .Name}},
	{{- end -}}

	func() *{{recordType .}} {
		{{- if .Type.IsEntity}}
		v := new({{.FullName}})
		v.logger = c.logger
		v.store = c.store
		v.key = {{template "key" .}}
		v.parent = c
		return v
		{{- else if .Type.IsChain}}
		return managed.NewChain(c.logger.L, c.store, {{template "key" .}}, markPower, {{/*managed.ChainType{{title .ChainType}},*/}} {{template "chainNameFormat" .}}, {{template "valueLabelFormat" .}})
		{{- else if .Type.IsOther}}
		return new{{.DataType}}(c, c.logger.L, c.store, {{template "key" .}}, {{template "chainNameFormat" .}}, {{template "valueLabelFormat" .}})
		{{- else if .Counted}}
		{{- template "newCounted" .}}
		{{- else}}
		{{- template "newValue" .}}
		{{- end}}
	})
}
{{end}}
{{end}}

func (c *{{.FullName}}) {{if .CustomResolve}}base{{end}}Resolve(key record.Key) (record.Record, record.Key, error) {
	switch key[0] {
	{{- range .Attributes}}
	case "{{.Name}}":
		{{- if parameterized .}}
		if len(key) < {{add 1 (parameterCount .)}} {
			return nil, nil, errors.New(errors.StatusInternalError, "bad key for {{natural $c.Name}}")
		}
		{{- range $index, $param := .GetParameters}}
		{{lower .Name}}, ok{{.Name}} := key[{{add 1 $index}}].({{parameterType $param}})
		{{- end}}
		if {{range $index, $param := .GetParameters}}{{if gt $index 0}} || {{end}}!ok{{.Name}}{{end}} {
			return nil, nil, errors.New(errors.StatusInternalError, "bad key for {{natural $c.Name}}")
		}
		v := c.{{.Name}}({{range .GetParameters}}{{lower .Name}},{{end}})
		return v, key[{{add 1 (parameterCount .)}}:], nil
		{{- else}}
		return c.{{.Name}}(), key[1:], nil
		{{- end}}
	{{- end}}
	default:
		return nil, nil, errors.New(errors.StatusInternalError, "bad key for {{natural .Name}}")
	}
}

func (c *{{.FullName}}) IsDirty() bool {
	if c == nil {
		return false
	}

	{{  range .Attributes}}
	{{- if parameterized .}}
	for _, v := range c.{{lower .Name}} {
		if v.IsDirty() {
			return true
		}
	}
	{{- else}}
	if fieldIsDirty(c.{{lower .Name}}) {
		return true
	}
	{{- end}}
	{{- end}}

	return false
}

{{if hasChains .}}
{{if not .Root}}
func (c *{{.FullName}}) resolveChain(name string) (chain *managed.Chain, ok bool) {
	{{- range .Attributes}}
	{{- if and (.Type.IsChain) (not (parameterized .))}}
	if name == "{{chainName .}}"{
		return c.{{.Name}}(), true
	}
	{{- end}}
	{{- end}}

	{{- range .Attributes}}
	{{- if and (parameterized .) (hasChains .)}}
	tryResolveChainParam(&chain, &ok, name, "{{chainName .}}(", {{parameterCount .}}, func(params []string, name string) (*managed.Chain, bool) {
		ok := true
		{{- range $i, $p := .Parameters}}
		param{{$p.Name}} := parseChainParam(&ok, params[{{$i}}], record.Parse{{title $p.Type.String}})
		{{- end}}
		if !ok {
			return nil, false
		}

		return c.{{.Name}}({{range .Parameters}}param{{.Name}},{{end}}){{if .Type.IsChain}}, true{{else}}.resolveChain(name){{end}}
	})
	{{- else if and (not .Type.IsChain) (hasChains .)}}
	tryResolveChain(&chain, &ok, name, "{{chainName .}}-", c.{{.Name}})
	{{- end}}
	{{- end}}
	return
}
{{end}}

func (c *{{.FullName}}) dirtyChains() []*managed.Chain {
	if c == nil {
		return nil
	}

	var chains []*managed.Chain
	{{  range .Attributes}}
	{{- if parameterized .}}
	{{- if .Type.IsChain}}
	for _, v := range c.{{lower .Name}} {
		if v.IsDirty() {
			chains = append(chains, v)
		}
	}
	{{- else if hasChains .}}
	for _, v := range c.{{lower .Name}} {
		chains = append(chains, v.dirtyChains()...)
	}
	{{- end}}
	{{- else if .Type.IsChain}}
	if fieldIsDirty(c.{{lower .Name}}) {
		chains = append(chains, c.{{lower .Name}})
	}
	{{- else if hasChains .}}
	chains = append(chains, c.{{lower .Name}}.dirtyChains()...)
	{{- end}}
	{{- end}}

	return chains
}
{{end}}

func (c *{{.FullName}}) {{if .CustomCommit}}baseCommit{{else}}Commit{{end}}() error {
	if c == nil {
		return nil
	}

	var err error
	{{- range .Attributes}}
	{{- if parameterized .}}
	for _, v := range c.{{lower .Name}} {
		commitField(&err, v)
	}
	{{- else}}
	commitField(&err, c.{{lower .Name}})
	{{- end}}
	{{- end}}

	return nil
}

{{range .Attributes}}
{{if .Type.IsEntity}}
{{template "entity" .}}
{{end}}
{{end}}
{{end}}

{{range .Records}}
{{template "entity" .}}
{{end}}

func getOrCreateField[T any](ptr **T, create func() *T) *T {
	if *ptr != nil {
		return *ptr
	}

	*ptr = create()
	return *ptr
}

func getOrCreateMap[T any](ptr *map[storage.Key]T, key record.Key, create func() T) T {
	if *ptr == nil {
		*ptr = map[storage.Key]T{}
	}

	k := key.Hash()
	if v, ok := (*ptr)[k]; ok {
		return v
	}

	v := create()
	(*ptr)[k] = v
	return v
}

func commitField[T any, PT record.RecordPtr[T]](lastErr *error, field PT) {
	if *lastErr != nil || field == nil {
		return
	}

	*lastErr = field.Commit()
}

func fieldIsDirty[T any, PT record.RecordPtr[T]](field PT) bool {
	return field != nil && field.IsDirty()
}
