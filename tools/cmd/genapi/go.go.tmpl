package {{.Package}}

import (
	"context"
	"encoding/json"

	"github.com/AccumulateNetwork/accumulate/protocol"
	"github.com/AccumulateNetwork/accumulate/types/api"
	"github.com/AccumulateNetwork/jsonrpc2/v15"
)

func (m *JrpcMethods) populateMethodTable() jsonrpc2.MethodMap {
	if m.methods == nil {
		m.methods = make(jsonrpc2.MethodMap, {{len .Methods}})
	}
	{{range .Methods}}
	m.methods["{{.RPC}}"] = m.{{.Name}}{{end}}

	return m.methods
}

func (m *JrpcMethods) parse(params json.RawMessage, target interface{}, validateFields ...string) error {
	err := json.Unmarshal(params, target)
	if err != nil {
		return validatorError(err)
	}

	// validate fields
	if len(validateFields) == 0 {
		if err = m.validate.Struct(target); err != nil {
			return validatorError(err)
		}
	} else {
		if err = m.validate.StructPartial(target, validateFields...); err != nil {
			return validatorError(err)
		}
	}

	return nil
}

func jrpcFormatResponse(res interface{}, err error) interface{} {
	if err != nil {
		return accumulateError(err)
	}

	return res
}

{{range .Methods}}
{{if eq .Kind "query"}}
func (m *JrpcMethods) {{.Name}}(_ context.Context, params json.RawMessage) interface{} {
	req := new({{.Input}})
	err := m.parse(params, req)
	if err != nil {
		return err
	}

	return jrpcFormatResponse(m.querier.{{.Call}}({{range $i, $v := .CallParams}}{{if gt $i 0}}, {{end}}req.{{$v}}{{end}}))
}
{{else if eq .Kind "execute"}}
func (m *JrpcMethods) {{.Name}}(ctx context.Context, params json.RawMessage) interface{} {
	return m.executeWith(ctx, params, new(protocol.{{.Input}}){{range .Validate}}, "{{.}}"{{end}})
}
{{end}}
{{end}}