// Copyright 2022 The Accumulate Authors
//
// Use of this source code is governed by an MIT-style
// license that can be found in the LICENSE file or at
// https://opensource.org/licenses/MIT.

package main

// GENERATED BY go run ./tools/cmd/gen-types. DO NOT EDIT.

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"

	"gitlab.com/accumulatenetwork/accumulate/pkg/types/encoding"
)

// NewDbPatchOp creates a new DbPatchOp for the specified DbPatchOpType.
func NewDbPatchOp(typ DbPatchOpType) (DbPatchOp, error) {
	switch typ {
	case DbPatchOpTypeDelete:
		return new(DeleteDbPatchOp), nil
	case DbPatchOpTypePut:
		return new(PutDbPatchOp), nil
	}
	return nil, fmt.Errorf("unknown db patch op %v", typ)
}

// EqualDbPatchOp is used to compare the values of the union
func EqualDbPatchOp(a, b DbPatchOp) bool {
	if a == b {
		return true
	}
	switch a := a.(type) {
	case *DeleteDbPatchOp:
		if a == nil {
			return b == nil
		}
		b, ok := b.(*DeleteDbPatchOp)
		return ok && a.Equal(b)
	case *PutDbPatchOp:
		if a == nil {
			return b == nil
		}
		b, ok := b.(*PutDbPatchOp)
		return ok && a.Equal(b)
	}
	return false
}

// CopyDbPatchOp copies a DbPatchOp.
func CopyDbPatchOp(v DbPatchOp) DbPatchOp {
	switch v := v.(type) {
	case *DeleteDbPatchOp:
		return v.Copy()
	case *PutDbPatchOp:
		return v.Copy()
	default:
		return v.CopyAsInterface().(DbPatchOp)
	}
}

// UnmarshalDbPatchOp unmarshals a DbPatchOp.
func UnmarshalDbPatchOp(data []byte) (DbPatchOp, error) {
	return UnmarshalDbPatchOpFrom(bytes.NewReader(data))
}

// UnmarshalDbPatchOpFrom unmarshals a DbPatchOp.
func UnmarshalDbPatchOpFrom(rd io.Reader) (DbPatchOp, error) {
	reader := encoding.NewReader(rd)

	// Read the type code
	var typ DbPatchOpType
	if !reader.ReadEnum(1, &typ) {
		if reader.IsEmpty() {
			return nil, nil
		}
		return nil, fmt.Errorf("field Type: missing")
	}

	// Create a new db patch op
	v, err := NewDbPatchOp(DbPatchOpType(typ))
	if err != nil {
		return nil, err
	}

	// Unmarshal the rest of the db patch op
	err = v.UnmarshalFieldsFrom(reader)
	if err != nil {
		return nil, err
	}

	return v, nil
}

// UnmarshalDbPatchOpJson unmarshals a DbPatchOp.
func UnmarshalDbPatchOpJSON(data []byte) (DbPatchOp, error) {
	var typ *struct{ Type DbPatchOpType }
	err := json.Unmarshal(data, &typ)
	if err != nil {
		return nil, err
	}

	if typ == nil {
		return nil, nil
	}

	acnt, err := NewDbPatchOp(typ.Type)
	if err != nil {
		return nil, err
	}

	err = json.Unmarshal(data, acnt)
	if err != nil {
		return nil, err
	}

	return acnt, nil
}
