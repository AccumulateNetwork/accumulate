package chain

// GENERATED BY go run ./internal/cmd/genmarshal. DO NOT EDIT.

import (
	"bytes"
	"fmt"

	"github.com/AccumulateNetwork/accumulate/internal/encoding"
	"github.com/AccumulateNetwork/accumulate/internal/url"
	"github.com/AccumulateNetwork/accumulate/protocol"
)

type BlockMetadata struct {
	Deliver     DeliverMetadata `json:"deliver,omitempty" form:"deliver" query:"deliver" validate:"required"`
	Delivered   uint64          `json:"delivered,omitempty" form:"delivered" query:"delivered" validate:"required"`
	SynthSigned uint64          `json:"synthSigned,omitempty" form:"synthSigned" query:"synthSigned" validate:"required"`
	SynthSent   uint64          `json:"synthSent,omitempty" form:"synthSent" query:"synthSent" validate:"required"`
}

type DeliverMetadata struct {
	Updated   []*url.URL              `json:"updated,omitempty" form:"updated" query:"updated" validate:"required"`
	Submitted []*SubmittedTransaction `json:"submitted,omitempty" form:"submitted" query:"submitted" validate:"required"`
}

type SubmittedTransaction struct {
	Url  *url.URL                    `json:"url,omitempty" form:"url" query:"url" validate:"required"`
	Body protocol.TransactionPayload `json:"body,omitempty" form:"body" query:"body" validate:"required"`
}

func (v *BlockMetadata) Equal(u *BlockMetadata) bool {
	if !(v.Deliver.Equal(&u.Deliver)) {
		return false
	}

	if !(v.Delivered == u.Delivered) {
		return false
	}

	if !(v.SynthSigned == u.SynthSigned) {
		return false
	}

	if !(v.SynthSent == u.SynthSent) {
		return false
	}

	return true
}

func (v *DeliverMetadata) Equal(u *DeliverMetadata) bool {
	if !(len(v.Updated) == len(u.Updated)) {
		return false
	}

	for i := range v.Updated {
		v, u := v.Updated[i], u.Updated[i]
		if !(v.Equal(u)) {
			return false
		}

	}

	if !(len(v.Submitted) == len(u.Submitted)) {
		return false
	}

	for i := range v.Submitted {
		v, u := v.Submitted[i], u.Submitted[i]
		if !(v.Equal(u)) {
			return false
		}

	}

	return true
}

func (v *SubmittedTransaction) Equal(u *SubmittedTransaction) bool {
	if !(v.Url.Equal(u.Url)) {
		return false
	}

	if !(v.Body == u.Body) {
		return false
	}

	return true
}

func (v *BlockMetadata) BinarySize() int {
	var n int

	n += v.Deliver.BinarySize()

	n += encoding.UvarintBinarySize(v.Delivered)

	n += encoding.UvarintBinarySize(v.SynthSigned)

	n += encoding.UvarintBinarySize(v.SynthSent)

	return n
}

func (v *DeliverMetadata) BinarySize() int {
	var n int

	n += encoding.UvarintBinarySize(uint64(len(v.Updated)))

	for _, v := range v.Updated {
		n += v.BinarySize()

	}

	n += encoding.UvarintBinarySize(uint64(len(v.Submitted)))

	for _, v := range v.Submitted {
		n += v.BinarySize()

	}

	return n
}

func (v *SubmittedTransaction) BinarySize() int {
	var n int

	n += v.Url.BinarySize()

	n += v.Body.BinarySize()

	return n
}

func (v *BlockMetadata) MarshalBinary() ([]byte, error) {
	var buffer bytes.Buffer

	if b, err := v.Deliver.MarshalBinary(); err != nil {
		return nil, fmt.Errorf("error encoding Deliver: %w", err)
	} else {
		buffer.Write(b)
	}

	buffer.Write(encoding.UvarintMarshalBinary(v.Delivered))

	buffer.Write(encoding.UvarintMarshalBinary(v.SynthSigned))

	buffer.Write(encoding.UvarintMarshalBinary(v.SynthSent))

	return buffer.Bytes(), nil
}

func (v *DeliverMetadata) MarshalBinary() ([]byte, error) {
	var buffer bytes.Buffer

	buffer.Write(encoding.UvarintMarshalBinary(uint64(len(v.Updated))))
	for i, v := range v.Updated {
		_ = i
		if b, err := v.MarshalBinary(); err != nil {
			return nil, fmt.Errorf("error encoding Updated[%d]: %w", i, err)
		} else {
			buffer.Write(b)
		}

	}

	buffer.Write(encoding.UvarintMarshalBinary(uint64(len(v.Submitted))))
	for i, v := range v.Submitted {
		_ = i
		if b, err := v.MarshalBinary(); err != nil {
			return nil, fmt.Errorf("error encoding Submitted[%d]: %w", i, err)
		} else {
			buffer.Write(b)
		}

	}

	return buffer.Bytes(), nil
}

func (v *SubmittedTransaction) MarshalBinary() ([]byte, error) {
	var buffer bytes.Buffer

	if b, err := v.Url.MarshalBinary(); err != nil {
		return nil, fmt.Errorf("error encoding Url: %w", err)
	} else {
		buffer.Write(b)
	}

	if b, err := v.Body.MarshalBinary(); err != nil {
		return nil, fmt.Errorf("error encoding Body: %w", err)
	} else {
		buffer.Write(b)
	}

	return buffer.Bytes(), nil
}

func (v *BlockMetadata) UnmarshalBinary(data []byte) error {
	if err := v.Deliver.UnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding Deliver: %w", err)
	}
	data = data[v.Deliver.BinarySize():]

	if x, err := encoding.UvarintUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding Delivered: %w", err)
	} else {
		v.Delivered = x
	}
	data = data[encoding.UvarintBinarySize(v.Delivered):]

	if x, err := encoding.UvarintUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding SynthSigned: %w", err)
	} else {
		v.SynthSigned = x
	}
	data = data[encoding.UvarintBinarySize(v.SynthSigned):]

	if x, err := encoding.UvarintUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding SynthSent: %w", err)
	} else {
		v.SynthSent = x
	}
	data = data[encoding.UvarintBinarySize(v.SynthSent):]

	return nil
}

func (v *DeliverMetadata) UnmarshalBinary(data []byte) error {
	var lenUpdated uint64
	if x, err := encoding.UvarintUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding Updated: %w", err)
	} else {
		lenUpdated = x
	}
	data = data[encoding.UvarintBinarySize(lenUpdated):]

	v.Updated = make([]*url.URL, lenUpdated)
	for i := range v.Updated {
		var x *url.URL
		x = new(url.URL)
		if err := x.UnmarshalBinary(data); err != nil {
			return fmt.Errorf("error decoding Updated[%d]: %w", i, err)
		}
		data = data[x.BinarySize():]

		v.Updated[i] = x
	}

	var lenSubmitted uint64
	if x, err := encoding.UvarintUnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding Submitted: %w", err)
	} else {
		lenSubmitted = x
	}
	data = data[encoding.UvarintBinarySize(lenSubmitted):]

	v.Submitted = make([]*SubmittedTransaction, lenSubmitted)
	for i := range v.Submitted {
		var x *SubmittedTransaction
		x = new(SubmittedTransaction)
		if err := x.UnmarshalBinary(data); err != nil {
			return fmt.Errorf("error decoding Submitted[%d]: %w", i, err)
		}
		data = data[x.BinarySize():]

		v.Submitted[i] = x
	}

	return nil
}

func (v *SubmittedTransaction) UnmarshalBinary(data []byte) error {
	v.Url = new(url.URL)
	if err := v.Url.UnmarshalBinary(data); err != nil {
		return fmt.Errorf("error decoding Url: %w", err)
	}
	data = data[v.Url.BinarySize():]

	if x, err := protocol.UnmarshalTransaction(data); err != nil {
		return fmt.Errorf("error decoding Body: %w", err)
	} else {
		v.Body = x
	}
	data = data[v.Body.BinarySize():]

	return nil
}
