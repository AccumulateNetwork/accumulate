// Code generated by mockery v2.14.0. DO NOT EDIT.

package p2p

import (
	peer "github.com/libp2p/go-libp2p/core/peer"
	mock "github.com/stretchr/testify/mock"
	api "gitlab.com/accumulatenetwork/accumulate/pkg/api/v3"
)

// mockDialerPeers is an autogenerated mock type for the dialerPeers type
type mockDialerPeers struct {
	mock.Mock
}

type mockDialerPeers_Expecter struct {
	mock *mock.Mock
}

func (_m *mockDialerPeers) EXPECT() *mockDialerPeers_Expecter {
	return &mockDialerPeers_Expecter{mock: &_m.Mock}
}

// adjustPriority provides a mock function with given fields: _a0, delta
func (_m *mockDialerPeers) adjustPriority(_a0 *peerState, delta int) {
	_m.Called(_a0, delta)
}

// mockDialerPeers_adjustPriority_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'adjustPriority'
type mockDialerPeers_adjustPriority_Call struct {
	*mock.Call
}

// adjustPriority is a helper method to define mock.On call
//  - _a0 *peerState
//  - delta int
func (_e *mockDialerPeers_Expecter) adjustPriority(_a0 interface{}, delta interface{}) *mockDialerPeers_adjustPriority_Call {
	return &mockDialerPeers_adjustPriority_Call{Call: _e.mock.On("adjustPriority", _a0, delta)}
}

func (_c *mockDialerPeers_adjustPriority_Call) Run(run func(_a0 *peerState, delta int)) *mockDialerPeers_adjustPriority_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*peerState), args[1].(int))
	})
	return _c
}

func (_c *mockDialerPeers_adjustPriority_Call) Return() *mockDialerPeers_adjustPriority_Call {
	_c.Call.Return()
	return _c
}

// getPeer provides a mock function with given fields: id
func (_m *mockDialerPeers) getPeer(id peer.ID) (*peerState, bool) {
	ret := _m.Called(id)

	var r0 *peerState
	if rf, ok := ret.Get(0).(func(peer.ID) *peerState); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*peerState)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(peer.ID) bool); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// mockDialerPeers_getPeer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getPeer'
type mockDialerPeers_getPeer_Call struct {
	*mock.Call
}

// getPeer is a helper method to define mock.On call
//  - id peer.ID
func (_e *mockDialerPeers_Expecter) getPeer(id interface{}) *mockDialerPeers_getPeer_Call {
	return &mockDialerPeers_getPeer_Call{Call: _e.mock.On("getPeer", id)}
}

func (_c *mockDialerPeers_getPeer_Call) Run(run func(id peer.ID)) *mockDialerPeers_getPeer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(peer.ID))
	})
	return _c
}

func (_c *mockDialerPeers_getPeer_Call) Return(_a0 *peerState, _a1 bool) *mockDialerPeers_getPeer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// getPeers provides a mock function with given fields: service
func (_m *mockDialerPeers) getPeers(service *api.ServiceAddress) []*peerState {
	ret := _m.Called(service)

	var r0 []*peerState
	if rf, ok := ret.Get(0).(func(*api.ServiceAddress) []*peerState); ok {
		r0 = rf(service)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*peerState)
		}
	}

	return r0
}

// mockDialerPeers_getPeers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getPeers'
type mockDialerPeers_getPeers_Call struct {
	*mock.Call
}

// getPeers is a helper method to define mock.On call
//  - service *api.ServiceAddress
func (_e *mockDialerPeers_Expecter) getPeers(service interface{}) *mockDialerPeers_getPeers_Call {
	return &mockDialerPeers_getPeers_Call{Call: _e.mock.On("getPeers", service)}
}

func (_c *mockDialerPeers_getPeers_Call) Run(run func(service *api.ServiceAddress)) *mockDialerPeers_getPeers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*api.ServiceAddress))
	})
	return _c
}

func (_c *mockDialerPeers_getPeers_Call) Return(_a0 []*peerState) *mockDialerPeers_getPeers_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTnewMockDialerPeers interface {
	mock.TestingT
	Cleanup(func())
}

// newMockDialerPeers creates a new instance of mockDialerPeers. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockDialerPeers(t mockConstructorTestingTnewMockDialerPeers) *mockDialerPeers {
	mock := &mockDialerPeers{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
