// Copyright 2022 The Accumulate Authors
//
// Use of this source code is governed by an MIT-style
// license that can be found in the LICENSE file or at
// https://opensource.org/licenses/MIT.

package api

// GENERATED BY go run ./tools/cmd/gen-enum. DO NOT EDIT.

import (
	"encoding/json"
	"fmt"
	"strings"
)

// RecordTypeAccount .
const RecordTypeAccount RecordType = 1

// RecordTypeTransaction .
const RecordTypeTransaction RecordType = 2

// SubmitModeSync submits the transaction and blocks until it is accepted into a block.
const SubmitModeSync SubmitMode = 0

// SubmitModeAsync submits the transaction asynchronously.
const SubmitModeAsync SubmitMode = 1

// SubmitModeCheck checks the transaction but does not submit it.
const SubmitModeCheck SubmitMode = 2

// GetEnumValue returns the value of the Record Type
func (v RecordType) GetEnumValue() uint64 { return uint64(v) }

// SetEnumValue sets the value. SetEnumValue returns false if the value is invalid.
func (v *RecordType) SetEnumValue(id uint64) bool {
	u := RecordType(id)
	switch u {
	case RecordTypeAccount, RecordTypeTransaction:
		*v = u
		return true
	default:
		return false
	}
}

// String returns the name of the Record Type.
func (v RecordType) String() string {
	switch v {
	case RecordTypeAccount:
		return "account"
	case RecordTypeTransaction:
		return "transaction"
	default:
		return fmt.Sprintf("RecordType:%d", v)
	}
}

// RecordTypeByName returns the named Record Type.
func RecordTypeByName(name string) (RecordType, bool) {
	switch strings.ToLower(name) {
	case "account":
		return RecordTypeAccount, true
	case "transaction":
		return RecordTypeTransaction, true
	default:
		return 0, false
	}
}

// MarshalJSON marshals the Record Type to JSON as a string.
func (v RecordType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.String())
}

// UnmarshalJSON unmarshals the Record Type from JSON as a string.
func (v *RecordType) UnmarshalJSON(data []byte) error {
	var s string
	err := json.Unmarshal(data, &s)
	if err != nil {
		return err
	}

	var ok bool
	*v, ok = RecordTypeByName(s)
	if !ok || strings.ContainsRune(v.String(), ':') {
		return fmt.Errorf("invalid Record Type %q", s)
	}
	return nil
}

// GetEnumValue returns the value of the Submit Mode
func (v SubmitMode) GetEnumValue() uint64 { return uint64(v) }

// SetEnumValue sets the value. SetEnumValue returns false if the value is invalid.
func (v *SubmitMode) SetEnumValue(id uint64) bool {
	u := SubmitMode(id)
	switch u {
	case SubmitModeSync, SubmitModeAsync, SubmitModeCheck:
		*v = u
		return true
	default:
		return false
	}
}

// String returns the name of the Submit Mode.
func (v SubmitMode) String() string {
	switch v {
	case SubmitModeSync:
		return "sync"
	case SubmitModeAsync:
		return "async"
	case SubmitModeCheck:
		return "check"
	default:
		return fmt.Sprintf("SubmitMode:%d", v)
	}
}

// SubmitModeByName returns the named Submit Mode.
func SubmitModeByName(name string) (SubmitMode, bool) {
	switch strings.ToLower(name) {
	case "sync":
		return SubmitModeSync, true
	case "async":
		return SubmitModeAsync, true
	case "check":
		return SubmitModeCheck, true
	default:
		return 0, false
	}
}

// MarshalJSON marshals the Submit Mode to JSON as a string.
func (v SubmitMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.String())
}

// UnmarshalJSON unmarshals the Submit Mode from JSON as a string.
func (v *SubmitMode) UnmarshalJSON(data []byte) error {
	var s string
	err := json.Unmarshal(data, &s)
	if err != nil {
		return err
	}

	var ok bool
	*v, ok = SubmitModeByName(s)
	if !ok || strings.ContainsRune(v.String(), ':') {
		return fmt.Errorf("invalid Submit Mode %q", s)
	}
	return nil
}
