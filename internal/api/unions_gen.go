// Copyright 2022 The Accumulate Authors
//
// Use of this source code is governed by an MIT-style
// license that can be found in the LICENSE file or at
// https://opensource.org/licenses/MIT.

package api

// GENERATED BY go run ./tools/cmd/gen-types. DO NOT EDIT.

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"

	"gitlab.com/accumulatenetwork/accumulate/pkg/types/encoding"
)

// NewRecord creates a new Record for the specified RecordType.
func NewRecord(typ RecordType) (Record, error) {
	switch typ {
	case RecordTypeAccount:
		return new(AccountRecord), nil
	default:
		return nil, fmt.Errorf("unknown record %v", typ)
	}
}

//EqualRecord is used to compare the values of the union
func EqualRecord(a, b Record) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	switch a := a.(type) {
	case *AccountRecord:
		b, ok := b.(*AccountRecord)
		return ok && a.Equal(b)
	default:
		return false
	}
}

//CopyRecord copies a Record.
func CopyRecord(v Record) Record {
	switch v := v.(type) {
	case *AccountRecord:
		return v.Copy()
	default:
		return v.CopyAsInterface().(Record)
	}
}

// UnmarshalRecord unmarshals a Record.
func UnmarshalRecord(data []byte) (Record, error) {
	return UnmarshalRecordFrom(bytes.NewReader(data))
}

// UnmarshalRecordFrom unmarshals a Record.
func UnmarshalRecordFrom(rd io.Reader) (Record, error) {
	reader := encoding.NewReader(rd)

	// Read the type code
	var typ RecordType
	if !reader.ReadEnum(1, &typ) {
		return nil, fmt.Errorf("field Type: missing")
	}

	// Create a new record
	v, err := NewRecord(RecordType(typ))
	if err != nil {
		return nil, err
	}

	// Unmarshal the rest of the record
	err = v.UnmarshalFieldsFrom(reader)
	if err != nil {
		return nil, err
	}

	return v, nil
}

// UnmarshalRecordJson unmarshals a Record.
func UnmarshalRecordJSON(data []byte) (Record, error) {
	var typ *struct{ Type RecordType }
	err := json.Unmarshal(data, &typ)
	if err != nil {
		return nil, err
	}

	if typ == nil {
		return nil, nil
	}

	acnt, err := NewRecord(typ.Type)
	if err != nil {
		return nil, err
	}

	err = json.Unmarshal(data, acnt)
	if err != nil {
		return nil, err
	}

	return acnt, nil
}
