// Copyright 2022 The Accumulate Authors
//
// Use of this source code is governed by an MIT-style
// license that can be found in the LICENSE file or at
// https://opensource.org/licenses/MIT.

package api

// GENERATED BY go run ./tools/cmd/gen-api. DO NOT EDIT.

import (
	"context"
	"encoding/json"

	"github.com/AccumulateNetwork/jsonrpc2/v15"
	"gitlab.com/accumulatenetwork/accumulate/pkg/api/v3"
	"gitlab.com/accumulatenetwork/accumulate/protocol"
)

func (m *JrpcMethods) populateMethodTable() jsonrpc2.MethodMap {
	if m.methods == nil {
		m.methods = make(jsonrpc2.MethodMap, 35)
	}

	m.methods["describe"] = jrpcBatchQuery(m.Describe)
	m.methods["execute"] = jrpcBatchQuery(m.Execute)
	m.methods["add-credits"] = jrpcBatchQuery(m.ExecuteAddCredits)
	m.methods["burn-tokens"] = jrpcBatchQuery(m.ExecuteBurnTokens)
	m.methods["create-adi"] = jrpcBatchQuery(m.ExecuteCreateAdi)
	m.methods["create-data-account"] = jrpcBatchQuery(m.ExecuteCreateDataAccount)
	m.methods["create-identity"] = jrpcBatchQuery(m.ExecuteCreateIdentity)
	m.methods["create-key-book"] = jrpcBatchQuery(m.ExecuteCreateKeyBook)
	m.methods["create-key-page"] = jrpcBatchQuery(m.ExecuteCreateKeyPage)
	m.methods["create-token"] = jrpcBatchQuery(m.ExecuteCreateToken)
	m.methods["create-token-account"] = jrpcBatchQuery(m.ExecuteCreateTokenAccount)
	m.methods["execute-direct"] = jrpcBatchQuery(m.ExecuteDirect)
	m.methods["issue-tokens"] = jrpcBatchQuery(m.ExecuteIssueTokens)
	m.methods["execute-local"] = jrpcBatchQuery(m.ExecuteLocal)
	m.methods["send-tokens"] = jrpcBatchQuery(m.ExecuteSendTokens)
	m.methods["update-account-auth"] = jrpcBatchQuery(m.ExecuteUpdateAccountAuth)
	m.methods["update-key"] = jrpcBatchQuery(m.ExecuteUpdateKey)
	m.methods["update-key-page"] = jrpcBatchQuery(m.ExecuteUpdateKeyPage)
	m.methods["write-data"] = jrpcBatchQuery(m.ExecuteWriteData)
	m.methods["write-data-to"] = jrpcBatchQuery(m.ExecuteWriteDataTo)
	m.methods["faucet"] = jrpcBatchQuery(m.Faucet)
	m.methods["metrics"] = jrpcBatchQuery(m.Metrics)
	m.methods["query"] = jrpcBatchQuery(m.Query)
	m.methods["query-data"] = jrpcBatchQuery(m.QueryData)
	m.methods["query-data-set"] = jrpcBatchQuery(m.QueryDataSet)
	m.methods["query-directory"] = jrpcBatchQuery(m.QueryDirectory)
	m.methods["query-key-index"] = jrpcBatchQuery(m.QueryKeyPageIndex)
	m.methods["query-major-blocks"] = jrpcBatchQuery(m.QueryMajorBlocks)
	m.methods["query-minor-blocks"] = jrpcBatchQuery(m.QueryMinorBlocks)
	m.methods["query-synth"] = jrpcBatchQuery(m.QuerySynth)
	m.methods["query-tx"] = jrpcBatchQuery(m.QueryTx)
	m.methods["query-tx-history"] = jrpcBatchQuery(m.QueryTxHistory)
	m.methods["query-tx-local"] = jrpcBatchQuery(m.QueryTxLocal)
	m.methods["status"] = jrpcBatchQuery(m.Status)
	m.methods["version"] = jrpcBatchQuery(m.Version)

	return m.methods
}

func (m *JrpcMethods) parse(params json.RawMessage, target interface{}, validateFields ...string) error {
	err := json.Unmarshal(params, target)
	if err != nil {
		return validatorError(err)
	}

	// validate fields
	if len(validateFields) == 0 {
		if err = m.validate.Struct(target); err != nil {
			return validatorError(err)
		}
	} else {
		if err = m.validate.StructPartial(target, validateFields...); err != nil {
			return validatorError(err)
		}
	}

	return nil
}

func jrpcBatchQuery(m jsonrpc2.MethodFunc) jsonrpc2.MethodFunc {
	return func(ctx context.Context, params json.RawMessage) interface{} {
		ctx, cancel, _ := api.ContextWithBatchData(ctx)
		defer cancel()
		return m(ctx, params)
	}
}

func jrpcFormatResponse(res interface{}, err error) interface{} {
	if err != nil {
		return accumulateError(err)
	}

	return res
}

// ExecuteAddCredits submits an AddCredits transaction.
func (m *JrpcMethods) ExecuteAddCredits(ctx context.Context, params json.RawMessage) interface{} {
	return m.executeWith(ctx, params, new(protocol.AddCredits))
}

// ExecuteBurnTokens submits a BurnTokens transaction.
func (m *JrpcMethods) ExecuteBurnTokens(ctx context.Context, params json.RawMessage) interface{} {
	return m.executeWith(ctx, params, new(protocol.BurnTokens))
}

// ExecuteCreateAdi submits a CreateIdentity transaction.
func (m *JrpcMethods) ExecuteCreateAdi(ctx context.Context, params json.RawMessage) interface{} {
	return m.executeWith(ctx, params, new(protocol.CreateIdentity))
}

// ExecuteCreateDataAccount submits a CreateDataAccount transaction.
func (m *JrpcMethods) ExecuteCreateDataAccount(ctx context.Context, params json.RawMessage) interface{} {
	return m.executeWith(ctx, params, new(protocol.CreateDataAccount))
}

// ExecuteCreateIdentity submits a CreateIdentity transaction.
func (m *JrpcMethods) ExecuteCreateIdentity(ctx context.Context, params json.RawMessage) interface{} {
	return m.executeWith(ctx, params, new(protocol.CreateIdentity))
}

// ExecuteCreateKeyBook submits a CreateKeyBook transaction.
func (m *JrpcMethods) ExecuteCreateKeyBook(ctx context.Context, params json.RawMessage) interface{} {
	return m.executeWith(ctx, params, new(protocol.CreateKeyBook))
}

// ExecuteCreateKeyPage submits a CreateKeyPage transaction.
func (m *JrpcMethods) ExecuteCreateKeyPage(ctx context.Context, params json.RawMessage) interface{} {
	return m.executeWith(ctx, params, new(protocol.CreateKeyPage))
}

// ExecuteCreateToken submits a CreateToken transaction.
func (m *JrpcMethods) ExecuteCreateToken(ctx context.Context, params json.RawMessage) interface{} {
	return m.executeWith(ctx, params, new(protocol.CreateToken))
}

// ExecuteCreateTokenAccount submits a CreateTokenAccount transaction.
func (m *JrpcMethods) ExecuteCreateTokenAccount(ctx context.Context, params json.RawMessage) interface{} {
	return m.executeWith(ctx, params, new(protocol.CreateTokenAccount))
}

// ExecuteIssueTokens submits an IssueTokens transaction.
func (m *JrpcMethods) ExecuteIssueTokens(ctx context.Context, params json.RawMessage) interface{} {
	return m.executeWith(ctx, params, new(protocol.IssueTokens))
}

// ExecuteSendTokens submits a SendTokens transaction.
func (m *JrpcMethods) ExecuteSendTokens(ctx context.Context, params json.RawMessage) interface{} {
	return m.executeWith(ctx, params, new(protocol.SendTokens), "From", "To")
}

// ExecuteUpdateAccountAuth submits an UpdateAccountAuth transaction.
func (m *JrpcMethods) ExecuteUpdateAccountAuth(ctx context.Context, params json.RawMessage) interface{} {
	return m.executeWith(ctx, params, new(protocol.UpdateAccountAuth))
}

// ExecuteUpdateKey submits an UpdateKey transaction.
func (m *JrpcMethods) ExecuteUpdateKey(ctx context.Context, params json.RawMessage) interface{} {
	return m.executeWith(ctx, params, new(protocol.UpdateKey))
}

// ExecuteUpdateKeyPage submits an UpdateKeyPage transaction.
func (m *JrpcMethods) ExecuteUpdateKeyPage(ctx context.Context, params json.RawMessage) interface{} {
	return m.executeWith(ctx, params, new(protocol.UpdateKeyPage))
}

// ExecuteWriteData submits a WriteData transaction.
func (m *JrpcMethods) ExecuteWriteData(ctx context.Context, params json.RawMessage) interface{} {
	return m.executeWith(ctx, params, new(protocol.WriteData))
}

// ExecuteWriteDataTo submits a WriteDataTo transaction.
func (m *JrpcMethods) ExecuteWriteDataTo(ctx context.Context, params json.RawMessage) interface{} {
	return m.executeWith(ctx, params, new(protocol.WriteDataTo))
}
