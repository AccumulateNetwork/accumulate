// Copyright 2022 The Accumulate Authors
//
// Use of this source code is governed by an MIT-style
// license that can be found in the LICENSE file or at
// https://opensource.org/licenses/MIT.

package api

// GENERATED BY go run ./tools/cmd/gen-types. DO NOT EDIT.

//lint:file-ignore S1001,S1002,S1008,SA4013 generated code

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"math/big"
	"strings"
	"time"

	"gitlab.com/accumulatenetwork/accumulate/config"
	"gitlab.com/accumulatenetwork/accumulate/internal/api/v2/query"
	"gitlab.com/accumulatenetwork/accumulate/internal/core"
	errors2 "gitlab.com/accumulatenetwork/accumulate/pkg/errors"
	"gitlab.com/accumulatenetwork/accumulate/pkg/types/encoding"
	"gitlab.com/accumulatenetwork/accumulate/pkg/url"
	"gitlab.com/accumulatenetwork/accumulate/protocol"
)

type ChainEntry struct {
	Height uint64      `json:"height" form:"height" query:"height" validate:"required"`
	Entry  []byte      `json:"entry,omitempty" form:"entry" query:"entry" validate:"required"`
	State  [][]byte    `json:"state,omitempty" form:"state" query:"state" validate:"required"`
	Value  interface{} `json:"value,omitempty" form:"value" query:"value" validate:"required"`
}

type ChainIdQuery struct {
	ChainId []byte `json:"chainId,omitempty" form:"chainId" query:"chainId" validate:"required"`
}

type ChainQueryResponse struct {
	Type      string                `json:"type,omitempty" form:"type" query:"type" validate:"required"`
	MainChain *MerkleState          `json:"mainChain,omitempty" form:"mainChain" query:"mainChain" validate:"required"`
	Chains    []query.ChainState    `json:"chains,omitempty" form:"chains" query:"chains" validate:"required"`
	Data      interface{}           `json:"data,omitempty" form:"data" query:"data" validate:"required"`
	ChainId   []byte                `json:"chainId,omitempty" form:"chainId" query:"chainId" validate:"required"`
	Receipt   *query.GeneralReceipt `json:"receipt,omitempty" form:"receipt" query:"receipt" validate:"required"`
}

type DataEntryQuery struct {
	fieldsSet []bool
	Url       *url.URL `json:"url,omitempty" form:"url" query:"url" validate:"required"`
	EntryHash [32]byte `json:"entryHash,omitempty" form:"entryHash" query:"entryHash"`
	extraData []byte
}

type DataEntryQueryResponse struct {
	fieldsSet []bool
	EntryHash [32]byte           `json:"entryHash,omitempty" form:"entryHash" query:"entryHash" validate:"required"`
	Entry     protocol.DataEntry `json:"entry,omitempty" form:"entry" query:"entry" validate:"required"`
	TxId      *url.TxID          `json:"txId,omitempty" form:"txId" query:"txId" validate:"required"`
	extraData []byte
}

type DataEntrySetQuery struct {
	UrlQuery
	QueryPagination
	QueryOptions
}

type DescriptionResponse struct {
	PartitionId   string             `json:"partitionId,omitempty" form:"partitionId" query:"partitionId" validate:"required"`
	NetworkType   config.NetworkType `json:"networkType,omitempty" form:"networkType" query:"networkType" validate:"required"`
	Network       config.Network     `json:"network,omitempty" form:"network" query:"network" validate:"required"`
	NetworkAnchor [32]byte           `json:"networkAnchor,omitempty" form:"networkAnchor" query:"networkAnchor" validate:"required"`
	Values        core.GlobalValues  `json:"values,omitempty" form:"values" query:"values" validate:"required"`
	Error         *errors2.Error     `json:"error,omitempty" form:"error" query:"error" validate:"required"`
}

type DirectoryQuery struct {
	UrlQuery
	QueryPagination
	QueryOptions
}

type ExecuteRequest struct {
	Envelope  *protocol.Envelope `json:"envelope,omitempty" form:"envelope" query:"envelope" validate:"required"`
	CheckOnly bool               `json:"checkOnly,omitempty" form:"checkOnly" query:"checkOnly"`
}

type GeneralQuery struct {
	UrlQuery
	QueryOptions
}

type KeyPage struct {
	Version uint64 `json:"version,omitempty" form:"version" query:"version"`
}

type KeyPageIndexQuery struct {
	UrlQuery
	Key []byte `json:"key,omitempty" form:"key" query:"key" validate:"required"`
}

type MajorBlocksQuery struct {
	UrlQuery
	QueryPagination
}

type MajorQueryResponse struct {

	// MajorBlockIndex is the index of the major block..
	MajorBlockIndex uint64 `json:"majorBlockIndex,omitempty" form:"majorBlockIndex" query:"majorBlockIndex" validate:"required"`
	// MajorBlockTime is the start time of the major block..
	MajorBlockTime *time.Time    `json:"majorBlockTime,omitempty" form:"majorBlockTime" query:"majorBlockTime" validate:"required"`
	MinorBlocks    []*MinorBlock `json:"minorBlocks,omitempty" form:"minorBlocks" query:"minorBlocks" validate:"required"`
}

type MerkleState struct {
	Height uint64   `json:"height,omitempty" form:"height" query:"height" validate:"required"`
	Roots  [][]byte `json:"roots,omitempty" form:"roots" query:"roots" validate:"required"`
}

type MetricsQuery struct {
	Metric   string        `json:"metric,omitempty" form:"metric" query:"metric" validate:"required"`
	Duration time.Duration `json:"duration,omitempty" form:"duration" query:"duration" validate:"required"`
}

type MetricsResponse struct {
	Value interface{} `json:"value,omitempty" form:"value" query:"value" validate:"required"`
}

type MinorBlock struct {

	// BlockIndex is the index of the block. Only include when indexing the root anchor chain.
	BlockIndex uint64 `json:"blockIndex,omitempty" form:"blockIndex" query:"blockIndex" validate:"required"`
	// BlockTime is the start time of the block..
	BlockTime *time.Time `json:"blockTime,omitempty" form:"blockTime" query:"blockTime" validate:"required"`
}

type MinorBlocksQuery struct {
	UrlQuery
	QueryPagination
	TxFetchMode     query.TxFetchMode     `json:"txFetchMode,omitempty" form:"txFetchMode" query:"txFetchMode"`
	BlockFilterMode query.BlockFilterMode `json:"blockFilterMode,omitempty" form:"blockFilterMode" query:"blockFilterMode"`
}

type MinorQueryResponse struct {
	MinorBlock
	// TxCount shows how many transactions this block contains.
	TxCount      uint64                      `json:"txCount,omitempty" form:"txCount" query:"txCount" validate:"required"`
	TxIds        [][]byte                    `json:"txIds,omitempty" form:"txIds" query:"txIds" validate:"required"`
	Transactions []*TransactionQueryResponse `json:"transactions,omitempty" form:"transactions" query:"transactions" validate:"required"`
}

type MultiResponse struct {
	Type       string        `json:"type,omitempty" form:"type" query:"type" validate:"required"`
	Items      []interface{} `json:"items,omitempty" form:"items" query:"items" validate:"required"`
	Start      uint64        `json:"start" form:"start" query:"start" validate:"required"`
	Count      uint64        `json:"count" form:"count" query:"count" validate:"required"`
	Total      uint64        `json:"total" form:"total" query:"total" validate:"required"`
	OtherItems []interface{} `json:"otherItems,omitempty" form:"otherItems" query:"otherItems" validate:"required"`
}

type QueryOptions struct {
	Expand  bool   `json:"expand,omitempty" form:"expand" query:"expand"`
	Height  uint64 `json:"height,omitempty" form:"height" query:"height"`
	Scratch bool   `json:"scratch,omitempty" form:"scratch" query:"scratch"`
	Prove   bool   `json:"prove,omitempty" form:"prove" query:"prove"`
}

type QueryPagination struct {
	Start uint64 `json:"start,omitempty" form:"start" query:"start"`
	Count uint64 `json:"count,omitempty" form:"count" query:"count"`
}

type SignatureBook struct {
	Authority *url.URL         `json:"authority,omitempty" form:"authority" query:"authority" validate:"required"`
	Pages     []*SignaturePage `json:"pages,omitempty" form:"pages" query:"pages" validate:"required"`
}

type SignaturePage struct {
	Signer     SignerMetadata       `json:"signer,omitempty" form:"signer" query:"signer" validate:"required"`
	Signatures []protocol.Signature `json:"signatures,omitempty" form:"signatures" query:"signatures" validate:"required"`
}

type Signer struct {
	PublicKey     []byte                 `json:"publicKey,omitempty" form:"publicKey" query:"publicKey" validate:"required"`
	Timestamp     uint64                 `json:"timestamp,omitempty" form:"timestamp" query:"timestamp" validate:"required"`
	Url           *url.URL               `json:"url,omitempty" form:"url" query:"url" validate:"required"`
	Version       uint64                 `json:"version,omitempty" form:"version" query:"version"`
	SignatureType protocol.SignatureType `json:"signatureType,omitempty" form:"signatureType" query:"signatureType"`
	// UseSimpleHash tells the API to use the signature's simple metadata hash as the initiator hash instead of its Merkle hash.
	UseSimpleHash bool `json:"useSimpleHash,omitempty" form:"useSimpleHash" query:"useSimpleHash"`
}

type SignerMetadata struct {
	Type            protocol.AccountType `json:"type,omitempty" form:"type" query:"type" validate:"required"`
	Url             *url.URL             `json:"url,omitempty" form:"url" query:"url" validate:"required"`
	AcceptThreshold uint64               `json:"acceptThreshold,omitempty" form:"acceptThreshold" query:"acceptThreshold" validate:"required"`
}

type StatusResponse struct {
	Ok                        bool      `json:"ok,omitempty" form:"ok" query:"ok" validate:"required"`
	BvnHeight                 int64     `json:"bvnHeight,omitempty" form:"bvnHeight" query:"bvnHeight" validate:"required"`
	DnHeight                  int64     `json:"dnHeight,omitempty" form:"dnHeight" query:"dnHeight" validate:"required"`
	BvnTime                   time.Time `json:"bvnTime,omitempty" form:"bvnTime" query:"bvnTime" validate:"required"`
	DnTime                    time.Time `json:"dnTime,omitempty" form:"dnTime" query:"dnTime" validate:"required"`
	LastDirectoryAnchorHeight uint64    `json:"lastDirectoryAnchorHeight,omitempty" form:"lastDirectoryAnchorHeight" query:"lastDirectoryAnchorHeight" validate:"required"`
	BvnRootHash               [32]byte  `json:"bvnRootHash,omitempty" form:"bvnRootHash" query:"bvnRootHash" validate:"required"`
	DnRootHash                [32]byte  `json:"dnRootHash,omitempty" form:"dnRootHash" query:"dnRootHash" validate:"required"`
	BvnBptHash                [32]byte  `json:"bvnBptHash,omitempty" form:"bvnBptHash" query:"bvnBptHash" validate:"required"`
	DnBptHash                 [32]byte  `json:"dnBptHash,omitempty" form:"dnBptHash" query:"dnBptHash" validate:"required"`
}

type SyntheticTransactionRequest struct {
	Source         *url.URL `json:"source,omitempty" form:"source" query:"source" validate:"required"`
	Destination    *url.URL `json:"destination,omitempty" form:"destination" query:"destination" validate:"required"`
	SequenceNumber uint64   `json:"sequenceNumber,omitempty" form:"sequenceNumber" query:"sequenceNumber"`
	Anchor         bool     `json:"anchor,omitempty" form:"anchor" query:"anchor"`
}

type TokenDeposit struct {
	Url    *url.URL `json:"url,omitempty" form:"url" query:"url" validate:"required"`
	Amount big.Int  `json:"amount,omitempty" form:"amount" query:"amount" validate:"required"`
	Txid   []byte   `json:"txid,omitempty" form:"txid" query:"txid" validate:"required"`
}

type TokenSend struct {
	From *url.URL       `json:"from,omitempty" form:"from" query:"from" validate:"required"`
	To   []TokenDeposit `json:"to,omitempty" form:"to" query:"to" validate:"required"`
}

type TransactionQueryResponse struct {
	Type            string                      `json:"type,omitempty" form:"type" query:"type" validate:"required"`
	MainChain       *MerkleState                `json:"mainChain,omitempty" form:"mainChain" query:"mainChain" validate:"required"`
	Data            interface{}                 `json:"data,omitempty" form:"data" query:"data" validate:"required"`
	Origin          *url.URL                    `json:"origin,omitempty" form:"origin" query:"origin" validate:"required"`
	TransactionHash []byte                      `json:"transactionHash,omitempty" form:"transactionHash" query:"transactionHash" validate:"required"`
	Txid            *url.TxID                   `json:"txid,omitempty" form:"txid" query:"txid" validate:"required"`
	Transaction     *protocol.Transaction       `json:"transaction,omitempty" form:"transaction" query:"transaction" validate:"required"`
	Signatures      []protocol.Signature        `json:"signatures,omitempty" form:"signatures" query:"signatures" validate:"required"`
	Status          *protocol.TransactionStatus `json:"status,omitempty" form:"status" query:"status" validate:"required"`
	Produced        []*url.TxID                 `json:"produced,omitempty" form:"produced" query:"produced" validate:"required"`
	Receipts        []*query.TxReceipt          `json:"receipts,omitempty" form:"receipts" query:"receipts" validate:"required"`
	SignatureBooks  []*SignatureBook            `json:"signatureBooks,omitempty" form:"signatureBooks" query:"signatureBooks" validate:"required"`
	PartitionID     string                      `json:"partitionID,omitempty" form:"partitionID" query:"partitionID" validate:"required"`
}

type TxHistoryQuery struct {
	UrlQuery
	QueryPagination
	Scratch bool `json:"scratch,omitempty" form:"scratch" query:"scratch"`
}

type TxRequest struct {
	CheckOnly  bool     `json:"checkOnly,omitempty" form:"checkOnly" query:"checkOnly"`
	IsEnvelope bool     `json:"isEnvelope,omitempty" form:"isEnvelope" query:"isEnvelope"`
	Origin     *url.URL `json:"origin,omitempty" form:"origin" query:"origin" validate:"required"`
	Signer     Signer   `json:"signer,omitempty" form:"signer" query:"signer" validate:"required"`
	Signature  []byte   `json:"signature,omitempty" form:"signature" query:"signature" validate:"required"`
	// KeyPage is deprecated.
	KeyPage  KeyPage     `json:"keyPage,omitempty" form:"keyPage" query:"keyPage" validate:"required"`
	TxHash   []byte      `json:"txHash,omitempty" form:"txHash" query:"txHash"`
	Payload  interface{} `json:"payload,omitempty" form:"payload" query:"payload" validate:"required"`
	Memo     string      `json:"memo,omitempty" form:"memo" query:"memo"`
	Metadata []byte      `json:"metadata,omitempty" form:"metadata" query:"metadata"`
}

type TxResponse struct {
	TransactionHash []byte      `json:"transactionHash,omitempty" form:"transactionHash" query:"transactionHash" validate:"required"`
	Txid            *url.TxID   `json:"txid,omitempty" form:"txid" query:"txid" validate:"required"`
	SignatureHashes [][]byte    `json:"signatureHashes,omitempty" form:"signatureHashes" query:"signatureHashes" validate:"required"`
	SimpleHash      []byte      `json:"simpleHash,omitempty" form:"simpleHash" query:"simpleHash" validate:"required"`
	Code            uint64      `json:"code,omitempty" form:"code" query:"code" validate:"required"`
	Message         string      `json:"message,omitempty" form:"message" query:"message" validate:"required"`
	Delivered       bool        `json:"delivered,omitempty" form:"delivered" query:"delivered" validate:"required"`
	Result          interface{} `json:"result,omitempty" form:"result" query:"result" validate:"required"`
}

type TxnQuery struct {
	QueryOptions
	Txid    []byte        `json:"txid,omitempty" form:"txid" query:"txid"`
	TxIdUrl *url.TxID     `json:"txIdUrl,omitempty" form:"txIdUrl" query:"txIdUrl"`
	Wait    time.Duration `json:"wait,omitempty" form:"wait" query:"wait"`
	// IgnorePending tells QueryTx to ignore pending transactions.
	IgnorePending bool `json:"ignorePending,omitempty" form:"ignorePending" query:"ignorePending"`
}

type UrlQuery struct {
	Url *url.URL `json:"url,omitempty" form:"url" query:"url" validate:"required"`
}

type VersionResponse struct {
	Version        string `json:"version,omitempty" form:"version" query:"version" validate:"required"`
	Commit         string `json:"commit,omitempty" form:"commit" query:"commit" validate:"required"`
	VersionIsKnown bool   `json:"versionIsKnown,omitempty" form:"versionIsKnown" query:"versionIsKnown" validate:"required"`
	IsTestNet      bool   `json:"isTestNet,omitempty" form:"isTestNet" query:"isTestNet" validate:"required"`
}

func (v *DataEntryQuery) Copy() *DataEntryQuery {
	u := new(DataEntryQuery)

	if v.Url != nil {
		u.Url = v.Url
	}
	u.EntryHash = v.EntryHash

	return u
}

func (v *DataEntryQuery) CopyAsInterface() interface{} { return v.Copy() }

func (v *DataEntryQueryResponse) Copy() *DataEntryQueryResponse {
	u := new(DataEntryQueryResponse)

	u.EntryHash = v.EntryHash
	if v.Entry != nil {
		u.Entry = protocol.CopyDataEntry(v.Entry)
	}
	if v.TxId != nil {
		u.TxId = v.TxId
	}

	return u
}

func (v *DataEntryQueryResponse) CopyAsInterface() interface{} { return v.Copy() }

func (v *DataEntryQuery) Equal(u *DataEntryQuery) bool {
	switch {
	case v.Url == u.Url:
		// equal
	case v.Url == nil || u.Url == nil:
		return false
	case !((v.Url).Equal(u.Url)):
		return false
	}
	if !(v.EntryHash == u.EntryHash) {
		return false
	}

	return true
}

func (v *DataEntryQueryResponse) Equal(u *DataEntryQueryResponse) bool {
	if !(v.EntryHash == u.EntryHash) {
		return false
	}
	if !(protocol.EqualDataEntry(v.Entry, u.Entry)) {
		return false
	}
	switch {
	case v.TxId == u.TxId:
		// equal
	case v.TxId == nil || u.TxId == nil:
		return false
	case !((v.TxId).Equal(u.TxId)):
		return false
	}

	return true
}

var fieldNames_DataEntryQuery = []string{
	1: "Url",
	2: "EntryHash",
}

func (v *DataEntryQuery) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	if !(v.Url == nil) {
		writer.WriteUrl(1, v.Url)
	}
	if !(v.EntryHash == ([32]byte{})) {
		writer.WriteHash(2, &v.EntryHash)
	}

	_, _, err := writer.Reset(fieldNames_DataEntryQuery)
	if err != nil {
		return nil, encoding.Error{E: err}
	}
	buffer.Write(v.extraData)
	return buffer.Bytes(), nil
}

func (v *DataEntryQuery) IsValid() error {
	var errs []string

	if len(v.fieldsSet) > 1 && !v.fieldsSet[1] {
		errs = append(errs, "field Url is missing")
	} else if v.Url == nil {
		errs = append(errs, "field Url is not set")
	}

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

var fieldNames_DataEntryQueryResponse = []string{
	1: "EntryHash",
	2: "Entry",
	3: "TxId",
}

func (v *DataEntryQueryResponse) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	if !(v.EntryHash == ([32]byte{})) {
		writer.WriteHash(1, &v.EntryHash)
	}
	if !(v.Entry == nil) {
		writer.WriteValue(2, v.Entry.MarshalBinary)
	}
	if !(v.TxId == nil) {
		writer.WriteTxid(3, v.TxId)
	}

	_, _, err := writer.Reset(fieldNames_DataEntryQueryResponse)
	if err != nil {
		return nil, encoding.Error{E: err}
	}
	buffer.Write(v.extraData)
	return buffer.Bytes(), nil
}

func (v *DataEntryQueryResponse) IsValid() error {
	var errs []string

	if len(v.fieldsSet) > 1 && !v.fieldsSet[1] {
		errs = append(errs, "field EntryHash is missing")
	} else if v.EntryHash == ([32]byte{}) {
		errs = append(errs, "field EntryHash is not set")
	}
	if len(v.fieldsSet) > 2 && !v.fieldsSet[2] {
		errs = append(errs, "field Entry is missing")
	} else if v.Entry == nil {
		errs = append(errs, "field Entry is not set")
	}
	if len(v.fieldsSet) > 3 && !v.fieldsSet[3] {
		errs = append(errs, "field TxId is missing")
	} else if v.TxId == nil {
		errs = append(errs, "field TxId is not set")
	}

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

func (v *DataEntryQuery) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *DataEntryQuery) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	if x, ok := reader.ReadUrl(1); ok {
		v.Url = x
	}
	if x, ok := reader.ReadHash(2); ok {
		v.EntryHash = *x
	}

	seen, err := reader.Reset(fieldNames_DataEntryQuery)
	if err != nil {
		return encoding.Error{E: err}
	}
	v.fieldsSet = seen
	v.extraData, err = reader.ReadAll()
	if err != nil {
		return encoding.Error{E: err}
	}
	return nil
}

func (v *DataEntryQueryResponse) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *DataEntryQueryResponse) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	if x, ok := reader.ReadHash(1); ok {
		v.EntryHash = *x
	}
	reader.ReadValue(2, func(b []byte) error {
		x, err := protocol.UnmarshalDataEntry(b)
		if err == nil {
			v.Entry = x
		}
		return err
	})
	if x, ok := reader.ReadTxid(3); ok {
		v.TxId = x
	}

	seen, err := reader.Reset(fieldNames_DataEntryQueryResponse)
	if err != nil {
		return encoding.Error{E: err}
	}
	v.fieldsSet = seen
	v.extraData, err = reader.ReadAll()
	if err != nil {
		return encoding.Error{E: err}
	}
	return nil
}

func (v *ChainEntry) MarshalJSON() ([]byte, error) {
	u := struct {
		Height uint64                     `json:"height"`
		Entry  *string                    `json:"entry,omitempty"`
		State  encoding.JsonList[*string] `json:"state,omitempty"`
		Value  interface{}                `json:"value,omitempty"`
	}{}
	u.Height = v.Height
	u.Entry = encoding.BytesToJSON(v.Entry)
	u.State = make(encoding.JsonList[*string], len(v.State))
	for i, x := range v.State {
		u.State[i] = encoding.BytesToJSON(x)
	}
	u.Value = encoding.AnyToJSON(v.Value)
	return json.Marshal(&u)
}

func (v *ChainIdQuery) MarshalJSON() ([]byte, error) {
	u := struct {
		ChainId *string `json:"chainId,omitempty"`
	}{}
	u.ChainId = encoding.BytesToJSON(v.ChainId)
	return json.Marshal(&u)
}

func (v *ChainQueryResponse) MarshalJSON() ([]byte, error) {
	u := struct {
		Type        string                              `json:"type,omitempty"`
		MainChain   *MerkleState                        `json:"mainChain,omitempty"`
		MerkleState *MerkleState                        `json:"merkleState,omitempty"`
		Chains      encoding.JsonList[query.ChainState] `json:"chains,omitempty"`
		Data        interface{}                         `json:"data,omitempty"`
		ChainId     *string                             `json:"chainId,omitempty"`
		Receipt     *query.GeneralReceipt               `json:"receipt,omitempty"`
	}{}
	u.Type = v.Type
	u.MainChain = v.MainChain
	u.MerkleState = v.MainChain
	u.Chains = v.Chains
	u.Data = encoding.AnyToJSON(v.Data)
	u.ChainId = encoding.BytesToJSON(v.ChainId)
	u.Receipt = v.Receipt
	return json.Marshal(&u)
}

func (v *DataEntryQuery) MarshalJSON() ([]byte, error) {
	u := struct {
		Url       *url.URL `json:"url,omitempty"`
		EntryHash string   `json:"entryHash,omitempty"`
	}{}
	u.Url = v.Url
	u.EntryHash = encoding.ChainToJSON(v.EntryHash)
	return json.Marshal(&u)
}

func (v *DataEntryQueryResponse) MarshalJSON() ([]byte, error) {
	u := struct {
		EntryHash string                                         `json:"entryHash,omitempty"`
		Entry     encoding.JsonUnmarshalWith[protocol.DataEntry] `json:"entry,omitempty"`
		TxId      *url.TxID                                      `json:"txId,omitempty"`
	}{}
	u.EntryHash = encoding.ChainToJSON(v.EntryHash)
	u.Entry = encoding.JsonUnmarshalWith[protocol.DataEntry]{Value: v.Entry, Func: protocol.UnmarshalDataEntryJSON}
	u.TxId = v.TxId
	return json.Marshal(&u)
}

func (v *DataEntrySetQuery) MarshalJSON() ([]byte, error) {
	u := struct {
		Url          *url.URL `json:"url,omitempty"`
		Start        uint64   `json:"start,omitempty"`
		Count        uint64   `json:"count,omitempty"`
		Expand       bool     `json:"expand,omitempty"`
		ExpandChains bool     `json:"expandChains,omitempty"`
		Height       uint64   `json:"height,omitempty"`
		Scratch      bool     `json:"scratch,omitempty"`
		Prove        bool     `json:"prove,omitempty"`
	}{}
	u.Url = v.UrlQuery.Url
	u.Start = v.QueryPagination.Start
	u.Count = v.QueryPagination.Count
	u.Expand = v.QueryOptions.Expand
	u.ExpandChains = v.QueryOptions.Expand
	u.Height = v.QueryOptions.Height
	u.Scratch = v.QueryOptions.Scratch
	u.Prove = v.QueryOptions.Prove
	return json.Marshal(&u)
}

func (v *DescriptionResponse) MarshalJSON() ([]byte, error) {
	u := struct {
		PartitionId   string             `json:"partitionId,omitempty"`
		NetworkType   config.NetworkType `json:"networkType,omitempty"`
		Network       config.Network     `json:"network,omitempty"`
		NetworkAnchor string             `json:"networkAnchor,omitempty"`
		Values        core.GlobalValues  `json:"values,omitempty"`
		Error         *errors2.Error     `json:"error,omitempty"`
	}{}
	u.PartitionId = v.PartitionId
	u.NetworkType = v.NetworkType
	u.Network = v.Network
	u.NetworkAnchor = encoding.ChainToJSON(v.NetworkAnchor)
	u.Values = v.Values
	u.Error = v.Error
	return json.Marshal(&u)
}

func (v *DirectoryQuery) MarshalJSON() ([]byte, error) {
	u := struct {
		Url          *url.URL `json:"url,omitempty"`
		Start        uint64   `json:"start,omitempty"`
		Count        uint64   `json:"count,omitempty"`
		Expand       bool     `json:"expand,omitempty"`
		ExpandChains bool     `json:"expandChains,omitempty"`
		Height       uint64   `json:"height,omitempty"`
		Scratch      bool     `json:"scratch,omitempty"`
		Prove        bool     `json:"prove,omitempty"`
	}{}
	u.Url = v.UrlQuery.Url
	u.Start = v.QueryPagination.Start
	u.Count = v.QueryPagination.Count
	u.Expand = v.QueryOptions.Expand
	u.ExpandChains = v.QueryOptions.Expand
	u.Height = v.QueryOptions.Height
	u.Scratch = v.QueryOptions.Scratch
	u.Prove = v.QueryOptions.Prove
	return json.Marshal(&u)
}

func (v *GeneralQuery) MarshalJSON() ([]byte, error) {
	u := struct {
		Url          *url.URL `json:"url,omitempty"`
		Expand       bool     `json:"expand,omitempty"`
		ExpandChains bool     `json:"expandChains,omitempty"`
		Height       uint64   `json:"height,omitempty"`
		Scratch      bool     `json:"scratch,omitempty"`
		Prove        bool     `json:"prove,omitempty"`
	}{}
	u.Url = v.UrlQuery.Url
	u.Expand = v.QueryOptions.Expand
	u.ExpandChains = v.QueryOptions.Expand
	u.Height = v.QueryOptions.Height
	u.Scratch = v.QueryOptions.Scratch
	u.Prove = v.QueryOptions.Prove
	return json.Marshal(&u)
}

func (v *KeyPage) MarshalJSON() ([]byte, error) {
	u := struct {
		Version uint64 `json:"version,omitempty"`
		Height  uint64 `json:"height,omitempty"`
	}{}
	u.Version = v.Version
	u.Height = v.Version
	return json.Marshal(&u)
}

func (v *KeyPageIndexQuery) MarshalJSON() ([]byte, error) {
	u := struct {
		Url *url.URL `json:"url,omitempty"`
		Key *string  `json:"key,omitempty"`
	}{}
	u.Url = v.UrlQuery.Url
	u.Key = encoding.BytesToJSON(v.Key)
	return json.Marshal(&u)
}

func (v *MajorBlocksQuery) MarshalJSON() ([]byte, error) {
	u := struct {
		Url   *url.URL `json:"url,omitempty"`
		Start uint64   `json:"start,omitempty"`
		Count uint64   `json:"count,omitempty"`
	}{}
	u.Url = v.UrlQuery.Url
	u.Start = v.QueryPagination.Start
	u.Count = v.QueryPagination.Count
	return json.Marshal(&u)
}

func (v *MajorQueryResponse) MarshalJSON() ([]byte, error) {
	u := struct {
		MajorBlockIndex uint64                         `json:"majorBlockIndex,omitempty"`
		MajorBlockTime  *time.Time                     `json:"majorBlockTime,omitempty"`
		MinorBlocks     encoding.JsonList[*MinorBlock] `json:"minorBlocks,omitempty"`
	}{}
	u.MajorBlockIndex = v.MajorBlockIndex
	u.MajorBlockTime = v.MajorBlockTime
	u.MinorBlocks = v.MinorBlocks
	return json.Marshal(&u)
}

func (v *MerkleState) MarshalJSON() ([]byte, error) {
	u := struct {
		Height uint64                     `json:"height,omitempty"`
		Count  uint64                     `json:"count,omitempty"`
		Roots  encoding.JsonList[*string] `json:"roots,omitempty"`
	}{}
	u.Height = v.Height
	u.Count = v.Height
	u.Roots = make(encoding.JsonList[*string], len(v.Roots))
	for i, x := range v.Roots {
		u.Roots[i] = encoding.BytesToJSON(x)
	}
	return json.Marshal(&u)
}

func (v *MetricsQuery) MarshalJSON() ([]byte, error) {
	u := struct {
		Metric   string      `json:"metric,omitempty"`
		Duration interface{} `json:"duration,omitempty"`
	}{}
	u.Metric = v.Metric
	u.Duration = encoding.DurationToJSON(v.Duration)
	return json.Marshal(&u)
}

func (v *MetricsResponse) MarshalJSON() ([]byte, error) {
	u := struct {
		Value interface{} `json:"value,omitempty"`
	}{}
	u.Value = encoding.AnyToJSON(v.Value)
	return json.Marshal(&u)
}

func (v *MinorBlocksQuery) MarshalJSON() ([]byte, error) {
	u := struct {
		Url             *url.URL              `json:"url,omitempty"`
		Start           uint64                `json:"start,omitempty"`
		Count           uint64                `json:"count,omitempty"`
		TxFetchMode     query.TxFetchMode     `json:"txFetchMode,omitempty"`
		BlockFilterMode query.BlockFilterMode `json:"blockFilterMode,omitempty"`
	}{}
	u.Url = v.UrlQuery.Url
	u.Start = v.QueryPagination.Start
	u.Count = v.QueryPagination.Count
	u.TxFetchMode = v.TxFetchMode
	u.BlockFilterMode = v.BlockFilterMode
	return json.Marshal(&u)
}

func (v *MinorQueryResponse) MarshalJSON() ([]byte, error) {
	u := struct {
		BlockIndex   uint64                                       `json:"blockIndex,omitempty"`
		BlockTime    *time.Time                                   `json:"blockTime,omitempty"`
		TxCount      uint64                                       `json:"txCount,omitempty"`
		TxIds        encoding.JsonList[*string]                   `json:"txIds,omitempty"`
		Transactions encoding.JsonList[*TransactionQueryResponse] `json:"transactions,omitempty"`
	}{}
	u.BlockIndex = v.MinorBlock.BlockIndex
	u.BlockTime = v.MinorBlock.BlockTime
	u.TxCount = v.TxCount
	u.TxIds = make(encoding.JsonList[*string], len(v.TxIds))
	for i, x := range v.TxIds {
		u.TxIds[i] = encoding.BytesToJSON(x)
	}
	u.Transactions = v.Transactions
	return json.Marshal(&u)
}

func (v *MultiResponse) MarshalJSON() ([]byte, error) {
	u := struct {
		Type       string                         `json:"type,omitempty"`
		Items      encoding.JsonList[interface{}] `json:"items,omitempty"`
		Start      uint64                         `json:"start"`
		Count      uint64                         `json:"count"`
		Total      uint64                         `json:"total"`
		OtherItems encoding.JsonList[interface{}] `json:"otherItems,omitempty"`
	}{}
	u.Type = v.Type
	u.Items = make(encoding.JsonList[interface{}], len(v.Items))
	for i, x := range v.Items {
		u.Items[i] = encoding.AnyToJSON(x)
	}
	u.Start = v.Start
	u.Count = v.Count
	u.Total = v.Total
	u.OtherItems = make(encoding.JsonList[interface{}], len(v.OtherItems))
	for i, x := range v.OtherItems {
		u.OtherItems[i] = encoding.AnyToJSON(x)
	}
	return json.Marshal(&u)
}

func (v *QueryOptions) MarshalJSON() ([]byte, error) {
	u := struct {
		Expand       bool   `json:"expand,omitempty"`
		ExpandChains bool   `json:"expandChains,omitempty"`
		Height       uint64 `json:"height,omitempty"`
		Scratch      bool   `json:"scratch,omitempty"`
		Prove        bool   `json:"prove,omitempty"`
	}{}
	u.Expand = v.Expand
	u.ExpandChains = v.Expand
	u.Height = v.Height
	u.Scratch = v.Scratch
	u.Prove = v.Prove
	return json.Marshal(&u)
}

func (v *SignatureBook) MarshalJSON() ([]byte, error) {
	u := struct {
		Authority *url.URL                          `json:"authority,omitempty"`
		Pages     encoding.JsonList[*SignaturePage] `json:"pages,omitempty"`
	}{}
	u.Authority = v.Authority
	u.Pages = v.Pages
	return json.Marshal(&u)
}

func (v *SignaturePage) MarshalJSON() ([]byte, error) {
	u := struct {
		Signer     SignerMetadata                                     `json:"signer,omitempty"`
		Signatures encoding.JsonUnmarshalListWith[protocol.Signature] `json:"signatures,omitempty"`
	}{}
	u.Signer = v.Signer
	u.Signatures = encoding.JsonUnmarshalListWith[protocol.Signature]{Value: v.Signatures, Func: protocol.UnmarshalSignatureJSON}
	return json.Marshal(&u)
}

func (v *Signer) MarshalJSON() ([]byte, error) {
	u := struct {
		PublicKey     *string                `json:"publicKey,omitempty"`
		Timestamp     uint64                 `json:"timestamp,omitempty"`
		Nonce         uint64                 `json:"nonce,omitempty"`
		Url           *url.URL               `json:"url,omitempty"`
		Version       uint64                 `json:"version,omitempty"`
		SignatureType protocol.SignatureType `json:"signatureType,omitempty"`
		UseSimpleHash bool                   `json:"useSimpleHash,omitempty"`
	}{}
	u.PublicKey = encoding.BytesToJSON(v.PublicKey)
	u.Timestamp = v.Timestamp
	u.Nonce = v.Timestamp
	u.Url = v.Url
	u.Version = v.Version
	u.SignatureType = v.SignatureType
	u.UseSimpleHash = v.UseSimpleHash
	return json.Marshal(&u)
}

func (v *StatusResponse) MarshalJSON() ([]byte, error) {
	u := struct {
		Ok                        bool      `json:"ok,omitempty"`
		BvnHeight                 int64     `json:"bvnHeight,omitempty"`
		DnHeight                  int64     `json:"dnHeight,omitempty"`
		BvnTime                   time.Time `json:"bvnTime,omitempty"`
		DnTime                    time.Time `json:"dnTime,omitempty"`
		LastDirectoryAnchorHeight uint64    `json:"lastDirectoryAnchorHeight,omitempty"`
		BvnRootHash               string    `json:"bvnRootHash,omitempty"`
		DnRootHash                string    `json:"dnRootHash,omitempty"`
		BvnBptHash                string    `json:"bvnBptHash,omitempty"`
		DnBptHash                 string    `json:"dnBptHash,omitempty"`
	}{}
	u.Ok = v.Ok
	u.BvnHeight = v.BvnHeight
	u.DnHeight = v.DnHeight
	u.BvnTime = v.BvnTime
	u.DnTime = v.DnTime
	u.LastDirectoryAnchorHeight = v.LastDirectoryAnchorHeight
	u.BvnRootHash = encoding.ChainToJSON(v.BvnRootHash)
	u.DnRootHash = encoding.ChainToJSON(v.DnRootHash)
	u.BvnBptHash = encoding.ChainToJSON(v.BvnBptHash)
	u.DnBptHash = encoding.ChainToJSON(v.DnBptHash)
	return json.Marshal(&u)
}

func (v *TokenDeposit) MarshalJSON() ([]byte, error) {
	u := struct {
		Url    *url.URL `json:"url,omitempty"`
		Amount *string  `json:"amount,omitempty"`
		Txid   *string  `json:"txid,omitempty"`
	}{}
	u.Url = v.Url
	u.Amount = encoding.BigintToJSON(&v.Amount)
	u.Txid = encoding.BytesToJSON(v.Txid)
	return json.Marshal(&u)
}

func (v *TokenSend) MarshalJSON() ([]byte, error) {
	u := struct {
		From *url.URL                        `json:"from,omitempty"`
		To   encoding.JsonList[TokenDeposit] `json:"to,omitempty"`
	}{}
	u.From = v.From
	u.To = v.To
	return json.Marshal(&u)
}

func (v *TransactionQueryResponse) MarshalJSON() ([]byte, error) {
	u := struct {
		Type            string                                             `json:"type,omitempty"`
		MainChain       *MerkleState                                       `json:"mainChain,omitempty"`
		MerkleState     *MerkleState                                       `json:"merkleState,omitempty"`
		Data            interface{}                                        `json:"data,omitempty"`
		Origin          *url.URL                                           `json:"origin,omitempty"`
		Sponsor         *url.URL                                           `json:"sponsor,omitempty"`
		TransactionHash *string                                            `json:"transactionHash,omitempty"`
		Txid            *url.TxID                                          `json:"txid,omitempty"`
		Transaction     *protocol.Transaction                              `json:"transaction,omitempty"`
		Signatures      encoding.JsonUnmarshalListWith[protocol.Signature] `json:"signatures,omitempty"`
		Status          *protocol.TransactionStatus                        `json:"status,omitempty"`
		Produced        encoding.JsonList[*url.TxID]                       `json:"produced,omitempty"`
		SyntheticTxids  encoding.JsonList[*url.TxID]                       `json:"syntheticTxids,omitempty"`
		Receipts        encoding.JsonList[*query.TxReceipt]                `json:"receipts,omitempty"`
		SignatureBooks  encoding.JsonList[*SignatureBook]                  `json:"signatureBooks,omitempty"`
		PartitionID     string                                             `json:"partitionID,omitempty"`
	}{}
	u.Type = v.Type
	u.MainChain = v.MainChain
	u.MerkleState = v.MainChain
	u.Data = encoding.AnyToJSON(v.Data)
	u.Origin = v.Origin
	u.Sponsor = v.Origin
	u.TransactionHash = encoding.BytesToJSON(v.TransactionHash)
	u.Txid = v.Txid
	u.Transaction = v.Transaction
	u.Signatures = encoding.JsonUnmarshalListWith[protocol.Signature]{Value: v.Signatures, Func: protocol.UnmarshalSignatureJSON}
	u.Status = v.Status
	u.Produced = v.Produced
	u.SyntheticTxids = v.Produced
	u.Receipts = v.Receipts
	u.SignatureBooks = v.SignatureBooks
	u.PartitionID = v.PartitionID
	return json.Marshal(&u)
}

func (v *TxHistoryQuery) MarshalJSON() ([]byte, error) {
	u := struct {
		Url     *url.URL `json:"url,omitempty"`
		Start   uint64   `json:"start,omitempty"`
		Count   uint64   `json:"count,omitempty"`
		Scratch bool     `json:"scratch,omitempty"`
	}{}
	u.Url = v.UrlQuery.Url
	u.Start = v.QueryPagination.Start
	u.Count = v.QueryPagination.Count
	u.Scratch = v.Scratch
	return json.Marshal(&u)
}

func (v *TxRequest) MarshalJSON() ([]byte, error) {
	u := struct {
		CheckOnly  bool        `json:"checkOnly,omitempty"`
		IsEnvelope bool        `json:"isEnvelope,omitempty"`
		Origin     *url.URL    `json:"origin,omitempty"`
		Sponsor    *url.URL    `json:"sponsor,omitempty"`
		Signer     Signer      `json:"signer,omitempty"`
		Signature  *string     `json:"signature,omitempty"`
		KeyPage    KeyPage     `json:"keyPage,omitempty"`
		TxHash     *string     `json:"txHash,omitempty"`
		Payload    interface{} `json:"payload,omitempty"`
		Memo       string      `json:"memo,omitempty"`
		Metadata   *string     `json:"metadata,omitempty"`
	}{}
	u.CheckOnly = v.CheckOnly
	u.IsEnvelope = v.IsEnvelope
	u.Origin = v.Origin
	u.Sponsor = v.Origin
	u.Signer = v.Signer
	u.Signature = encoding.BytesToJSON(v.Signature)
	u.KeyPage = v.KeyPage
	u.TxHash = encoding.BytesToJSON(v.TxHash)
	u.Payload = encoding.AnyToJSON(v.Payload)
	u.Memo = v.Memo
	u.Metadata = encoding.BytesToJSON(v.Metadata)
	return json.Marshal(&u)
}

func (v *TxResponse) MarshalJSON() ([]byte, error) {
	u := struct {
		TransactionHash *string                    `json:"transactionHash,omitempty"`
		Txid            *url.TxID                  `json:"txid,omitempty"`
		SignatureHashes encoding.JsonList[*string] `json:"signatureHashes,omitempty"`
		SimpleHash      *string                    `json:"simpleHash,omitempty"`
		Hash            *string                    `json:"hash,omitempty"`
		Code            uint64                     `json:"code,omitempty"`
		Message         string                     `json:"message,omitempty"`
		Delivered       bool                       `json:"delivered,omitempty"`
		Result          interface{}                `json:"result,omitempty"`
	}{}
	u.TransactionHash = encoding.BytesToJSON(v.TransactionHash)
	u.Txid = v.Txid
	u.SignatureHashes = make(encoding.JsonList[*string], len(v.SignatureHashes))
	for i, x := range v.SignatureHashes {
		u.SignatureHashes[i] = encoding.BytesToJSON(x)
	}
	u.SimpleHash = encoding.BytesToJSON(v.SimpleHash)
	u.Hash = encoding.BytesToJSON(v.SimpleHash)
	u.Code = v.Code
	u.Message = v.Message
	u.Delivered = v.Delivered
	u.Result = encoding.AnyToJSON(v.Result)
	return json.Marshal(&u)
}

func (v *TxnQuery) MarshalJSON() ([]byte, error) {
	u := struct {
		Expand        bool        `json:"expand,omitempty"`
		ExpandChains  bool        `json:"expandChains,omitempty"`
		Height        uint64      `json:"height,omitempty"`
		Scratch       bool        `json:"scratch,omitempty"`
		Prove         bool        `json:"prove,omitempty"`
		Txid          *string     `json:"txid,omitempty"`
		TxIdUrl       *url.TxID   `json:"txIdUrl,omitempty"`
		Wait          interface{} `json:"wait,omitempty"`
		IgnorePending bool        `json:"ignorePending,omitempty"`
	}{}
	u.Expand = v.QueryOptions.Expand
	u.ExpandChains = v.QueryOptions.Expand
	u.Height = v.QueryOptions.Height
	u.Scratch = v.QueryOptions.Scratch
	u.Prove = v.QueryOptions.Prove
	u.Txid = encoding.BytesToJSON(v.Txid)
	u.TxIdUrl = v.TxIdUrl
	u.Wait = encoding.DurationToJSON(v.Wait)
	u.IgnorePending = v.IgnorePending
	return json.Marshal(&u)
}

func (v *ChainEntry) UnmarshalJSON(data []byte) error {
	u := struct {
		Height uint64                     `json:"height"`
		Entry  *string                    `json:"entry,omitempty"`
		State  encoding.JsonList[*string] `json:"state,omitempty"`
		Value  interface{}                `json:"value,omitempty"`
	}{}
	u.Height = v.Height
	u.Entry = encoding.BytesToJSON(v.Entry)
	u.State = make(encoding.JsonList[*string], len(v.State))
	for i, x := range v.State {
		u.State[i] = encoding.BytesToJSON(x)
	}
	u.Value = encoding.AnyToJSON(v.Value)
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	v.Height = u.Height
	if x, err := encoding.BytesFromJSON(u.Entry); err != nil {
		return fmt.Errorf("error decoding Entry: %w", err)
	} else {
		v.Entry = x
	}
	v.State = make([][]byte, len(u.State))
	for i, x := range u.State {
		if x, err := encoding.BytesFromJSON(x); err != nil {
			return fmt.Errorf("error decoding State: %w", err)
		} else {
			v.State[i] = x
		}
	}
	if x, err := encoding.AnyFromJSON(u.Value); err != nil {
		return fmt.Errorf("error decoding Value: %w", err)
	} else {
		v.Value = x
	}
	return nil
}

func (v *ChainIdQuery) UnmarshalJSON(data []byte) error {
	u := struct {
		ChainId *string `json:"chainId,omitempty"`
	}{}
	u.ChainId = encoding.BytesToJSON(v.ChainId)
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	if x, err := encoding.BytesFromJSON(u.ChainId); err != nil {
		return fmt.Errorf("error decoding ChainId: %w", err)
	} else {
		v.ChainId = x
	}
	return nil
}

func (v *ChainQueryResponse) UnmarshalJSON(data []byte) error {
	u := struct {
		Type        string                              `json:"type,omitempty"`
		MainChain   *MerkleState                        `json:"mainChain,omitempty"`
		MerkleState *MerkleState                        `json:"merkleState,omitempty"`
		Chains      encoding.JsonList[query.ChainState] `json:"chains,omitempty"`
		Data        interface{}                         `json:"data,omitempty"`
		ChainId     *string                             `json:"chainId,omitempty"`
		Receipt     *query.GeneralReceipt               `json:"receipt,omitempty"`
	}{}
	u.Type = v.Type
	u.MainChain = v.MainChain
	u.MerkleState = v.MainChain
	u.Chains = v.Chains
	u.Data = encoding.AnyToJSON(v.Data)
	u.ChainId = encoding.BytesToJSON(v.ChainId)
	u.Receipt = v.Receipt
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	v.Type = u.Type
	if !(u.MainChain == nil) {
		v.MainChain = u.MainChain
	} else {
		v.MainChain = u.MerkleState
	}
	v.Chains = u.Chains
	if x, err := encoding.AnyFromJSON(u.Data); err != nil {
		return fmt.Errorf("error decoding Data: %w", err)
	} else {
		v.Data = x
	}
	if x, err := encoding.BytesFromJSON(u.ChainId); err != nil {
		return fmt.Errorf("error decoding ChainId: %w", err)
	} else {
		v.ChainId = x
	}
	v.Receipt = u.Receipt
	return nil
}

func (v *DataEntryQuery) UnmarshalJSON(data []byte) error {
	u := struct {
		Url       *url.URL `json:"url,omitempty"`
		EntryHash string   `json:"entryHash,omitempty"`
	}{}
	u.Url = v.Url
	u.EntryHash = encoding.ChainToJSON(v.EntryHash)
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	v.Url = u.Url
	if x, err := encoding.ChainFromJSON(u.EntryHash); err != nil {
		return fmt.Errorf("error decoding EntryHash: %w", err)
	} else {
		v.EntryHash = x
	}
	return nil
}

func (v *DataEntryQueryResponse) UnmarshalJSON(data []byte) error {
	u := struct {
		EntryHash string                                         `json:"entryHash,omitempty"`
		Entry     encoding.JsonUnmarshalWith[protocol.DataEntry] `json:"entry,omitempty"`
		TxId      *url.TxID                                      `json:"txId,omitempty"`
	}{}
	u.EntryHash = encoding.ChainToJSON(v.EntryHash)
	u.Entry = encoding.JsonUnmarshalWith[protocol.DataEntry]{Value: v.Entry, Func: protocol.UnmarshalDataEntryJSON}
	u.TxId = v.TxId
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	if x, err := encoding.ChainFromJSON(u.EntryHash); err != nil {
		return fmt.Errorf("error decoding EntryHash: %w", err)
	} else {
		v.EntryHash = x
	}
	v.Entry = u.Entry.Value

	v.TxId = u.TxId
	return nil
}

func (v *DataEntrySetQuery) UnmarshalJSON(data []byte) error {
	u := struct {
		Url          *url.URL `json:"url,omitempty"`
		Start        uint64   `json:"start,omitempty"`
		Count        uint64   `json:"count,omitempty"`
		Expand       bool     `json:"expand,omitempty"`
		ExpandChains bool     `json:"expandChains,omitempty"`
		Height       uint64   `json:"height,omitempty"`
		Scratch      bool     `json:"scratch,omitempty"`
		Prove        bool     `json:"prove,omitempty"`
	}{}
	u.Url = v.UrlQuery.Url
	u.Start = v.QueryPagination.Start
	u.Count = v.QueryPagination.Count
	u.Expand = v.QueryOptions.Expand
	u.ExpandChains = v.QueryOptions.Expand
	u.Height = v.QueryOptions.Height
	u.Scratch = v.QueryOptions.Scratch
	u.Prove = v.QueryOptions.Prove
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	v.UrlQuery.Url = u.Url
	v.QueryPagination.Start = u.Start
	v.QueryPagination.Count = u.Count
	if !(u.Expand == false) {
		v.QueryOptions.Expand = u.Expand
	} else {
		v.QueryOptions.Expand = u.ExpandChains
	}
	v.QueryOptions.Height = u.Height
	v.QueryOptions.Scratch = u.Scratch
	v.QueryOptions.Prove = u.Prove
	return nil
}

func (v *DescriptionResponse) UnmarshalJSON(data []byte) error {
	u := struct {
		PartitionId   string             `json:"partitionId,omitempty"`
		NetworkType   config.NetworkType `json:"networkType,omitempty"`
		Network       config.Network     `json:"network,omitempty"`
		NetworkAnchor string             `json:"networkAnchor,omitempty"`
		Values        core.GlobalValues  `json:"values,omitempty"`
		Error         *errors2.Error     `json:"error,omitempty"`
	}{}
	u.PartitionId = v.PartitionId
	u.NetworkType = v.NetworkType
	u.Network = v.Network
	u.NetworkAnchor = encoding.ChainToJSON(v.NetworkAnchor)
	u.Values = v.Values
	u.Error = v.Error
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	v.PartitionId = u.PartitionId
	v.NetworkType = u.NetworkType
	v.Network = u.Network
	if x, err := encoding.ChainFromJSON(u.NetworkAnchor); err != nil {
		return fmt.Errorf("error decoding NetworkAnchor: %w", err)
	} else {
		v.NetworkAnchor = x
	}
	v.Values = u.Values
	v.Error = u.Error
	return nil
}

func (v *DirectoryQuery) UnmarshalJSON(data []byte) error {
	u := struct {
		Url          *url.URL `json:"url,omitempty"`
		Start        uint64   `json:"start,omitempty"`
		Count        uint64   `json:"count,omitempty"`
		Expand       bool     `json:"expand,omitempty"`
		ExpandChains bool     `json:"expandChains,omitempty"`
		Height       uint64   `json:"height,omitempty"`
		Scratch      bool     `json:"scratch,omitempty"`
		Prove        bool     `json:"prove,omitempty"`
	}{}
	u.Url = v.UrlQuery.Url
	u.Start = v.QueryPagination.Start
	u.Count = v.QueryPagination.Count
	u.Expand = v.QueryOptions.Expand
	u.ExpandChains = v.QueryOptions.Expand
	u.Height = v.QueryOptions.Height
	u.Scratch = v.QueryOptions.Scratch
	u.Prove = v.QueryOptions.Prove
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	v.UrlQuery.Url = u.Url
	v.QueryPagination.Start = u.Start
	v.QueryPagination.Count = u.Count
	if !(u.Expand == false) {
		v.QueryOptions.Expand = u.Expand
	} else {
		v.QueryOptions.Expand = u.ExpandChains
	}
	v.QueryOptions.Height = u.Height
	v.QueryOptions.Scratch = u.Scratch
	v.QueryOptions.Prove = u.Prove
	return nil
}

func (v *GeneralQuery) UnmarshalJSON(data []byte) error {
	u := struct {
		Url          *url.URL `json:"url,omitempty"`
		Expand       bool     `json:"expand,omitempty"`
		ExpandChains bool     `json:"expandChains,omitempty"`
		Height       uint64   `json:"height,omitempty"`
		Scratch      bool     `json:"scratch,omitempty"`
		Prove        bool     `json:"prove,omitempty"`
	}{}
	u.Url = v.UrlQuery.Url
	u.Expand = v.QueryOptions.Expand
	u.ExpandChains = v.QueryOptions.Expand
	u.Height = v.QueryOptions.Height
	u.Scratch = v.QueryOptions.Scratch
	u.Prove = v.QueryOptions.Prove
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	v.UrlQuery.Url = u.Url
	if !(u.Expand == false) {
		v.QueryOptions.Expand = u.Expand
	} else {
		v.QueryOptions.Expand = u.ExpandChains
	}
	v.QueryOptions.Height = u.Height
	v.QueryOptions.Scratch = u.Scratch
	v.QueryOptions.Prove = u.Prove
	return nil
}

func (v *KeyPage) UnmarshalJSON(data []byte) error {
	u := struct {
		Version uint64 `json:"version,omitempty"`
		Height  uint64 `json:"height,omitempty"`
	}{}
	u.Version = v.Version
	u.Height = v.Version
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	if !(u.Version == 0) {
		v.Version = u.Version
	} else {
		v.Version = u.Height
	}
	return nil
}

func (v *KeyPageIndexQuery) UnmarshalJSON(data []byte) error {
	u := struct {
		Url *url.URL `json:"url,omitempty"`
		Key *string  `json:"key,omitempty"`
	}{}
	u.Url = v.UrlQuery.Url
	u.Key = encoding.BytesToJSON(v.Key)
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	v.UrlQuery.Url = u.Url
	if x, err := encoding.BytesFromJSON(u.Key); err != nil {
		return fmt.Errorf("error decoding Key: %w", err)
	} else {
		v.Key = x
	}
	return nil
}

func (v *MajorBlocksQuery) UnmarshalJSON(data []byte) error {
	u := struct {
		Url   *url.URL `json:"url,omitempty"`
		Start uint64   `json:"start,omitempty"`
		Count uint64   `json:"count,omitempty"`
	}{}
	u.Url = v.UrlQuery.Url
	u.Start = v.QueryPagination.Start
	u.Count = v.QueryPagination.Count
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	v.UrlQuery.Url = u.Url
	v.QueryPagination.Start = u.Start
	v.QueryPagination.Count = u.Count
	return nil
}

func (v *MajorQueryResponse) UnmarshalJSON(data []byte) error {
	u := struct {
		MajorBlockIndex uint64                         `json:"majorBlockIndex,omitempty"`
		MajorBlockTime  *time.Time                     `json:"majorBlockTime,omitempty"`
		MinorBlocks     encoding.JsonList[*MinorBlock] `json:"minorBlocks,omitempty"`
	}{}
	u.MajorBlockIndex = v.MajorBlockIndex
	u.MajorBlockTime = v.MajorBlockTime
	u.MinorBlocks = v.MinorBlocks
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	v.MajorBlockIndex = u.MajorBlockIndex
	v.MajorBlockTime = u.MajorBlockTime
	v.MinorBlocks = u.MinorBlocks
	return nil
}

func (v *MerkleState) UnmarshalJSON(data []byte) error {
	u := struct {
		Height uint64                     `json:"height,omitempty"`
		Count  uint64                     `json:"count,omitempty"`
		Roots  encoding.JsonList[*string] `json:"roots,omitempty"`
	}{}
	u.Height = v.Height
	u.Count = v.Height
	u.Roots = make(encoding.JsonList[*string], len(v.Roots))
	for i, x := range v.Roots {
		u.Roots[i] = encoding.BytesToJSON(x)
	}
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	if !(u.Height == 0) {
		v.Height = u.Height
	} else {
		v.Height = u.Count
	}
	v.Roots = make([][]byte, len(u.Roots))
	for i, x := range u.Roots {
		if x, err := encoding.BytesFromJSON(x); err != nil {
			return fmt.Errorf("error decoding Roots: %w", err)
		} else {
			v.Roots[i] = x
		}
	}
	return nil
}

func (v *MetricsQuery) UnmarshalJSON(data []byte) error {
	u := struct {
		Metric   string      `json:"metric,omitempty"`
		Duration interface{} `json:"duration,omitempty"`
	}{}
	u.Metric = v.Metric
	u.Duration = encoding.DurationToJSON(v.Duration)
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	v.Metric = u.Metric
	if x, err := encoding.DurationFromJSON(u.Duration); err != nil {
		return fmt.Errorf("error decoding Duration: %w", err)
	} else {
		v.Duration = x
	}
	return nil
}

func (v *MetricsResponse) UnmarshalJSON(data []byte) error {
	u := struct {
		Value interface{} `json:"value,omitempty"`
	}{}
	u.Value = encoding.AnyToJSON(v.Value)
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	if x, err := encoding.AnyFromJSON(u.Value); err != nil {
		return fmt.Errorf("error decoding Value: %w", err)
	} else {
		v.Value = x
	}
	return nil
}

func (v *MinorBlocksQuery) UnmarshalJSON(data []byte) error {
	u := struct {
		Url             *url.URL              `json:"url,omitempty"`
		Start           uint64                `json:"start,omitempty"`
		Count           uint64                `json:"count,omitempty"`
		TxFetchMode     query.TxFetchMode     `json:"txFetchMode,omitempty"`
		BlockFilterMode query.BlockFilterMode `json:"blockFilterMode,omitempty"`
	}{}
	u.Url = v.UrlQuery.Url
	u.Start = v.QueryPagination.Start
	u.Count = v.QueryPagination.Count
	u.TxFetchMode = v.TxFetchMode
	u.BlockFilterMode = v.BlockFilterMode
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	v.UrlQuery.Url = u.Url
	v.QueryPagination.Start = u.Start
	v.QueryPagination.Count = u.Count
	v.TxFetchMode = u.TxFetchMode
	v.BlockFilterMode = u.BlockFilterMode
	return nil
}

func (v *MinorQueryResponse) UnmarshalJSON(data []byte) error {
	u := struct {
		BlockIndex   uint64                                       `json:"blockIndex,omitempty"`
		BlockTime    *time.Time                                   `json:"blockTime,omitempty"`
		TxCount      uint64                                       `json:"txCount,omitempty"`
		TxIds        encoding.JsonList[*string]                   `json:"txIds,omitempty"`
		Transactions encoding.JsonList[*TransactionQueryResponse] `json:"transactions,omitempty"`
	}{}
	u.BlockIndex = v.MinorBlock.BlockIndex
	u.BlockTime = v.MinorBlock.BlockTime
	u.TxCount = v.TxCount
	u.TxIds = make(encoding.JsonList[*string], len(v.TxIds))
	for i, x := range v.TxIds {
		u.TxIds[i] = encoding.BytesToJSON(x)
	}
	u.Transactions = v.Transactions
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	v.MinorBlock.BlockIndex = u.BlockIndex
	v.MinorBlock.BlockTime = u.BlockTime
	v.TxCount = u.TxCount
	v.TxIds = make([][]byte, len(u.TxIds))
	for i, x := range u.TxIds {
		if x, err := encoding.BytesFromJSON(x); err != nil {
			return fmt.Errorf("error decoding TxIds: %w", err)
		} else {
			v.TxIds[i] = x
		}
	}
	v.Transactions = u.Transactions
	return nil
}

func (v *MultiResponse) UnmarshalJSON(data []byte) error {
	u := struct {
		Type       string                         `json:"type,omitempty"`
		Items      encoding.JsonList[interface{}] `json:"items,omitempty"`
		Start      uint64                         `json:"start"`
		Count      uint64                         `json:"count"`
		Total      uint64                         `json:"total"`
		OtherItems encoding.JsonList[interface{}] `json:"otherItems,omitempty"`
	}{}
	u.Type = v.Type
	u.Items = make(encoding.JsonList[interface{}], len(v.Items))
	for i, x := range v.Items {
		u.Items[i] = encoding.AnyToJSON(x)
	}
	u.Start = v.Start
	u.Count = v.Count
	u.Total = v.Total
	u.OtherItems = make(encoding.JsonList[interface{}], len(v.OtherItems))
	for i, x := range v.OtherItems {
		u.OtherItems[i] = encoding.AnyToJSON(x)
	}
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	v.Type = u.Type
	v.Items = make([]interface{}, len(u.Items))
	for i, x := range u.Items {
		if x, err := encoding.AnyFromJSON(x); err != nil {
			return fmt.Errorf("error decoding Items: %w", err)
		} else {
			v.Items[i] = x
		}
	}
	v.Start = u.Start
	v.Count = u.Count
	v.Total = u.Total
	v.OtherItems = make([]interface{}, len(u.OtherItems))
	for i, x := range u.OtherItems {
		if x, err := encoding.AnyFromJSON(x); err != nil {
			return fmt.Errorf("error decoding OtherItems: %w", err)
		} else {
			v.OtherItems[i] = x
		}
	}
	return nil
}

func (v *QueryOptions) UnmarshalJSON(data []byte) error {
	u := struct {
		Expand       bool   `json:"expand,omitempty"`
		ExpandChains bool   `json:"expandChains,omitempty"`
		Height       uint64 `json:"height,omitempty"`
		Scratch      bool   `json:"scratch,omitempty"`
		Prove        bool   `json:"prove,omitempty"`
	}{}
	u.Expand = v.Expand
	u.ExpandChains = v.Expand
	u.Height = v.Height
	u.Scratch = v.Scratch
	u.Prove = v.Prove
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	if !(u.Expand == false) {
		v.Expand = u.Expand
	} else {
		v.Expand = u.ExpandChains
	}
	v.Height = u.Height
	v.Scratch = u.Scratch
	v.Prove = u.Prove
	return nil
}

func (v *SignatureBook) UnmarshalJSON(data []byte) error {
	u := struct {
		Authority *url.URL                          `json:"authority,omitempty"`
		Pages     encoding.JsonList[*SignaturePage] `json:"pages,omitempty"`
	}{}
	u.Authority = v.Authority
	u.Pages = v.Pages
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	v.Authority = u.Authority
	v.Pages = u.Pages
	return nil
}

func (v *SignaturePage) UnmarshalJSON(data []byte) error {
	u := struct {
		Signer     SignerMetadata                                     `json:"signer,omitempty"`
		Signatures encoding.JsonUnmarshalListWith[protocol.Signature] `json:"signatures,omitempty"`
	}{}
	u.Signer = v.Signer
	u.Signatures = encoding.JsonUnmarshalListWith[protocol.Signature]{Value: v.Signatures, Func: protocol.UnmarshalSignatureJSON}
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	v.Signer = u.Signer
	v.Signatures = make([]protocol.Signature, len(u.Signatures.Value))
	for i, x := range u.Signatures.Value {
		v.Signatures[i] = x
	}
	return nil
}

func (v *Signer) UnmarshalJSON(data []byte) error {
	u := struct {
		PublicKey     *string                `json:"publicKey,omitempty"`
		Timestamp     uint64                 `json:"timestamp,omitempty"`
		Nonce         uint64                 `json:"nonce,omitempty"`
		Url           *url.URL               `json:"url,omitempty"`
		Version       uint64                 `json:"version,omitempty"`
		SignatureType protocol.SignatureType `json:"signatureType,omitempty"`
		UseSimpleHash bool                   `json:"useSimpleHash,omitempty"`
	}{}
	u.PublicKey = encoding.BytesToJSON(v.PublicKey)
	u.Timestamp = v.Timestamp
	u.Nonce = v.Timestamp
	u.Url = v.Url
	u.Version = v.Version
	u.SignatureType = v.SignatureType
	u.UseSimpleHash = v.UseSimpleHash
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	if x, err := encoding.BytesFromJSON(u.PublicKey); err != nil {
		return fmt.Errorf("error decoding PublicKey: %w", err)
	} else {
		v.PublicKey = x
	}
	if !(u.Timestamp == 0) {
		v.Timestamp = u.Timestamp
	} else {
		v.Timestamp = u.Nonce
	}
	v.Url = u.Url
	v.Version = u.Version
	v.SignatureType = u.SignatureType
	v.UseSimpleHash = u.UseSimpleHash
	return nil
}

func (v *StatusResponse) UnmarshalJSON(data []byte) error {
	u := struct {
		Ok                        bool      `json:"ok,omitempty"`
		BvnHeight                 int64     `json:"bvnHeight,omitempty"`
		DnHeight                  int64     `json:"dnHeight,omitempty"`
		BvnTime                   time.Time `json:"bvnTime,omitempty"`
		DnTime                    time.Time `json:"dnTime,omitempty"`
		LastDirectoryAnchorHeight uint64    `json:"lastDirectoryAnchorHeight,omitempty"`
		BvnRootHash               string    `json:"bvnRootHash,omitempty"`
		DnRootHash                string    `json:"dnRootHash,omitempty"`
		BvnBptHash                string    `json:"bvnBptHash,omitempty"`
		DnBptHash                 string    `json:"dnBptHash,omitempty"`
	}{}
	u.Ok = v.Ok
	u.BvnHeight = v.BvnHeight
	u.DnHeight = v.DnHeight
	u.BvnTime = v.BvnTime
	u.DnTime = v.DnTime
	u.LastDirectoryAnchorHeight = v.LastDirectoryAnchorHeight
	u.BvnRootHash = encoding.ChainToJSON(v.BvnRootHash)
	u.DnRootHash = encoding.ChainToJSON(v.DnRootHash)
	u.BvnBptHash = encoding.ChainToJSON(v.BvnBptHash)
	u.DnBptHash = encoding.ChainToJSON(v.DnBptHash)
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	v.Ok = u.Ok
	v.BvnHeight = u.BvnHeight
	v.DnHeight = u.DnHeight
	v.BvnTime = u.BvnTime
	v.DnTime = u.DnTime
	v.LastDirectoryAnchorHeight = u.LastDirectoryAnchorHeight
	if x, err := encoding.ChainFromJSON(u.BvnRootHash); err != nil {
		return fmt.Errorf("error decoding BvnRootHash: %w", err)
	} else {
		v.BvnRootHash = x
	}
	if x, err := encoding.ChainFromJSON(u.DnRootHash); err != nil {
		return fmt.Errorf("error decoding DnRootHash: %w", err)
	} else {
		v.DnRootHash = x
	}
	if x, err := encoding.ChainFromJSON(u.BvnBptHash); err != nil {
		return fmt.Errorf("error decoding BvnBptHash: %w", err)
	} else {
		v.BvnBptHash = x
	}
	if x, err := encoding.ChainFromJSON(u.DnBptHash); err != nil {
		return fmt.Errorf("error decoding DnBptHash: %w", err)
	} else {
		v.DnBptHash = x
	}
	return nil
}

func (v *TokenDeposit) UnmarshalJSON(data []byte) error {
	u := struct {
		Url    *url.URL `json:"url,omitempty"`
		Amount *string  `json:"amount,omitempty"`
		Txid   *string  `json:"txid,omitempty"`
	}{}
	u.Url = v.Url
	u.Amount = encoding.BigintToJSON(&v.Amount)
	u.Txid = encoding.BytesToJSON(v.Txid)
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	v.Url = u.Url
	if x, err := encoding.BigintFromJSON(u.Amount); err != nil {
		return fmt.Errorf("error decoding Amount: %w", err)
	} else {
		v.Amount = *x
	}
	if x, err := encoding.BytesFromJSON(u.Txid); err != nil {
		return fmt.Errorf("error decoding Txid: %w", err)
	} else {
		v.Txid = x
	}
	return nil
}

func (v *TokenSend) UnmarshalJSON(data []byte) error {
	u := struct {
		From *url.URL                        `json:"from,omitempty"`
		To   encoding.JsonList[TokenDeposit] `json:"to,omitempty"`
	}{}
	u.From = v.From
	u.To = v.To
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	v.From = u.From
	v.To = u.To
	return nil
}

func (v *TransactionQueryResponse) UnmarshalJSON(data []byte) error {
	u := struct {
		Type            string                                             `json:"type,omitempty"`
		MainChain       *MerkleState                                       `json:"mainChain,omitempty"`
		MerkleState     *MerkleState                                       `json:"merkleState,omitempty"`
		Data            interface{}                                        `json:"data,omitempty"`
		Origin          *url.URL                                           `json:"origin,omitempty"`
		Sponsor         *url.URL                                           `json:"sponsor,omitempty"`
		TransactionHash *string                                            `json:"transactionHash,omitempty"`
		Txid            *url.TxID                                          `json:"txid,omitempty"`
		Transaction     *protocol.Transaction                              `json:"transaction,omitempty"`
		Signatures      encoding.JsonUnmarshalListWith[protocol.Signature] `json:"signatures,omitempty"`
		Status          *protocol.TransactionStatus                        `json:"status,omitempty"`
		Produced        encoding.JsonList[*url.TxID]                       `json:"produced,omitempty"`
		SyntheticTxids  encoding.JsonList[*url.TxID]                       `json:"syntheticTxids,omitempty"`
		Receipts        encoding.JsonList[*query.TxReceipt]                `json:"receipts,omitempty"`
		SignatureBooks  encoding.JsonList[*SignatureBook]                  `json:"signatureBooks,omitempty"`
		PartitionID     string                                             `json:"partitionID,omitempty"`
	}{}
	u.Type = v.Type
	u.MainChain = v.MainChain
	u.MerkleState = v.MainChain
	u.Data = encoding.AnyToJSON(v.Data)
	u.Origin = v.Origin
	u.Sponsor = v.Origin
	u.TransactionHash = encoding.BytesToJSON(v.TransactionHash)
	u.Txid = v.Txid
	u.Transaction = v.Transaction
	u.Signatures = encoding.JsonUnmarshalListWith[protocol.Signature]{Value: v.Signatures, Func: protocol.UnmarshalSignatureJSON}
	u.Status = v.Status
	u.Produced = v.Produced
	u.SyntheticTxids = v.Produced
	u.Receipts = v.Receipts
	u.SignatureBooks = v.SignatureBooks
	u.PartitionID = v.PartitionID
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	v.Type = u.Type
	if !(u.MainChain == nil) {
		v.MainChain = u.MainChain
	} else {
		v.MainChain = u.MerkleState
	}
	if x, err := encoding.AnyFromJSON(u.Data); err != nil {
		return fmt.Errorf("error decoding Data: %w", err)
	} else {
		v.Data = x
	}
	if !(u.Origin == nil) {
		v.Origin = u.Origin
	} else {
		v.Origin = u.Sponsor
	}
	if x, err := encoding.BytesFromJSON(u.TransactionHash); err != nil {
		return fmt.Errorf("error decoding TransactionHash: %w", err)
	} else {
		v.TransactionHash = x
	}
	v.Txid = u.Txid
	v.Transaction = u.Transaction
	v.Signatures = make([]protocol.Signature, len(u.Signatures.Value))
	for i, x := range u.Signatures.Value {
		v.Signatures[i] = x
	}
	v.Status = u.Status
	if !(len(u.Produced) == 0) {
		v.Produced = u.Produced
	} else {
		v.Produced = u.SyntheticTxids
	}
	v.Receipts = u.Receipts
	v.SignatureBooks = u.SignatureBooks
	v.PartitionID = u.PartitionID
	return nil
}

func (v *TxHistoryQuery) UnmarshalJSON(data []byte) error {
	u := struct {
		Url     *url.URL `json:"url,omitempty"`
		Start   uint64   `json:"start,omitempty"`
		Count   uint64   `json:"count,omitempty"`
		Scratch bool     `json:"scratch,omitempty"`
	}{}
	u.Url = v.UrlQuery.Url
	u.Start = v.QueryPagination.Start
	u.Count = v.QueryPagination.Count
	u.Scratch = v.Scratch
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	v.UrlQuery.Url = u.Url
	v.QueryPagination.Start = u.Start
	v.QueryPagination.Count = u.Count
	v.Scratch = u.Scratch
	return nil
}

func (v *TxRequest) UnmarshalJSON(data []byte) error {
	u := struct {
		CheckOnly  bool        `json:"checkOnly,omitempty"`
		IsEnvelope bool        `json:"isEnvelope,omitempty"`
		Origin     *url.URL    `json:"origin,omitempty"`
		Sponsor    *url.URL    `json:"sponsor,omitempty"`
		Signer     Signer      `json:"signer,omitempty"`
		Signature  *string     `json:"signature,omitempty"`
		KeyPage    KeyPage     `json:"keyPage,omitempty"`
		TxHash     *string     `json:"txHash,omitempty"`
		Payload    interface{} `json:"payload,omitempty"`
		Memo       string      `json:"memo,omitempty"`
		Metadata   *string     `json:"metadata,omitempty"`
	}{}
	u.CheckOnly = v.CheckOnly
	u.IsEnvelope = v.IsEnvelope
	u.Origin = v.Origin
	u.Sponsor = v.Origin
	u.Signer = v.Signer
	u.Signature = encoding.BytesToJSON(v.Signature)
	u.KeyPage = v.KeyPage
	u.TxHash = encoding.BytesToJSON(v.TxHash)
	u.Payload = encoding.AnyToJSON(v.Payload)
	u.Memo = v.Memo
	u.Metadata = encoding.BytesToJSON(v.Metadata)
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	v.CheckOnly = u.CheckOnly
	v.IsEnvelope = u.IsEnvelope
	if !(u.Origin == nil) {
		v.Origin = u.Origin
	} else {
		v.Origin = u.Sponsor
	}
	v.Signer = u.Signer
	if x, err := encoding.BytesFromJSON(u.Signature); err != nil {
		return fmt.Errorf("error decoding Signature: %w", err)
	} else {
		v.Signature = x
	}
	v.KeyPage = u.KeyPage
	if x, err := encoding.BytesFromJSON(u.TxHash); err != nil {
		return fmt.Errorf("error decoding TxHash: %w", err)
	} else {
		v.TxHash = x
	}
	if x, err := encoding.AnyFromJSON(u.Payload); err != nil {
		return fmt.Errorf("error decoding Payload: %w", err)
	} else {
		v.Payload = x
	}
	v.Memo = u.Memo
	if x, err := encoding.BytesFromJSON(u.Metadata); err != nil {
		return fmt.Errorf("error decoding Metadata: %w", err)
	} else {
		v.Metadata = x
	}
	return nil
}

func (v *TxResponse) UnmarshalJSON(data []byte) error {
	u := struct {
		TransactionHash *string                    `json:"transactionHash,omitempty"`
		Txid            *url.TxID                  `json:"txid,omitempty"`
		SignatureHashes encoding.JsonList[*string] `json:"signatureHashes,omitempty"`
		SimpleHash      *string                    `json:"simpleHash,omitempty"`
		Hash            *string                    `json:"hash,omitempty"`
		Code            uint64                     `json:"code,omitempty"`
		Message         string                     `json:"message,omitempty"`
		Delivered       bool                       `json:"delivered,omitempty"`
		Result          interface{}                `json:"result,omitempty"`
	}{}
	u.TransactionHash = encoding.BytesToJSON(v.TransactionHash)
	u.Txid = v.Txid
	u.SignatureHashes = make(encoding.JsonList[*string], len(v.SignatureHashes))
	for i, x := range v.SignatureHashes {
		u.SignatureHashes[i] = encoding.BytesToJSON(x)
	}
	u.SimpleHash = encoding.BytesToJSON(v.SimpleHash)
	u.Hash = encoding.BytesToJSON(v.SimpleHash)
	u.Code = v.Code
	u.Message = v.Message
	u.Delivered = v.Delivered
	u.Result = encoding.AnyToJSON(v.Result)
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	if x, err := encoding.BytesFromJSON(u.TransactionHash); err != nil {
		return fmt.Errorf("error decoding TransactionHash: %w", err)
	} else {
		v.TransactionHash = x
	}
	v.Txid = u.Txid
	v.SignatureHashes = make([][]byte, len(u.SignatureHashes))
	for i, x := range u.SignatureHashes {
		if x, err := encoding.BytesFromJSON(x); err != nil {
			return fmt.Errorf("error decoding SignatureHashes: %w", err)
		} else {
			v.SignatureHashes[i] = x
		}
	}
	if !(u.SimpleHash == nil) {
		if x, err := encoding.BytesFromJSON(u.SimpleHash); err != nil {
			return fmt.Errorf("error decoding SimpleHash: %w", err)
		} else {
			v.SimpleHash = x
		}
	} else {
		if x, err := encoding.BytesFromJSON(u.Hash); err != nil {
			return fmt.Errorf("error decoding SimpleHash: %w", err)
		} else {
			v.SimpleHash = x
		}
	}
	v.Code = u.Code
	v.Message = u.Message
	v.Delivered = u.Delivered
	if x, err := encoding.AnyFromJSON(u.Result); err != nil {
		return fmt.Errorf("error decoding Result: %w", err)
	} else {
		v.Result = x
	}
	return nil
}

func (v *TxnQuery) UnmarshalJSON(data []byte) error {
	u := struct {
		Expand        bool        `json:"expand,omitempty"`
		ExpandChains  bool        `json:"expandChains,omitempty"`
		Height        uint64      `json:"height,omitempty"`
		Scratch       bool        `json:"scratch,omitempty"`
		Prove         bool        `json:"prove,omitempty"`
		Txid          *string     `json:"txid,omitempty"`
		TxIdUrl       *url.TxID   `json:"txIdUrl,omitempty"`
		Wait          interface{} `json:"wait,omitempty"`
		IgnorePending bool        `json:"ignorePending,omitempty"`
	}{}
	u.Expand = v.QueryOptions.Expand
	u.ExpandChains = v.QueryOptions.Expand
	u.Height = v.QueryOptions.Height
	u.Scratch = v.QueryOptions.Scratch
	u.Prove = v.QueryOptions.Prove
	u.Txid = encoding.BytesToJSON(v.Txid)
	u.TxIdUrl = v.TxIdUrl
	u.Wait = encoding.DurationToJSON(v.Wait)
	u.IgnorePending = v.IgnorePending
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	if !(u.Expand == false) {
		v.QueryOptions.Expand = u.Expand
	} else {
		v.QueryOptions.Expand = u.ExpandChains
	}
	v.QueryOptions.Height = u.Height
	v.QueryOptions.Scratch = u.Scratch
	v.QueryOptions.Prove = u.Prove
	if x, err := encoding.BytesFromJSON(u.Txid); err != nil {
		return fmt.Errorf("error decoding Txid: %w", err)
	} else {
		v.Txid = x
	}
	v.TxIdUrl = u.TxIdUrl
	if x, err := encoding.DurationFromJSON(u.Wait); err != nil {
		return fmt.Errorf("error decoding Wait: %w", err)
	} else {
		v.Wait = x
	}
	v.IgnorePending = u.IgnorePending
	return nil
}
