package api

// GENERATED BY go run ./internal/cmd/genmarshal. DO NOT EDIT.

import (
	"encoding/json"
	"fmt"

	"github.com/AccumulateNetwork/accumulated/internal/encoding"
)

type KeyPage struct {
	Height uint64 `json:"height" form:"height" query:"height" validate:"required"`
	Index  uint64 `json:"index" form:"index" query:"index" validate:"required"`
}

type QueryMultiResponse struct {
	Items []*QueryResponse `json:"items" form:"items" query:"items" validate:"required"`
	Start uint64           `json:"start" form:"start" query:"start" validate:"required"`
	Count uint64           `json:"count" form:"count" query:"count" validate:"required"`
	Total uint64           `json:"total" form:"total" query:"total" validate:"required"`
}

type QueryResponse struct {
	Type    string      `json:"type" form:"type" query:"type" validate:"required"`
	MdRoot  []byte      `json:"mdRoot" form:"mdRoot" query:"mdRoot" validate:"required"`
	Data    interface{} `json:"data" form:"data" query:"data" validate:"required"`
	Sponsor string      `json:"sponsor" form:"sponsor" query:"sponsor" validate:"required"`
	KeyPage KeyPage     `json:"keyPage" form:"keyPage" query:"keyPage" validate:"required"`
	Txid    []byte      `json:"txid" form:"txid" query:"txid" validate:"required"`
	Signer  Signer      `json:"signer" form:"signer" query:"signer" validate:"required"`
	Sig     []byte      `json:"sig" form:"sig" query:"sig" validate:"required"`
	Status  interface{} `json:"status" form:"status" query:"status" validate:"required"`
}

type Signer struct {
	PublicKey []byte `json:"publicKey" form:"publicKey" query:"publicKey" validate:"required"`
	Nonce     uint64 `json:"nonce" form:"nonce" query:"nonce" validate:"required"`
}

type TokenDeposit struct {
	Url    string `json:"url" form:"url" query:"url" validate:"required"`
	Amount uint64 `json:"amount" form:"amount" query:"amount" validate:"required"`
	Txid   []byte `json:"txid" form:"txid" query:"txid" validate:"required"`
}

type TokenSend struct {
	From string         `json:"from" form:"from" query:"from" validate:"required"`
	To   []TokenDeposit `json:"to" form:"to" query:"to" validate:"required"`
}

func (v *QueryResponse) MarshalJSON() ([]byte, error) {
	var u struct {
		Type    string      `json:"type"`
		MdRoot  string      `json:"mdRoot"`
		Data    interface{} `json:"data"`
		Sponsor string      `json:"sponsor"`
		KeyPage KeyPage     `json:"keyPage"`
		Txid    string      `json:"txid"`
		Signer  Signer      `json:"signer"`
		Sig     string      `json:"sig"`
		Status  interface{} `json:"status"`
	}
	u.Type = v.Type
	u.MdRoot = encoding.BytesToJSON(v.MdRoot)
	u.Data = v.Data
	u.Sponsor = v.Sponsor
	u.KeyPage = v.KeyPage
	u.Txid = encoding.BytesToJSON(v.Txid)
	u.Signer = v.Signer
	u.Sig = encoding.BytesToJSON(v.Sig)
	u.Status = v.Status
	return json.Marshal(u)
}

func (v *Signer) MarshalJSON() ([]byte, error) {
	var u struct {
		PublicKey string `json:"publicKey"`
		Nonce     uint64 `json:"nonce"`
	}
	u.PublicKey = encoding.BytesToJSON(v.PublicKey)
	u.Nonce = v.Nonce
	return json.Marshal(u)
}

func (v *TokenDeposit) MarshalJSON() ([]byte, error) {
	var u struct {
		Url    string `json:"url"`
		Amount uint64 `json:"amount"`
		Txid   string `json:"txid"`
	}
	u.Url = v.Url
	u.Amount = v.Amount
	u.Txid = encoding.BytesToJSON(v.Txid)
	return json.Marshal(u)
}

func (v *QueryResponse) UnmarshalJSON(data []byte) error {
	var u struct {
		Type    string      `json:"type"`
		MdRoot  string      `json:"mdRoot"`
		Data    interface{} `json:"data"`
		Sponsor string      `json:"sponsor"`
		KeyPage KeyPage     `json:"keyPage"`
		Txid    string      `json:"txid"`
		Signer  Signer      `json:"signer"`
		Sig     string      `json:"sig"`
		Status  interface{} `json:"status"`
	}
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	v.Type = u.Type
	if x, err := encoding.BytesFromJSON(u.MdRoot); err != nil {
		return fmt.Errorf("error decoding MdRoot: %w", err)
	} else {
		v.MdRoot = x
	}
	v.Data = u.Data
	v.Sponsor = u.Sponsor
	v.KeyPage = u.KeyPage
	if x, err := encoding.BytesFromJSON(u.Txid); err != nil {
		return fmt.Errorf("error decoding Txid: %w", err)
	} else {
		v.Txid = x
	}
	v.Signer = u.Signer
	if x, err := encoding.BytesFromJSON(u.Sig); err != nil {
		return fmt.Errorf("error decoding Sig: %w", err)
	} else {
		v.Sig = x
	}
	v.Status = u.Status
	return nil
}

func (v *Signer) UnmarshalJSON(data []byte) error {
	var u struct {
		PublicKey string `json:"publicKey"`
		Nonce     uint64 `json:"nonce"`
	}
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	if x, err := encoding.BytesFromJSON(u.PublicKey); err != nil {
		return fmt.Errorf("error decoding PublicKey: %w", err)
	} else {
		v.PublicKey = x
	}
	v.Nonce = u.Nonce
	return nil
}

func (v *TokenDeposit) UnmarshalJSON(data []byte) error {
	var u struct {
		Url    string `json:"url"`
		Amount uint64 `json:"amount"`
		Txid   string `json:"txid"`
	}
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	v.Url = u.Url
	v.Amount = u.Amount
	if x, err := encoding.BytesFromJSON(u.Txid); err != nil {
		return fmt.Errorf("error decoding Txid: %w", err)
	} else {
		v.Txid = x
	}
	return nil
}
