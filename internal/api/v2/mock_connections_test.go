// Code generated by MockGen. DO NOT EDIT.
// Source: ../../connections/connection_context.go

// Package api_test is a generated GoMock package.
package api_test

import (
	context "context"
	url "net/url"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	bytes "github.com/tendermint/tendermint/libs/bytes"
	client "github.com/tendermint/tendermint/rpc/client"
	coretypes "github.com/tendermint/tendermint/rpc/core/types"
	types "github.com/tendermint/tendermint/types"
	config "gitlab.com/accumulatenetwork/accumulate/config"
	connections "gitlab.com/accumulatenetwork/accumulate/internal/connections"
)

// MockABCIClient is a mock of ABCIClient interface.
type MockABCIClient struct {
	ctrl     *gomock.Controller
	recorder *MockABCIClientMockRecorder
}

// MockABCIClientMockRecorder is the mock recorder for MockABCIClient.
type MockABCIClientMockRecorder struct {
	mock *MockABCIClient
}

// NewMockABCIClient creates a new mock instance.
func NewMockABCIClient(ctrl *gomock.Controller) *MockABCIClient {
	mock := &MockABCIClient{ctrl: ctrl}
	mock.recorder = &MockABCIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockABCIClient) EXPECT() *MockABCIClientMockRecorder {
	return m.recorder
}

// ABCIQueryWithOptions mocks base method.
func (m *MockABCIClient) ABCIQueryWithOptions(ctx context.Context, path string, data bytes.HexBytes, opts client.ABCIQueryOptions) (*coretypes.ResultABCIQuery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ABCIQueryWithOptions", ctx, path, data, opts)
	ret0, _ := ret[0].(*coretypes.ResultABCIQuery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ABCIQueryWithOptions indicates an expected call of ABCIQueryWithOptions.
func (mr *MockABCIClientMockRecorder) ABCIQueryWithOptions(ctx, path, data, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ABCIQueryWithOptions", reflect.TypeOf((*MockABCIClient)(nil).ABCIQueryWithOptions), ctx, path, data, opts)
}

// BroadcastTxAsync mocks base method.
func (m *MockABCIClient) BroadcastTxAsync(arg0 context.Context, arg1 types.Tx) (*coretypes.ResultBroadcastTx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BroadcastTxAsync", arg0, arg1)
	ret0, _ := ret[0].(*coretypes.ResultBroadcastTx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BroadcastTxAsync indicates an expected call of BroadcastTxAsync.
func (mr *MockABCIClientMockRecorder) BroadcastTxAsync(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BroadcastTxAsync", reflect.TypeOf((*MockABCIClient)(nil).BroadcastTxAsync), arg0, arg1)
}

// BroadcastTxSync mocks base method.
func (m *MockABCIClient) BroadcastTxSync(arg0 context.Context, arg1 types.Tx) (*coretypes.ResultBroadcastTx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BroadcastTxSync", arg0, arg1)
	ret0, _ := ret[0].(*coretypes.ResultBroadcastTx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BroadcastTxSync indicates an expected call of BroadcastTxSync.
func (mr *MockABCIClientMockRecorder) BroadcastTxSync(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BroadcastTxSync", reflect.TypeOf((*MockABCIClient)(nil).BroadcastTxSync), arg0, arg1)
}

// CheckTx mocks base method.
func (m *MockABCIClient) CheckTx(ctx context.Context, tx types.Tx) (*coretypes.ResultCheckTx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckTx", ctx, tx)
	ret0, _ := ret[0].(*coretypes.ResultCheckTx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckTx indicates an expected call of CheckTx.
func (mr *MockABCIClientMockRecorder) CheckTx(ctx, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckTx", reflect.TypeOf((*MockABCIClient)(nil).CheckTx), ctx, tx)
}

// Status mocks base method.
func (m *MockABCIClient) Status(arg0 context.Context) (*coretypes.ResultStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status", arg0)
	ret0, _ := ret[0].(*coretypes.ResultStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status.
func (mr *MockABCIClientMockRecorder) Status(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockABCIClient)(nil).Status), arg0)
}

// MockAPIClient is a mock of APIClient interface.
type MockAPIClient struct {
	ctrl     *gomock.Controller
	recorder *MockAPIClientMockRecorder
}

// MockAPIClientMockRecorder is the mock recorder for MockAPIClient.
type MockAPIClientMockRecorder struct {
	mock *MockAPIClient
}

// NewMockAPIClient creates a new mock instance.
func NewMockAPIClient(ctrl *gomock.Controller) *MockAPIClient {
	mock := &MockAPIClient{ctrl: ctrl}
	mock.recorder = &MockAPIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPIClient) EXPECT() *MockAPIClientMockRecorder {
	return m.recorder
}

// RequestAPIv2 mocks base method.
func (m *MockAPIClient) RequestAPIv2(arg0 context.Context, method string, params, result interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestAPIv2", arg0, method, params, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// RequestAPIv2 indicates an expected call of RequestAPIv2.
func (mr *MockAPIClientMockRecorder) RequestAPIv2(arg0, method, params, result interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestAPIv2", reflect.TypeOf((*MockAPIClient)(nil).RequestAPIv2), arg0, method, params, result)
}

// MockConnectionContext is a mock of ConnectionContext interface.
type MockConnectionContext struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionContextMockRecorder
}

// MockConnectionContextMockRecorder is the mock recorder for MockConnectionContext.
type MockConnectionContextMockRecorder struct {
	mock *MockConnectionContext
}

// NewMockConnectionContext creates a new mock instance.
func NewMockConnectionContext(ctrl *gomock.Controller) *MockConnectionContext {
	mock := &MockConnectionContext{ctrl: ctrl}
	mock.recorder = &MockConnectionContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnectionContext) EXPECT() *MockConnectionContextMockRecorder {
	return m.recorder
}

// ClearErrors mocks base method.
func (m *MockConnectionContext) ClearErrors() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClearErrors")
}

// ClearErrors indicates an expected call of ClearErrors.
func (mr *MockConnectionContextMockRecorder) ClearErrors() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearErrors", reflect.TypeOf((*MockConnectionContext)(nil).ClearErrors))
}

// GetABCIClient mocks base method.
func (m *MockConnectionContext) GetABCIClient() connections.ABCIClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetABCIClient")
	ret0, _ := ret[0].(connections.ABCIClient)
	return ret0
}

// GetABCIClient indicates an expected call of GetABCIClient.
func (mr *MockConnectionContextMockRecorder) GetABCIClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetABCIClient", reflect.TypeOf((*MockConnectionContext)(nil).GetABCIClient))
}

// GetAPIClient mocks base method.
func (m *MockConnectionContext) GetAPIClient() connections.APIClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAPIClient")
	ret0, _ := ret[0].(connections.APIClient)
	return ret0
}

// GetAPIClient indicates an expected call of GetAPIClient.
func (mr *MockConnectionContextMockRecorder) GetAPIClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIClient", reflect.TypeOf((*MockConnectionContext)(nil).GetAPIClient))
}

// GetAddress mocks base method.
func (m *MockConnectionContext) GetAddress() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddress")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAddress indicates an expected call of GetAddress.
func (mr *MockConnectionContextMockRecorder) GetAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddress", reflect.TypeOf((*MockConnectionContext)(nil).GetAddress))
}

// GetBasePort mocks base method.
func (m *MockConnectionContext) GetBasePort() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBasePort")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetBasePort indicates an expected call of GetBasePort.
func (mr *MockConnectionContextMockRecorder) GetBasePort() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBasePort", reflect.TypeOf((*MockConnectionContext)(nil).GetBasePort))
}

// GetMetrics mocks base method.
func (m *MockConnectionContext) GetMetrics() *connections.NodeMetrics {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetrics")
	ret0, _ := ret[0].(*connections.NodeMetrics)
	return ret0
}

// GetMetrics indicates an expected call of GetMetrics.
func (mr *MockConnectionContextMockRecorder) GetMetrics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetrics", reflect.TypeOf((*MockConnectionContext)(nil).GetMetrics))
}

// GetNetworkGroup mocks base method.
func (m *MockConnectionContext) GetNetworkGroup() connections.NetworkGroup {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkGroup")
	ret0, _ := ret[0].(connections.NetworkGroup)
	return ret0
}

// GetNetworkGroup indicates an expected call of GetNetworkGroup.
func (mr *MockConnectionContextMockRecorder) GetNetworkGroup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkGroup", reflect.TypeOf((*MockConnectionContext)(nil).GetNetworkGroup))
}

// GetNodeType mocks base method.
func (m *MockConnectionContext) GetNodeType() config.NodeType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeType")
	ret0, _ := ret[0].(config.NodeType)
	return ret0
}

// GetNodeType indicates an expected call of GetNodeType.
func (mr *MockConnectionContextMockRecorder) GetNodeType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeType", reflect.TypeOf((*MockConnectionContext)(nil).GetNodeType))
}

// IsHealthy mocks base method.
func (m *MockConnectionContext) IsHealthy() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsHealthy")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsHealthy indicates an expected call of IsHealthy.
func (mr *MockConnectionContextMockRecorder) IsHealthy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsHealthy", reflect.TypeOf((*MockConnectionContext)(nil).IsHealthy))
}

// ReportError mocks base method.
func (m *MockConnectionContext) ReportError(err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReportError", err)
}

// ReportError indicates an expected call of ReportError.
func (mr *MockConnectionContextMockRecorder) ReportError(err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportError", reflect.TypeOf((*MockConnectionContext)(nil).ReportError), err)
}

// ReportErrorStatus mocks base method.
func (m *MockConnectionContext) ReportErrorStatus(status connections.NodeStatus) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReportErrorStatus", status)
}

// ReportErrorStatus indicates an expected call of ReportErrorStatus.
func (mr *MockConnectionContextMockRecorder) ReportErrorStatus(status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportErrorStatus", reflect.TypeOf((*MockConnectionContext)(nil).ReportErrorStatus), status)
}

// SetNodeUrl mocks base method.
func (m *MockConnectionContext) SetNodeUrl(addr *url.URL) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetNodeUrl", addr)
}

// SetNodeUrl indicates an expected call of SetNodeUrl.
func (mr *MockConnectionContextMockRecorder) SetNodeUrl(addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNodeUrl", reflect.TypeOf((*MockConnectionContext)(nil).SetNodeUrl), addr)
}

// MockStatusChecker is a mock of StatusChecker interface.
type MockStatusChecker struct {
	ctrl     *gomock.Controller
	recorder *MockStatusCheckerMockRecorder
}

// MockStatusCheckerMockRecorder is the mock recorder for MockStatusChecker.
type MockStatusCheckerMockRecorder struct {
	mock *MockStatusChecker
}

// NewMockStatusChecker creates a new mock instance.
func NewMockStatusChecker(ctrl *gomock.Controller) *MockStatusChecker {
	mock := &MockStatusChecker{ctrl: ctrl}
	mock.recorder = &MockStatusCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatusChecker) EXPECT() *MockStatusCheckerMockRecorder {
	return m.recorder
}

// IsStatusOk mocks base method.
func (m *MockStatusChecker) IsStatusOk(connCtx connections.ConnectionContext) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsStatusOk", connCtx)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsStatusOk indicates an expected call of IsStatusOk.
func (mr *MockStatusCheckerMockRecorder) IsStatusOk(connCtx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsStatusOk", reflect.TypeOf((*MockStatusChecker)(nil).IsStatusOk), connCtx)
}
