// Code generated by MockGen. DO NOT EDIT.
// Source: types.go

// Package mock_api is a generated GoMock package.
package mock_api

import (
	context "context"
	reflect "reflect"
	time "time"

	api "github.com/AccumulateNetwork/accumulate/internal/api/v2"
	gomock "github.com/golang/mock/gomock"
	bytes "github.com/tendermint/tendermint/libs/bytes"
	client "github.com/tendermint/tendermint/rpc/client"
	coretypes "github.com/tendermint/tendermint/rpc/core/types"
	types "github.com/tendermint/tendermint/types"
)

// MockQuerier is a mock of Querier interface.
type MockQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockQuerierMockRecorder
}

// MockQuerierMockRecorder is the mock recorder for MockQuerier.
type MockQuerierMockRecorder struct {
	mock *MockQuerier
}

// NewMockQuerier creates a new mock instance.
func NewMockQuerier(ctrl *gomock.Controller) *MockQuerier {
	mock := &MockQuerier{ctrl: ctrl}
	mock.recorder = &MockQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuerier) EXPECT() *MockQuerierMockRecorder {
	return m.recorder
}

// QueryChain mocks base method.
func (m *MockQuerier) QueryChain(id []byte) (*api.ChainQueryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryChain", id)
	ret0, _ := ret[0].(*api.ChainQueryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryChain indicates an expected call of QueryChain.
func (mr *MockQuerierMockRecorder) QueryChain(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryChain", reflect.TypeOf((*MockQuerier)(nil).QueryChain), id)
}

// QueryData mocks base method.
func (m *MockQuerier) QueryData(url string, entryHash [32]byte) (*api.ChainQueryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryData", url, entryHash)
	ret0, _ := ret[0].(*api.ChainQueryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryData indicates an expected call of QueryData.
func (mr *MockQuerierMockRecorder) QueryData(url, entryHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryData", reflect.TypeOf((*MockQuerier)(nil).QueryData), url, entryHash)
}

// QueryDataSet mocks base method.
func (m *MockQuerier) QueryDataSet(url string, pagination api.QueryPagination, opts api.QueryOptions) (*api.MultiResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryDataSet", url, pagination, opts)
	ret0, _ := ret[0].(*api.MultiResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryDataSet indicates an expected call of QueryDataSet.
func (mr *MockQuerierMockRecorder) QueryDataSet(url, pagination, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryDataSet", reflect.TypeOf((*MockQuerier)(nil).QueryDataSet), url, pagination, opts)
}

// QueryDirectory mocks base method.
func (m *MockQuerier) QueryDirectory(url string, pagination api.QueryPagination, opts api.QueryOptions) (*api.MultiResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryDirectory", url, pagination, opts)
	ret0, _ := ret[0].(*api.MultiResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryDirectory indicates an expected call of QueryDirectory.
func (mr *MockQuerierMockRecorder) QueryDirectory(url, pagination, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryDirectory", reflect.TypeOf((*MockQuerier)(nil).QueryDirectory), url, pagination, opts)
}

// QueryKeyPageIndex mocks base method.
func (m *MockQuerier) QueryKeyPageIndex(url string, key []byte) (*api.ChainQueryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryKeyPageIndex", url, key)
	ret0, _ := ret[0].(*api.ChainQueryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryKeyPageIndex indicates an expected call of QueryKeyPageIndex.
func (mr *MockQuerierMockRecorder) QueryKeyPageIndex(url, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryKeyPageIndex", reflect.TypeOf((*MockQuerier)(nil).QueryKeyPageIndex), url, key)
}

// QueryPending mocks base method.
func (m *MockQuerier) QueryPending(s string, txid []byte, opts api.QueryOptions) (*api.ChainQueryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryPending", s, txid, opts)
	ret0, _ := ret[0].(*api.ChainQueryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryPending indicates an expected call of QueryPending.
func (mr *MockQuerierMockRecorder) QueryPending(s, txid, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryPending", reflect.TypeOf((*MockQuerier)(nil).QueryPending), s, txid, opts)
}

// QueryPendingPagination mocks base method.
func (m *MockQuerier) QueryPendingPagination(s string, pagination api.QueryPagination, opts api.QueryOptions) (*api.MultiResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryPendingPagination", s, pagination, opts)
	ret0, _ := ret[0].(*api.MultiResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryPendingPagination indicates an expected call of QueryPendingPagination.
func (mr *MockQuerierMockRecorder) QueryPendingPagination(s, pagination, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryPendingPagination", reflect.TypeOf((*MockQuerier)(nil).QueryPendingPagination), s, pagination, opts)
}

// QueryTx mocks base method.
func (m *MockQuerier) QueryTx(id []byte, wait time.Duration, opts api.QueryOptions) (*api.TransactionQueryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryTx", id, wait, opts)
	ret0, _ := ret[0].(*api.TransactionQueryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryTx indicates an expected call of QueryTx.
func (mr *MockQuerierMockRecorder) QueryTx(id, wait, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryTx", reflect.TypeOf((*MockQuerier)(nil).QueryTx), id, wait, opts)
}

// QueryTxHistory mocks base method.
func (m *MockQuerier) QueryTxHistory(url string, pagination api.QueryPagination) (*api.MultiResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryTxHistory", url, pagination)
	ret0, _ := ret[0].(*api.MultiResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryTxHistory indicates an expected call of QueryTxHistory.
func (mr *MockQuerierMockRecorder) QueryTxHistory(url, pagination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryTxHistory", reflect.TypeOf((*MockQuerier)(nil).QueryTxHistory), url, pagination)
}

// QueryUrl mocks base method.
func (m *MockQuerier) QueryUrl(url string, opts api.QueryOptions) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryUrl", url, opts)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryUrl indicates an expected call of QueryUrl.
func (mr *MockQuerierMockRecorder) QueryUrl(url, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryUrl", reflect.TypeOf((*MockQuerier)(nil).QueryUrl), url, opts)
}

// MockABCIQueryClient is a mock of ABCIQueryClient interface.
type MockABCIQueryClient struct {
	ctrl     *gomock.Controller
	recorder *MockABCIQueryClientMockRecorder
}

// MockABCIQueryClientMockRecorder is the mock recorder for MockABCIQueryClient.
type MockABCIQueryClientMockRecorder struct {
	mock *MockABCIQueryClient
}

// NewMockABCIQueryClient creates a new mock instance.
func NewMockABCIQueryClient(ctrl *gomock.Controller) *MockABCIQueryClient {
	mock := &MockABCIQueryClient{ctrl: ctrl}
	mock.recorder = &MockABCIQueryClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockABCIQueryClient) EXPECT() *MockABCIQueryClientMockRecorder {
	return m.recorder
}

// ABCIQueryWithOptions mocks base method.
func (m *MockABCIQueryClient) ABCIQueryWithOptions(ctx context.Context, path string, data bytes.HexBytes, opts client.ABCIQueryOptions) (*coretypes.ResultABCIQuery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ABCIQueryWithOptions", ctx, path, data, opts)
	ret0, _ := ret[0].(*coretypes.ResultABCIQuery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ABCIQueryWithOptions indicates an expected call of ABCIQueryWithOptions.
func (mr *MockABCIQueryClientMockRecorder) ABCIQueryWithOptions(ctx, path, data, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ABCIQueryWithOptions", reflect.TypeOf((*MockABCIQueryClient)(nil).ABCIQueryWithOptions), ctx, path, data, opts)
}

// MockABCIBroadcastClient is a mock of ABCIBroadcastClient interface.
type MockABCIBroadcastClient struct {
	ctrl     *gomock.Controller
	recorder *MockABCIBroadcastClientMockRecorder
}

// MockABCIBroadcastClientMockRecorder is the mock recorder for MockABCIBroadcastClient.
type MockABCIBroadcastClientMockRecorder struct {
	mock *MockABCIBroadcastClient
}

// NewMockABCIBroadcastClient creates a new mock instance.
func NewMockABCIBroadcastClient(ctrl *gomock.Controller) *MockABCIBroadcastClient {
	mock := &MockABCIBroadcastClient{ctrl: ctrl}
	mock.recorder = &MockABCIBroadcastClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockABCIBroadcastClient) EXPECT() *MockABCIBroadcastClientMockRecorder {
	return m.recorder
}

// BroadcastTxAsync mocks base method.
func (m *MockABCIBroadcastClient) BroadcastTxAsync(arg0 context.Context, arg1 types.Tx) (*coretypes.ResultBroadcastTx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BroadcastTxAsync", arg0, arg1)
	ret0, _ := ret[0].(*coretypes.ResultBroadcastTx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BroadcastTxAsync indicates an expected call of BroadcastTxAsync.
func (mr *MockABCIBroadcastClientMockRecorder) BroadcastTxAsync(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BroadcastTxAsync", reflect.TypeOf((*MockABCIBroadcastClient)(nil).BroadcastTxAsync), arg0, arg1)
}

// BroadcastTxSync mocks base method.
func (m *MockABCIBroadcastClient) BroadcastTxSync(arg0 context.Context, arg1 types.Tx) (*coretypes.ResultBroadcastTx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BroadcastTxSync", arg0, arg1)
	ret0, _ := ret[0].(*coretypes.ResultBroadcastTx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BroadcastTxSync indicates an expected call of BroadcastTxSync.
func (mr *MockABCIBroadcastClientMockRecorder) BroadcastTxSync(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BroadcastTxSync", reflect.TypeOf((*MockABCIBroadcastClient)(nil).BroadcastTxSync), arg0, arg1)
}

// CheckTx mocks base method.
func (m *MockABCIBroadcastClient) CheckTx(ctx context.Context, tx types.Tx) (*coretypes.ResultCheckTx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckTx", ctx, tx)
	ret0, _ := ret[0].(*coretypes.ResultCheckTx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckTx indicates an expected call of CheckTx.
func (mr *MockABCIBroadcastClientMockRecorder) CheckTx(ctx, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckTx", reflect.TypeOf((*MockABCIBroadcastClient)(nil).CheckTx), ctx, tx)
}
