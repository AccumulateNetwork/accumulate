// Copyright 2022 The Accumulate Authors
//
// Use of this source code is governed by an MIT-style
// license that can be found in the LICENSE file or at
// https://opensource.org/licenses/MIT.

package bpt2_test

// GENERATED BY go run ./tools/cmd/gen-model. DO NOT EDIT.

//lint:file-ignore S1008,U1000 generated code

import (
	"gitlab.com/accumulatenetwork/accumulate/internal/database/record"
	"gitlab.com/accumulatenetwork/accumulate/internal/logging"
	"gitlab.com/accumulatenetwork/accumulate/pkg/errors"
)

type ChangeSet struct {
	logger logging.OptionalLogger
	store  record.Store

	bpt *BPT
}

func (c *ChangeSet) BPT() *BPT {
	return getOrCreateField(&c.bpt, func() *BPT {
		return newBPT(c, c.logger.L, c.store, record.Key{}.Append("BPT"), "bpt", "bpt")
	})
}

func (c *ChangeSet) Resolve(key record.Key) (record.Record, record.Key, error) {
	if len(key) == 0 {
		return nil, nil, errors.InternalError.With("bad key for change set")
	}

	switch key[0] {
	case "BPT":
		return c.BPT(), key[1:], nil
	default:
		return nil, nil, errors.InternalError.With("bad key for change set")
	}
}

func (c *ChangeSet) IsDirty() bool {
	if c == nil {
		return false
	}

	if fieldIsDirty(c.bpt) {
		return true
	}

	return false
}

func (c *ChangeSet) Commit() error {
	if c == nil {
		return nil
	}

	var err error
	commitField(&err, c.bpt)

	return err
}

func getOrCreateField[T any](ptr *T, create func() T) T {
	var z T
	if any(*ptr) != any(z) {
		return *ptr
	}

	*ptr = create()
	return *ptr
}

func getOrCreateMap[T any, K comparable](ptr *map[K]T, key K, create func() T) T {
	if *ptr == nil {
		*ptr = map[K]T{}
	}

	if v, ok := (*ptr)[key]; ok {
		return v
	}

	v := create()
	(*ptr)[key] = v
	return v
}

func commitField[T record.Record](lastErr *error, field T) {
	var z T
	if *lastErr != nil || any(field) == any(z) {
		return
	}

	*lastErr = field.Commit()
}

func fieldIsDirty[T record.Record](field T) bool {
	var z T
	return any(field) != any(z) && field.IsDirty()
}
