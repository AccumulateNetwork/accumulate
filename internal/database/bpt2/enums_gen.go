// Copyright 2022 The Accumulate Authors
//
// Use of this source code is governed by an MIT-style
// license that can be found in the LICENSE file or at
// https://opensource.org/licenses/MIT.

package bpt2

// GENERATED BY go run ./tools/cmd/gen-enum. DO NOT EDIT.

import (
	"encoding/json"
	"fmt"
	"strings"
)

// EntryTypeNil is the type of a nil entry.
const EntryTypeNil EntryType = 1

// EntryTypeNode is the type of a [Node].
const EntryTypeNode EntryType = 2

// EntryTypeValue is the type of a [Value].
const EntryTypeValue EntryType = 3

// EntryTypeNotLoaded indicates an [Entry] not yet loaded.
const EntryTypeNotLoaded EntryType = 4

// GetEnumValue returns the value of the Entry Type
func (v EntryType) GetEnumValue() uint64 { return uint64(v) }

// SetEnumValue sets the value. SetEnumValue returns false if the value is invalid.
func (v *EntryType) SetEnumValue(id uint64) bool {
	u := EntryType(id)
	switch u {
	case EntryTypeNil, EntryTypeNode, EntryTypeValue, EntryTypeNotLoaded:
		*v = u
		return true
	default:
		return false
	}
}

// String returns the name of the Entry Type.
func (v EntryType) String() string {
	switch v {
	case EntryTypeNil:
		return "nil"
	case EntryTypeNode:
		return "node"
	case EntryTypeValue:
		return "value"
	case EntryTypeNotLoaded:
		return "notLoaded"
	default:
		return fmt.Sprintf("EntryType:%d", v)
	}
}

// EntryTypeByName returns the named Entry Type.
func EntryTypeByName(name string) (EntryType, bool) {
	switch strings.ToLower(name) {
	case "nil":
		return EntryTypeNil, true
	case "node":
		return EntryTypeNode, true
	case "value":
		return EntryTypeValue, true
	case "notloaded":
		return EntryTypeNotLoaded, true
	default:
		return 0, false
	}
}

// MarshalJSON marshals the Entry Type to JSON as a string.
func (v EntryType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.String())
}

// UnmarshalJSON unmarshals the Entry Type from JSON as a string.
func (v *EntryType) UnmarshalJSON(data []byte) error {
	var s string
	err := json.Unmarshal(data, &s)
	if err != nil {
		return err
	}

	var ok bool
	*v, ok = EntryTypeByName(s)
	if !ok || strings.ContainsRune(v.String(), ':') {
		return fmt.Errorf("invalid Entry Type %q", s)
	}
	return nil
}
