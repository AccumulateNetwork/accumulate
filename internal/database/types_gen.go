package database

// GENERATED BY go run ./tools/cmd/genmarshal. DO NOT EDIT.

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"strings"

	"gitlab.com/accumulatenetwork/accumulate/internal/encoding"
	"gitlab.com/accumulatenetwork/accumulate/types/api/transactions"
)

type txSignatures struct {
	fieldsSet  []bool
	Signatures []*transactions.ED25519Sig `json:"signatures,omitempty" form:"signatures" query:"signatures" validate:"required"`
}

type txSyntheticTxns struct {
	fieldsSet []bool
	Txids     [][32]byte `json:"txids,omitempty" form:"txids" query:"txids" validate:"required"`
}

func (v *txSignatures) Equal(u *txSignatures) bool {
	if len(v.Signatures) != len(u.Signatures) {
		return false
	}
	for i := range v.Signatures {
		if !((v.Signatures[i]).Equal(u.Signatures[i])) {
			return false
		}
	}

	return true
}

func (v *txSyntheticTxns) Equal(u *txSyntheticTxns) bool {
	if len(v.Txids) != len(u.Txids) {
		return false
	}
	for i := range v.Txids {
		if !(v.Txids[i] == u.Txids[i]) {
			return false
		}
	}

	return true
}

var fieldNames_txSignatures = []string{
	1: "Signatures",
}

func (v *txSignatures) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	if !(len(v.Signatures) == 0) {
		for _, v := range v.Signatures {
			writer.WriteValue(1, v)
		}
	}

	_, _, err := writer.Reset(fieldNames_txSignatures)
	return buffer.Bytes(), err
}

func (v *txSignatures) IsValid() error {
	var errs []string

	if len(v.fieldsSet) > 1 && !v.fieldsSet[1] {
		errs = append(errs, "field Signatures is missing")
	} else if len(v.Signatures) == 0 {
		errs = append(errs, "field Signatures is not set")
	}

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

var fieldNames_txSyntheticTxns = []string{
	1: "Txids",
}

func (v *txSyntheticTxns) MarshalBinary() ([]byte, error) {
	buffer := new(bytes.Buffer)
	writer := encoding.NewWriter(buffer)

	if !(len(v.Txids) == 0) {
		for _, v := range v.Txids {
			writer.WriteHash(1, &v)
		}
	}

	_, _, err := writer.Reset(fieldNames_txSyntheticTxns)
	return buffer.Bytes(), err
}

func (v *txSyntheticTxns) IsValid() error {
	var errs []string

	if len(v.fieldsSet) > 1 && !v.fieldsSet[1] {
		errs = append(errs, "field Txids is missing")
	} else if len(v.Txids) == 0 {
		errs = append(errs, "field Txids is not set")
	}

	switch len(errs) {
	case 0:
		return nil
	case 1:
		return errors.New(errs[0])
	default:
		return errors.New(strings.Join(errs, "; "))
	}
}

func (v *txSignatures) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *txSignatures) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	for {
		if x := new(transactions.ED25519Sig); reader.ReadValue(1, x.UnmarshalBinary) {
			v.Signatures = append(v.Signatures, x)
		} else {
			break
		}
	}

	seen, err := reader.Reset(fieldNames_txSignatures)
	v.fieldsSet = seen
	return err
}

func (v *txSyntheticTxns) UnmarshalBinary(data []byte) error {
	return v.UnmarshalBinaryFrom(bytes.NewReader(data))
}

func (v *txSyntheticTxns) UnmarshalBinaryFrom(rd io.Reader) error {
	reader := encoding.NewReader(rd)

	for {
		if x, ok := reader.ReadHash(1); ok {
			v.Txids = append(v.Txids, *x)
		} else {
			break
		}
	}

	seen, err := reader.Reset(fieldNames_txSyntheticTxns)
	v.fieldsSet = seen
	return err
}

func (v *txSyntheticTxns) MarshalJSON() ([]byte, error) {
	u := struct {
		Txids []string `json:"txids,omitempty"`
	}{}
	u.Txids = make([]string, len(v.Txids))
	for i, x := range v.Txids {
		u.Txids[i] = encoding.ChainToJSON(x)
	}
	return json.Marshal(&u)
}

func (v *txSyntheticTxns) UnmarshalJSON(data []byte) error {
	u := struct {
		Txids []string `json:"txids,omitempty"`
	}{}
	u.Txids = make([]string, len(v.Txids))
	for i, x := range v.Txids {
		u.Txids[i] = encoding.ChainToJSON(x)
	}
	if err := json.Unmarshal(data, &u); err != nil {
		return err
	}
	v.Txids = make([][32]byte, len(u.Txids))
	for i, x := range u.Txids {
		if x, err := encoding.ChainFromJSON(x); err != nil {
			return fmt.Errorf("error decoding Txids: %w", err)
		} else {
			v.Txids[i] = x
		}
	}
	return nil
}
