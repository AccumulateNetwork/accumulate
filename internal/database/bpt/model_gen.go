// Copyright 2022 The Accumulate Authors
//
// Use of this source code is governed by an MIT-style
// license that can be found in the LICENSE file or at
// https://opensource.org/licenses/MIT.

package bpt

// GENERATED BY go run ./tools/cmd/gen-model. DO NOT EDIT.

//lint:file-ignore S1008,U1000 generated code

import (
	"gitlab.com/accumulatenetwork/accumulate/internal/database/record"
	"gitlab.com/accumulatenetwork/accumulate/internal/logging"
)

type BPT struct {
	logger  logging.OptionalLogger
	store   record.Store
	key     *record.Key
	label   string
	pending map[[32]byte][32]byte

	state record.Value[*parameters]
	root  *rootRecord
}

func (c *BPT) baseIsDirty() bool {
	if c == nil {
		return false
	}

	if record.FieldIsDirty(c.state) {
		return true
	}
	if record.FieldIsDirty(c.root) {
		return true
	}

	return false
}

func (c *BPT) baseWalkChanges(fn record.WalkFunc) error {
	if c == nil {
		return nil
	}

	var err error
	record.FieldWalkChanges(&err, c.state, fn)
	record.FieldWalkChanges(&err, c.root, fn)
	return err
}

func (c *BPT) baseCommit() error {
	if c == nil {
		return nil
	}

	var err error
	record.FieldCommit(&err, c.state)
	record.FieldCommit(&err, c.root)

	return err
}
