// Code generated by gitlab.com/accumulatenetwork/core/schema. DO NOT EDIT.

package database

import (
	"time"

	encoding "gitlab.com/accumulatenetwork/accumulate/pkg/types/encoding"
	protocol "gitlab.com/accumulatenetwork/accumulate/protocol"
	"gitlab.com/accumulatenetwork/core/schema/pkg/binary"
	"gitlab.com/accumulatenetwork/core/schema/pkg/widget"
)

type BlockLedger struct {
	Index   uint64
	Time    time.Time
	Entries []*protocol.BlockEntry
}

var wBlockLedger = widget.ForComposite(widget.Fields[BlockLedger]{
	{Name: "index", ID: 1, Widget: widget.ForUint(func(v *BlockLedger) *uint64 { return &v.Index })},
	{Name: "time", ID: 2, Widget: widget.For(encoding.TimeWidget, func(v *BlockLedger) *time.Time { return &v.Time })},
	{Name: "entries", ID: 3, Widget: widget.ForArray(widget.ForValue(widget.GetElem[[]*protocol.BlockEntry]), func(v *BlockLedger) *[]*protocol.BlockEntry { return &v.Entries })},
}, widget.Identity[*BlockLedger])

// Copy returns a copy of the BlockLedger.
func (v *BlockLedger) Copy() *BlockLedger {
	if v == nil {
		return nil
	}
	var u = new(BlockLedger)
	wBlockLedger.CopyTo(u, v)
	return u
}

// EqualBlockLedger returns true if V is equal to U.
func (v *BlockLedger) Equal(u *BlockLedger) bool {
	return wBlockLedger.Equal(v, u)
}

// MarshalBinary marshals the BlockLedger to JSON.
func (v *BlockLedger) MarshalJSON() ([]byte, error) {
	return widget.MarshalJSON(v, wBlockLedger)
}

// UnmarshalJSON unmarshals the BlockLedger from JSON.
func (v *BlockLedger) UnmarshalJSON(b []byte) error {
	return widget.UnmarshalJSON(v, wBlockLedger, b)
}

// MarshalBinary marshals the BlockLedger to bytes using [binary].
func (v *BlockLedger) MarshalBinary() ([]byte, error) {
	return widget.MarshalBinary(v, wBlockLedger)
}

// MarshalBinary marshals the BlockLedger to a [binary.Encoder].
func (v *BlockLedger) MarshalBinaryV2(enc *binary.Encoder) error {
	return wBlockLedger.MarshalBinary(enc, v)
}

// UnmarshalBinary unmarshals the BlockLedger from bytes using [binary].
func (v *BlockLedger) UnmarshalBinary(b []byte) error {
	return widget.UnmarshalBinary(v, wBlockLedger, b)
}

// UnmarshalBinary unmarshals the BlockLedger from a [binary.Decoder].
func (v *BlockLedger) UnmarshalBinaryV2(dec *binary.Decoder) error {
	return wBlockLedger.UnmarshalBinary(dec, v)
}
