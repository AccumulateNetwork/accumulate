package database

// GENERATED BY go run ./tools/cmd/gen-record. DO NOT EDIT.

import (
	"strings"

	"gitlab.com/accumulatenetwork/accumulate/internal/errors"
	"gitlab.com/accumulatenetwork/accumulate/internal/logging"
	"gitlab.com/accumulatenetwork/accumulate/internal/url"
	"gitlab.com/accumulatenetwork/accumulate/protocol"
	"gitlab.com/accumulatenetwork/accumulate/smt/managed"
	"gitlab.com/accumulatenetwork/accumulate/smt/storage"
)

type ChangeSet struct {
	store    recordStore
	logger   logging.OptionalLogger
	done     bool
	writable bool
	id       uint64
	nextId   uint64

	account     map[storage.Key]*Account
	transaction map[storage.Key]*Transaction
}

func (c *ChangeSet) Account(url *url.URL) *Account {
	return getOrCreateMap(&c.account, recordKey{}.Append("Account", url), func() *Account {
		v := new(Account)
		v.store = c.store
		v.key = recordKey{}.Append("Account", url)
		v.container = c
		return v
	})
}

func (c *ChangeSet) resolve(key recordKey) (record, recordKey, error) {
	switch key[0] {
	case "Account":
		if len(key) < 2 {
			return nil, nil, errors.New(errors.StatusInternalError, "bad key for change set")
		}
		url, okUrl := key[1].(*url.URL)
		if okUrl {
			return nil, nil, errors.New(errors.StatusInternalError, "bad key for change set")
		}
		v := c.Account(url)
		return v, key[2:], nil
	case "Transaction":
		if len(key) < 2 {
			return nil, nil, errors.New(errors.StatusInternalError, "bad key for change set")
		}
		hash, okHash := key[1].([]byte)
		if okHash {
			return nil, nil, errors.New(errors.StatusInternalError, "bad key for change set")
		}
		v := c.Transaction(hash)
		return v, key[2:], nil
	default:
		return nil, nil, errors.New(errors.StatusInternalError, "bad key for change set")
	}
}

func (c *ChangeSet) isDirty() bool {
	if c == nil {
		return false
	}

	for _, v := range c.account {
		if v.isDirty() {
			return true
		}
	}
	for _, v := range c.transaction {
		if v.isDirty() {
			return true
		}
	}

	return false
}

func (c *ChangeSet) dirtyChains() []*Chain {
	if c == nil {
		return nil
	}

	var chains []*Chain

	for _, v := range c.account {
		chains = append(chains, v.dirtyChains()...)
	}

	return chains
}

func (c *ChangeSet) commit() error {
	if c == nil {
		return nil
	}

	for _, v := range c.account {
		if err := v.commit(); err != nil {
			return errors.Wrap(errors.StatusUnknown, err)
		}
	}
	for _, v := range c.transaction {
		if err := v.commit(); err != nil {
			return errors.Wrap(errors.StatusUnknown, err)
		}
	}

	return nil
}

type Account struct {
	store     recordStore
	key       recordKey
	container *ChangeSet

	state                         *Wrapped[protocol.Account]
	pending                       *Set[*url.TxID]
	syntheticForAnchor            map[storage.Key]*Set[*url.TxID]
	mainChain                     *Chain
	signatureChain                *Chain
	rootChain                     *AccountRootChain
	syntheticChain                *Chain
	anchorChain                   map[storage.Key]*AccountAnchorChain
	mainIndexChain                *MajorMinorIndexChain
	signatureIndexChain           *MajorMinorIndexChain
	syntheticIndexChain           *MajorMinorIndexChain
	rootIndexChain                *MajorMinorIndexChain
	anchorIndexChain              map[storage.Key]*MajorMinorIndexChain
	syntheticProducedChain        map[storage.Key]*Chain
	chains                        *Set[*protocol.ChainMetadata]
	syntheticAnchors              *Set[[32]byte]
	directory                     *Counted[*url.URL]
	data                          *AccountData
	blockChainUpdates             *Set[*ChainUpdate]
	producedSyntheticTransactions *Set[*BlockStateSynthTxnEntry]
}

func (c *Account) State() *Wrapped[protocol.Account] {
	return getOrCreateField(&c.state, func() *Wrapped[protocol.Account] {
		return newWrapped(c.store, c.key.Append("State"), "account %[2]v state", false, newUnion(protocol.UnmarshalAccount))
	})
}

func (c *Account) Pending() *Set[*url.TxID] {
	return getOrCreateField(&c.pending, func() *Set[*url.TxID] {
		return newSet(c.store, c.key.Append("Pending"), "account %[2]v pending", newWrapperSlice(txidWrapper), compareTxid)
	})
}

func (c *Account) SyntheticForAnchor(anchor [32]byte) *Set[*url.TxID] {
	return getOrCreateMap(&c.syntheticForAnchor, c.key.Append("SyntheticForAnchor", anchor), func() *Set[*url.TxID] {
		return newSet(c.store, c.key.Append("SyntheticForAnchor", anchor), "account %[2]v synthetic for anchor %[4]x", newWrapperSlice(txidWrapper), compareTxid)
	})
}

func (c *Account) MainChain() *Chain {
	return getOrCreateField(&c.mainChain, func() *Chain {
		return newChain(c.store, c.key.Append("MainChain"), protocol.ChainTypeTransaction, "main", "account %[2]v main chain")
	})
}

func (c *Account) SignatureChain() *Chain {
	return getOrCreateField(&c.signatureChain, func() *Chain {
		return newChain(c.store, c.key.Append("SignatureChain"), protocol.ChainTypeTransaction, "signature", "account %[2]v signature chain")
	})
}

func (c *Account) RootChain() *AccountRootChain {
	return getOrCreateField(&c.rootChain, func() *AccountRootChain {
		v := new(AccountRootChain)
		v.store = c.store
		v.key = c.key.Append("RootChain")
		v.container = c
		return v
	})
}

func (c *Account) SyntheticChain() *Chain {
	return getOrCreateField(&c.syntheticChain, func() *Chain {
		return newChain(c.store, c.key.Append("SyntheticChain"), protocol.ChainTypeTransaction, "synthetic", "account %[2]v synthetic chain")
	})
}

func (c *Account) AnchorChain(subnetId string) *AccountAnchorChain {
	return getOrCreateMap(&c.anchorChain, c.key.Append("AnchorChain", subnetId), func() *AccountAnchorChain {
		v := new(AccountAnchorChain)
		v.store = c.store
		v.key = c.key.Append("AnchorChain", subnetId)
		v.container = c
		return v
	})
}

func (c *Account) MainIndexChain() *MajorMinorIndexChain {
	return getOrCreateField(&c.mainIndexChain, func() *MajorMinorIndexChain {
		return newMajorMinorIndexChain(c.store, c.key.Append("MainIndexChain"), "main-index", "account %[2]v main index chain")
	})
}

func (c *Account) SignatureIndexChain() *MajorMinorIndexChain {
	return getOrCreateField(&c.signatureIndexChain, func() *MajorMinorIndexChain {
		return newMajorMinorIndexChain(c.store, c.key.Append("SignatureIndexChain"), "signature-index", "account %[2]v signature index chain")
	})
}

func (c *Account) SyntheticIndexChain() *MajorMinorIndexChain {
	return getOrCreateField(&c.syntheticIndexChain, func() *MajorMinorIndexChain {
		return newMajorMinorIndexChain(c.store, c.key.Append("SyntheticIndexChain"), "synthetic-index", "account %[2]v synthetic index chain")
	})
}

func (c *Account) RootIndexChain() *MajorMinorIndexChain {
	return getOrCreateField(&c.rootIndexChain, func() *MajorMinorIndexChain {
		return newMajorMinorIndexChain(c.store, c.key.Append("RootIndexChain"), "root-index", "account %[2]v root index chain")
	})
}

func (c *Account) AnchorIndexChain(subnetId string) *MajorMinorIndexChain {
	return getOrCreateMap(&c.anchorIndexChain, c.key.Append("AnchorIndexChain", subnetId), func() *MajorMinorIndexChain {
		return newMajorMinorIndexChain(c.store, c.key.Append("AnchorIndexChain", subnetId), "anchor-index(%[4]v)", "account %[2]v anchor index chain %[4]v")
	})
}

func (c *Account) SyntheticProducedChain(subnetId string) *Chain {
	return getOrCreateMap(&c.syntheticProducedChain, c.key.Append("SyntheticProducedChain", subnetId), func() *Chain {
		return newChain(c.store, c.key.Append("SyntheticProducedChain", subnetId), protocol.ChainTypeIndex, "synthetic-produced(%[4]v)", "account %[2]v synthetic produced chain %[4]v")
	})
}

func (c *Account) Chains() *Set[*protocol.ChainMetadata] {
	return getOrCreateField(&c.chains, func() *Set[*protocol.ChainMetadata] {
		new := func() (v *protocol.ChainMetadata) { return new(protocol.ChainMetadata) }
		cmp := func(u, v *protocol.ChainMetadata) int { return u.Compare(v) }
		return newSet(c.store, c.key.Append("Chains"), "account %[2]v chains", newSlice(new), cmp)
	})
}

func (c *Account) SyntheticAnchors() *Set[[32]byte] {
	return getOrCreateField(&c.syntheticAnchors, func() *Set[[32]byte] {
		return newSet(c.store, c.key.Append("SyntheticAnchors"), "account %[2]v synthetic anchors", newWrapperSlice(hashWrapper), compareHash)
	})
}

func (c *Account) Directory() *Counted[*url.URL] {
	return getOrCreateField(&c.directory, func() *Counted[*url.URL] {

		return newCounted(c.store, c.key.Append("Directory"), "account %[2]v directory", newCountableWrapped(urlWrapper))
	})
}

func (c *Account) Data() *AccountData {
	return getOrCreateField(&c.data, func() *AccountData {
		v := new(AccountData)
		v.store = c.store
		v.key = c.key.Append("Data")
		v.container = c
		return v
	})
}

func (c *Account) BlockChainUpdates() *Set[*ChainUpdate] {
	return getOrCreateField(&c.blockChainUpdates, func() *Set[*ChainUpdate] {
		new := func() (v *ChainUpdate) { return new(ChainUpdate) }
		cmp := func(u, v *ChainUpdate) int { return u.Compare(v) }
		return newSet(c.store, c.key.Append("BlockChainUpdates"), "account %[2]v block chain updates", newSlice(new), cmp)
	})
}

func (c *Account) ProducedSyntheticTransactions() *Set[*BlockStateSynthTxnEntry] {
	return getOrCreateField(&c.producedSyntheticTransactions, func() *Set[*BlockStateSynthTxnEntry] {
		new := func() (v *BlockStateSynthTxnEntry) { return new(BlockStateSynthTxnEntry) }
		cmp := func(u, v *BlockStateSynthTxnEntry) int { return u.Compare(v) }
		return newSet(c.store, c.key.Append("ProducedSyntheticTransactions"), "account %[2]v produced synthetic transactions", newSlice(new), cmp)
	})
}

func (c *Account) resolve(key recordKey) (record, recordKey, error) {
	switch key[0] {
	case "State":
		return c.state, key[1:], nil
	case "Pending":
		return c.pending, key[1:], nil
	case "SyntheticForAnchor":
		if len(key) < 2 {
			return nil, nil, errors.New(errors.StatusInternalError, "bad key for account")
		}
		anchor, okAnchor := key[1].([32]byte)
		if okAnchor {
			return nil, nil, errors.New(errors.StatusInternalError, "bad key for account")
		}
		v := c.SyntheticForAnchor(anchor)
		return v, key[2:], nil
	case "MainChain":
		return c.mainChain, key[1:], nil
	case "SignatureChain":
		return c.signatureChain, key[1:], nil
	case "RootChain":
		return c.rootChain, key[1:], nil
	case "SyntheticChain":
		return c.syntheticChain, key[1:], nil
	case "AnchorChain":
		if len(key) < 2 {
			return nil, nil, errors.New(errors.StatusInternalError, "bad key for account")
		}
		subnetId, okSubnetId := key[1].(string)
		if okSubnetId {
			return nil, nil, errors.New(errors.StatusInternalError, "bad key for account")
		}
		v := c.AnchorChain(subnetId)
		return v, key[2:], nil
	case "MainIndexChain":
		return c.mainIndexChain, key[1:], nil
	case "SignatureIndexChain":
		return c.signatureIndexChain, key[1:], nil
	case "SyntheticIndexChain":
		return c.syntheticIndexChain, key[1:], nil
	case "RootIndexChain":
		return c.rootIndexChain, key[1:], nil
	case "AnchorIndexChain":
		if len(key) < 2 {
			return nil, nil, errors.New(errors.StatusInternalError, "bad key for account")
		}
		subnetId, okSubnetId := key[1].(string)
		if okSubnetId {
			return nil, nil, errors.New(errors.StatusInternalError, "bad key for account")
		}
		v := c.AnchorIndexChain(subnetId)
		return v, key[2:], nil
	case "SyntheticProducedChain":
		if len(key) < 2 {
			return nil, nil, errors.New(errors.StatusInternalError, "bad key for account")
		}
		subnetId, okSubnetId := key[1].(string)
		if okSubnetId {
			return nil, nil, errors.New(errors.StatusInternalError, "bad key for account")
		}
		v := c.SyntheticProducedChain(subnetId)
		return v, key[2:], nil
	case "Chains":
		return c.chains, key[1:], nil
	case "SyntheticAnchors":
		return c.syntheticAnchors, key[1:], nil
	case "Directory":
		return c.directory, key[1:], nil
	case "Data":
		return c.data, key[1:], nil
	case "BlockChainUpdates":
		return c.blockChainUpdates, key[1:], nil
	case "ProducedSyntheticTransactions":
		return c.producedSyntheticTransactions, key[1:], nil
	default:
		return nil, nil, errors.New(errors.StatusInternalError, "bad key for account")
	}
}

func (c *Account) isDirty() bool {
	if c == nil {
		return false
	}

	if c.state.isDirty() {
		return true
	}
	if c.pending.isDirty() {
		return true
	}
	for _, v := range c.syntheticForAnchor {
		if v.isDirty() {
			return true
		}
	}
	if c.mainChain.isDirty() {
		return true
	}
	if c.signatureChain.isDirty() {
		return true
	}
	if c.rootChain.isDirty() {
		return true
	}
	if c.syntheticChain.isDirty() {
		return true
	}
	for _, v := range c.anchorChain {
		if v.isDirty() {
			return true
		}
	}
	if c.mainIndexChain.isDirty() {
		return true
	}
	if c.signatureIndexChain.isDirty() {
		return true
	}
	if c.syntheticIndexChain.isDirty() {
		return true
	}
	if c.rootIndexChain.isDirty() {
		return true
	}
	for _, v := range c.anchorIndexChain {
		if v.isDirty() {
			return true
		}
	}
	for _, v := range c.syntheticProducedChain {
		if v.isDirty() {
			return true
		}
	}
	if c.chains.isDirty() {
		return true
	}
	if c.syntheticAnchors.isDirty() {
		return true
	}
	if c.directory.isDirty() {
		return true
	}
	if c.data.isDirty() {
		return true
	}
	if c.blockChainUpdates.isDirty() {
		return true
	}
	if c.producedSyntheticTransactions.isDirty() {
		return true
	}

	return false
}

func (c *Account) resolveChain(name string) (*Chain, bool) {
	switch {
	case name == "main":
		return c.MainChain(), true

	case name == "signature":
		return c.SignatureChain(), true

	case strings.HasPrefix(name, "root-"):
		return c.RootChain().resolveChain(name[len("root-"):])

	case name == "synthetic":
		return c.SyntheticChain(), true

	case strings.HasPrefix(name, "anchor("):
		name = name[len("anchor("):]
		i := strings.Index(name, ")")
		if i < 0 {
			return nil, false
		}

		params := strings.Split(name[:i], ",")
		name = name[i+1:]
		if len(params) != 1 {
			return nil, false
		}
		paramSubnetId, err := parseString(params[0])
		if err != nil {
			return nil, false
		}

		return c.AnchorChain(paramSubnetId).resolveChain(name)

	case strings.HasPrefix(name, "synthetic-produced("):
		name = name[len("synthetic-produced("):]
		i := strings.Index(name, ")")
		if i < 0 {
			return nil, false
		}

		params := strings.Split(name[:i], ",")
		name = name[i+1:]
		if len(params) != 1 {
			return nil, false
		}
		paramSubnetId, err := parseString(params[0])
		if err != nil {
			return nil, false
		}

		return c.SyntheticProducedChain(paramSubnetId), true

	default:
		return nil, false
	}
}

func (c *Account) dirtyChains() []*Chain {
	if c == nil {
		return nil
	}

	var chains []*Chain

	if c.mainChain.isDirty() {
		chains = append(chains, c.mainChain)
	}
	if c.signatureChain.isDirty() {
		chains = append(chains, c.signatureChain)
	}
	chains = append(chains, c.rootChain.dirtyChains()...)
	if c.syntheticChain.isDirty() {
		chains = append(chains, c.syntheticChain)
	}
	for _, v := range c.anchorChain {
		chains = append(chains, v.dirtyChains()...)
	}
	for _, v := range c.syntheticProducedChain {
		if v.isDirty() {
			chains = append(chains, v)
		}
	}

	return chains
}

func (c *Account) baseCommit() error {
	if c == nil {
		return nil
	}

	if err := c.state.commit(); err != nil {
		return errors.Wrap(errors.StatusUnknown, err)
	}
	if err := c.pending.commit(); err != nil {
		return errors.Wrap(errors.StatusUnknown, err)
	}
	for _, v := range c.syntheticForAnchor {
		if err := v.commit(); err != nil {
			return errors.Wrap(errors.StatusUnknown, err)
		}
	}
	if err := c.mainChain.commit(); err != nil {
		return errors.Wrap(errors.StatusUnknown, err)
	}
	if err := c.signatureChain.commit(); err != nil {
		return errors.Wrap(errors.StatusUnknown, err)
	}
	if err := c.rootChain.commit(); err != nil {
		return errors.Wrap(errors.StatusUnknown, err)
	}
	if err := c.syntheticChain.commit(); err != nil {
		return errors.Wrap(errors.StatusUnknown, err)
	}
	for _, v := range c.anchorChain {
		if err := v.commit(); err != nil {
			return errors.Wrap(errors.StatusUnknown, err)
		}
	}
	if err := c.mainIndexChain.commit(); err != nil {
		return errors.Wrap(errors.StatusUnknown, err)
	}
	if err := c.signatureIndexChain.commit(); err != nil {
		return errors.Wrap(errors.StatusUnknown, err)
	}
	if err := c.syntheticIndexChain.commit(); err != nil {
		return errors.Wrap(errors.StatusUnknown, err)
	}
	if err := c.rootIndexChain.commit(); err != nil {
		return errors.Wrap(errors.StatusUnknown, err)
	}
	for _, v := range c.anchorIndexChain {
		if err := v.commit(); err != nil {
			return errors.Wrap(errors.StatusUnknown, err)
		}
	}
	for _, v := range c.syntheticProducedChain {
		if err := v.commit(); err != nil {
			return errors.Wrap(errors.StatusUnknown, err)
		}
	}
	if err := c.chains.commit(); err != nil {
		return errors.Wrap(errors.StatusUnknown, err)
	}
	if err := c.syntheticAnchors.commit(); err != nil {
		return errors.Wrap(errors.StatusUnknown, err)
	}
	if err := c.directory.commit(); err != nil {
		return errors.Wrap(errors.StatusUnknown, err)
	}
	if err := c.data.commit(); err != nil {
		return errors.Wrap(errors.StatusUnknown, err)
	}
	if err := c.blockChainUpdates.commit(); err != nil {
		return errors.Wrap(errors.StatusUnknown, err)
	}
	if err := c.producedSyntheticTransactions.commit(); err != nil {
		return errors.Wrap(errors.StatusUnknown, err)
	}

	return nil
}

type AccountRootChain struct {
	store     recordStore
	key       recordKey
	container *Account

	minor *Chain
	major *Chain
}

func (c *AccountRootChain) Minor() *Chain {
	return getOrCreateField(&c.minor, func() *Chain {
		return newChain(c.store, c.key.Append("Minor"), protocol.ChainTypeAnchor, "root-minor", "account %[2]v root chain minor")
	})
}

func (c *AccountRootChain) Major() *Chain {
	return getOrCreateField(&c.major, func() *Chain {
		return newChain(c.store, c.key.Append("Major"), protocol.ChainTypeAnchor, "root-major", "account %[2]v root chain major")
	})
}

func (c *AccountRootChain) resolve(key recordKey) (record, recordKey, error) {
	switch key[0] {
	case "Minor":
		return c.minor, key[1:], nil
	case "Major":
		return c.major, key[1:], nil
	default:
		return nil, nil, errors.New(errors.StatusInternalError, "bad key for root chain")
	}
}

func (c *AccountRootChain) isDirty() bool {
	if c == nil {
		return false
	}

	if c.minor.isDirty() {
		return true
	}
	if c.major.isDirty() {
		return true
	}

	return false
}

func (c *AccountRootChain) resolveChain(name string) (*Chain, bool) {
	switch {
	case name == "minor":
		return c.Minor(), true

	case name == "major":
		return c.Major(), true

	default:
		return nil, false
	}
}

func (c *AccountRootChain) dirtyChains() []*Chain {
	if c == nil {
		return nil
	}

	var chains []*Chain

	if c.minor.isDirty() {
		chains = append(chains, c.minor)
	}
	if c.major.isDirty() {
		chains = append(chains, c.major)
	}

	return chains
}

func (c *AccountRootChain) commit() error {
	if c == nil {
		return nil
	}

	if err := c.minor.commit(); err != nil {
		return errors.Wrap(errors.StatusUnknown, err)
	}
	if err := c.major.commit(); err != nil {
		return errors.Wrap(errors.StatusUnknown, err)
	}

	return nil
}

type AccountAnchorChain struct {
	store     recordStore
	key       recordKey
	container *Account

	root *Chain
	bpt  *Chain
}

func (c *AccountAnchorChain) Root() *Chain {
	return getOrCreateField(&c.root, func() *Chain {
		return newChain(c.store, c.key.Append("Root"), protocol.ChainTypeAnchor, "anchor(%[4]v)-root", "account %[2]v anchor chain %[4]v root")
	})
}

func (c *AccountAnchorChain) BPT() *Chain {
	return getOrCreateField(&c.bpt, func() *Chain {
		return newChain(c.store, c.key.Append("BPT"), protocol.ChainTypeAnchor, "anchor(%[4]v)-bpt", "account %[2]v anchor chain %[4]v bpt")
	})
}

func (c *AccountAnchorChain) resolve(key recordKey) (record, recordKey, error) {
	switch key[0] {
	case "Root":
		return c.root, key[1:], nil
	case "BPT":
		return c.bpt, key[1:], nil
	default:
		return nil, nil, errors.New(errors.StatusInternalError, "bad key for anchor chain")
	}
}

func (c *AccountAnchorChain) isDirty() bool {
	if c == nil {
		return false
	}

	if c.root.isDirty() {
		return true
	}
	if c.bpt.isDirty() {
		return true
	}

	return false
}

func (c *AccountAnchorChain) resolveChain(name string) (*Chain, bool) {
	switch {
	case name == "root":
		return c.Root(), true

	case name == "bpt":
		return c.BPT(), true

	default:
		return nil, false
	}
}

func (c *AccountAnchorChain) dirtyChains() []*Chain {
	if c == nil {
		return nil
	}

	var chains []*Chain

	if c.root.isDirty() {
		chains = append(chains, c.root)
	}
	if c.bpt.isDirty() {
		chains = append(chains, c.bpt)
	}

	return chains
}

func (c *AccountAnchorChain) commit() error {
	if c == nil {
		return nil
	}

	if err := c.root.commit(); err != nil {
		return errors.Wrap(errors.StatusUnknown, err)
	}
	if err := c.bpt.commit(); err != nil {
		return errors.Wrap(errors.StatusUnknown, err)
	}

	return nil
}

type AccountData struct {
	store     recordStore
	key       recordKey
	container *Account

	entry       *Counted[[32]byte]
	transaction map[storage.Key]*Wrapped[[32]byte]
}

func (c *AccountData) Entry() *Counted[[32]byte] {
	return getOrCreateField(&c.entry, func() *Counted[[32]byte] {

		return newCounted(c.store, c.key.Append("Entry"), "account %[2]v data entry", newCountableWrapped(hashWrapper))
	})
}

func (c *AccountData) Transaction(entryHash [32]byte) *Wrapped[[32]byte] {
	return getOrCreateMap(&c.transaction, c.key.Append("Transaction", entryHash), func() *Wrapped[[32]byte] {
		return newWrapped(c.store, c.key.Append("Transaction", entryHash), "account %[2]v data transaction %[5]x", false, newWrapper(hashWrapper))
	})
}

func (c *AccountData) resolve(key recordKey) (record, recordKey, error) {
	switch key[0] {
	case "Entry":
		return c.entry, key[1:], nil
	case "Transaction":
		if len(key) < 2 {
			return nil, nil, errors.New(errors.StatusInternalError, "bad key for data")
		}
		entryHash, okEntryHash := key[1].([32]byte)
		if okEntryHash {
			return nil, nil, errors.New(errors.StatusInternalError, "bad key for data")
		}
		v := c.Transaction(entryHash)
		return v, key[2:], nil
	default:
		return nil, nil, errors.New(errors.StatusInternalError, "bad key for data")
	}
}

func (c *AccountData) isDirty() bool {
	if c == nil {
		return false
	}

	if c.entry.isDirty() {
		return true
	}
	for _, v := range c.transaction {
		if v.isDirty() {
			return true
		}
	}

	return false
}

func (c *AccountData) commit() error {
	if c == nil {
		return nil
	}

	if err := c.entry.commit(); err != nil {
		return errors.Wrap(errors.StatusUnknown, err)
	}
	for _, v := range c.transaction {
		if err := v.commit(); err != nil {
			return errors.Wrap(errors.StatusUnknown, err)
		}
	}

	return nil
}

type Transaction struct {
	store     recordStore
	key       recordKey
	container *ChangeSet

	value            *Value[*protocol.Transaction]
	status           *Value[*protocol.TransactionStatus]
	produced         *Set[*url.TxID]
	systemSignatures *SystemSignatureSet
	signatures       map[storage.Key]*VersionedSignatureSet
	signers          *Set[*url.URL]
	chains           *Set[*TransactionChainEntry]
	signature        *Wrapped[protocol.Signature]
	txID             *Wrapped[*url.TxID]
}

func (c *Transaction) Value() *Value[*protocol.Transaction] {
	return getOrCreateField(&c.value, func() *Value[*protocol.Transaction] {
		new := func() (v *protocol.Transaction) { return new(protocol.Transaction) }
		return newValue(c.store, c.key.Append("Value"), "transaction %[2]x value", false, new)
	})
}

func (c *Transaction) Status() *Value[*protocol.TransactionStatus] {
	return getOrCreateField(&c.status, func() *Value[*protocol.TransactionStatus] {
		new := func() (v *protocol.TransactionStatus) { return new(protocol.TransactionStatus) }
		return newValue(c.store, c.key.Append("Status"), "transaction %[2]x status", false, new)
	})
}

func (c *Transaction) Produced() *Set[*url.TxID] {
	return getOrCreateField(&c.produced, func() *Set[*url.TxID] {
		return newSet(c.store, c.key.Append("Produced"), "transaction %[2]x produced", newWrapperSlice(txidWrapper), compareTxid)
	})
}

func (c *Transaction) SystemSignatures() *SystemSignatureSet {
	return getOrCreateField(&c.systemSignatures, func() *SystemSignatureSet {
		return newSystemSignatureSet(c.store, c.key.Append("SystemSignatures"), "transaction(%[2]x)-system-signatures", "transaction %[2]x system signatures")
	})
}

func (c *Transaction) Signers() *Set[*url.URL] {
	return getOrCreateField(&c.signers, func() *Set[*url.URL] {
		return newSet(c.store, c.key.Append("Signers"), "transaction %[2]x signers", newWrapperSlice(urlWrapper), compareUrl)
	})
}

func (c *Transaction) Chains() *Set[*TransactionChainEntry] {
	return getOrCreateField(&c.chains, func() *Set[*TransactionChainEntry] {
		new := func() (v *TransactionChainEntry) { return new(TransactionChainEntry) }
		cmp := func(u, v *TransactionChainEntry) int { return u.Compare(v) }
		return newSet(c.store, c.key.Append("Chains"), "transaction %[2]x chains", newSlice(new), cmp)
	})
}

func (c *Transaction) Signature() *Wrapped[protocol.Signature] {
	return getOrCreateField(&c.signature, func() *Wrapped[protocol.Signature] {
		return newWrapped(c.store, c.key.Append("Signature"), "transaction %[2]x signature", false, newUnion(protocol.UnmarshalSignature))
	})
}

func (c *Transaction) TxID() *Wrapped[*url.TxID] {
	return getOrCreateField(&c.txID, func() *Wrapped[*url.TxID] {
		return newWrapped(c.store, c.key.Append("TxID"), "transaction %[2]x tx id", false, newWrapper(txidWrapper))
	})
}

func (c *Transaction) resolve(key recordKey) (record, recordKey, error) {
	switch key[0] {
	case "Value":
		return c.value, key[1:], nil
	case "Status":
		return c.status, key[1:], nil
	case "Produced":
		return c.produced, key[1:], nil
	case "SystemSignatures":
		return c.systemSignatures, key[1:], nil
	case "Signatures":
		if len(key) < 2 {
			return nil, nil, errors.New(errors.StatusInternalError, "bad key for transaction")
		}
		signer, okSigner := key[1].(*url.URL)
		if okSigner {
			return nil, nil, errors.New(errors.StatusInternalError, "bad key for transaction")
		}
		v := c.Signatures(signer)
		return v, key[2:], nil
	case "Signers":
		return c.signers, key[1:], nil
	case "Chains":
		return c.chains, key[1:], nil
	case "Signature":
		return c.signature, key[1:], nil
	case "TxID":
		return c.txID, key[1:], nil
	default:
		return nil, nil, errors.New(errors.StatusInternalError, "bad key for transaction")
	}
}

func (c *Transaction) isDirty() bool {
	if c == nil {
		return false
	}

	if c.value.isDirty() {
		return true
	}
	if c.status.isDirty() {
		return true
	}
	if c.produced.isDirty() {
		return true
	}
	if c.systemSignatures.isDirty() {
		return true
	}
	for _, v := range c.signatures {
		if v.isDirty() {
			return true
		}
	}
	if c.signers.isDirty() {
		return true
	}
	if c.chains.isDirty() {
		return true
	}
	if c.signature.isDirty() {
		return true
	}
	if c.txID.isDirty() {
		return true
	}

	return false
}

func (c *Transaction) baseCommit() error {
	if c == nil {
		return nil
	}

	if err := c.value.commit(); err != nil {
		return errors.Wrap(errors.StatusUnknown, err)
	}
	if err := c.status.commit(); err != nil {
		return errors.Wrap(errors.StatusUnknown, err)
	}
	if err := c.produced.commit(); err != nil {
		return errors.Wrap(errors.StatusUnknown, err)
	}
	if err := c.systemSignatures.commit(); err != nil {
		return errors.Wrap(errors.StatusUnknown, err)
	}
	for _, v := range c.signatures {
		if err := v.commit(); err != nil {
			return errors.Wrap(errors.StatusUnknown, err)
		}
	}
	if err := c.signers.commit(); err != nil {
		return errors.Wrap(errors.StatusUnknown, err)
	}
	if err := c.chains.commit(); err != nil {
		return errors.Wrap(errors.StatusUnknown, err)
	}
	if err := c.signature.commit(); err != nil {
		return errors.Wrap(errors.StatusUnknown, err)
	}
	if err := c.txID.commit(); err != nil {
		return errors.Wrap(errors.StatusUnknown, err)
	}

	return nil
}

type Chain struct {
	store recordStore
	key   recordKey
	typ   protocol.ChainType
	name  string
	label string

	state        *Value[*managed.MerkleState]
	states       map[storage.Key]*Value[*managed.MerkleState]
	elementIndex map[storage.Key]*Wrapped[uint64]
	element      map[storage.Key]*Wrapped[[]byte]
}

func (c *Chain) State() *Value[*managed.MerkleState] {
	return getOrCreateField(&c.state, func() *Value[*managed.MerkleState] {
		new := func() (v *managed.MerkleState) { return new(managed.MerkleState) }
		return newValue(c.store, recordKey{}.Append("State"), c.label+" state", true, new)
	})
}

func (c *Chain) States(index uint64) *Value[*managed.MerkleState] {
	return getOrCreateMap(&c.states, recordKey{}.Append("States", index), func() *Value[*managed.MerkleState] {
		new := func() (v *managed.MerkleState) { return new(managed.MerkleState) }
		return newValue(c.store, recordKey{}.Append("States", index), c.label+" states", false, new)
	})
}

func (c *Chain) ElementIndex(hash []byte) *Wrapped[uint64] {
	return getOrCreateMap(&c.elementIndex, recordKey{}.Append("ElementIndex", hash), func() *Wrapped[uint64] {
		return newWrapped(c.store, recordKey{}.Append("ElementIndex", hash), c.label+" element index", false, newWrapper(uintWrapper))
	})
}

func (c *Chain) Element(index uint64) *Wrapped[[]byte] {
	return getOrCreateMap(&c.element, recordKey{}.Append("Element", index), func() *Wrapped[[]byte] {
		return newWrapped(c.store, recordKey{}.Append("Element", index), c.label+" element", false, newWrapper(bytesWrapper))
	})
}

func (c *Chain) resolve(key recordKey) (record, recordKey, error) {
	switch key[0] {
	case "State":
		return c.state, key[1:], nil
	case "States":
		if len(key) < 2 {
			return nil, nil, errors.New(errors.StatusInternalError, "bad key for chain")
		}
		index, okIndex := key[1].(uint64)
		if okIndex {
			return nil, nil, errors.New(errors.StatusInternalError, "bad key for chain")
		}
		v := c.States(index)
		return v, key[2:], nil
	case "ElementIndex":
		if len(key) < 2 {
			return nil, nil, errors.New(errors.StatusInternalError, "bad key for chain")
		}
		hash, okHash := key[1].([]byte)
		if okHash {
			return nil, nil, errors.New(errors.StatusInternalError, "bad key for chain")
		}
		v := c.ElementIndex(hash)
		return v, key[2:], nil
	case "Element":
		if len(key) < 2 {
			return nil, nil, errors.New(errors.StatusInternalError, "bad key for chain")
		}
		index, okIndex := key[1].(uint64)
		if okIndex {
			return nil, nil, errors.New(errors.StatusInternalError, "bad key for chain")
		}
		v := c.Element(index)
		return v, key[2:], nil
	default:
		return nil, nil, errors.New(errors.StatusInternalError, "bad key for chain")
	}
}

func (c *Chain) isDirty() bool {
	if c == nil {
		return false
	}

	if c.state.isDirty() {
		return true
	}
	for _, v := range c.states {
		if v.isDirty() {
			return true
		}
	}
	for _, v := range c.elementIndex {
		if v.isDirty() {
			return true
		}
	}
	for _, v := range c.element {
		if v.isDirty() {
			return true
		}
	}

	return false
}

func (c *Chain) commit() error {
	if c == nil {
		return nil
	}

	if err := c.state.commit(); err != nil {
		return errors.Wrap(errors.StatusUnknown, err)
	}
	for _, v := range c.states {
		if err := v.commit(); err != nil {
			return errors.Wrap(errors.StatusUnknown, err)
		}
	}
	for _, v := range c.elementIndex {
		if err := v.commit(); err != nil {
			return errors.Wrap(errors.StatusUnknown, err)
		}
	}
	for _, v := range c.element {
		if err := v.commit(); err != nil {
			return errors.Wrap(errors.StatusUnknown, err)
		}
	}

	return nil
}

type MajorMinorIndexChain struct {
	store recordStore
	key   recordKey
	name  string
	label string

	minor *Chain
	major *Chain
}

func (c *MajorMinorIndexChain) Minor() *Chain {
	return getOrCreateField(&c.minor, func() *Chain {
		return newChain(c.store, recordKey{}.Append("Minor"), protocol.ChainTypeIndex, c.name+"-minor", c.label+" minor")
	})
}

func (c *MajorMinorIndexChain) Major() *Chain {
	return getOrCreateField(&c.major, func() *Chain {
		return newChain(c.store, recordKey{}.Append("Major"), protocol.ChainTypeIndex, c.name+"-major", c.label+" major")
	})
}

func (c *MajorMinorIndexChain) resolve(key recordKey) (record, recordKey, error) {
	switch key[0] {
	case "Minor":
		return c.minor, key[1:], nil
	case "Major":
		return c.major, key[1:], nil
	default:
		return nil, nil, errors.New(errors.StatusInternalError, "bad key for major minor index chain")
	}
}

func (c *MajorMinorIndexChain) isDirty() bool {
	if c == nil {
		return false
	}

	if c.minor.isDirty() {
		return true
	}
	if c.major.isDirty() {
		return true
	}

	return false
}

func (c *MajorMinorIndexChain) resolveChain(name string) (*Chain, bool) {
	switch {
	case name == "minor":
		return c.Minor(), true

	case name == "major":
		return c.Major(), true

	default:
		return nil, false
	}
}

func (c *MajorMinorIndexChain) dirtyChains() []*Chain {
	if c == nil {
		return nil
	}

	var chains []*Chain

	if c.minor.isDirty() {
		chains = append(chains, c.minor)
	}
	if c.major.isDirty() {
		chains = append(chains, c.major)
	}

	return chains
}

func (c *MajorMinorIndexChain) commit() error {
	if c == nil {
		return nil
	}

	if err := c.minor.commit(); err != nil {
		return errors.Wrap(errors.StatusUnknown, err)
	}
	if err := c.major.commit(); err != nil {
		return errors.Wrap(errors.StatusUnknown, err)
	}

	return nil
}

func getOrCreateField[T any](ptr **T, create func() *T) *T {
	if *ptr != nil {
		return *ptr
	}

	*ptr = create()
	return *ptr
}

func getOrCreateMap[T any](ptr *map[storage.Key]*T, key recordKey, create func() *T) *T {
	if *ptr == nil {
		*ptr = map[storage.Key]*T{}
	}

	k := key.Hash()
	if v, ok := (*ptr)[k]; ok {
		return v
	}

	v := create()
	(*ptr)[k] = v
	return v
}
