package client

// GENERATED BY go run ./tools/cmd/gensdk. DO NOT EDIT.

import (
	"context"

	"github.com/AccumulateNetwork/accumulate/internal/api/v2"
	"github.com/AccumulateNetwork/accumulate/protocol"
)

func (c *Client) Execute(ctx context.Context, req *api.TxRequest) (*api.TxResponse, error) {
	var resp *api.TxResponse
	err := c.RequestAPIv2(ctx, "execute", req, resp)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *Client) ExecuteAddCredits(ctx context.Context, req *api.TxRequest) (*api.TxResponse, error) {
	resp := new(api.TxResponse)
	err := c.RequestAPIv2(ctx, "add-credits", req, resp)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *Client) ExecuteBurnTokens(ctx context.Context, req *api.TxRequest) (*api.TxResponse, error) {
	resp := new(api.TxResponse)
	err := c.RequestAPIv2(ctx, "burn-tokens", req, resp)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *Client) ExecuteCreateAdi(ctx context.Context, req *api.TxRequest) (*api.TxResponse, error) {
	resp := new(api.TxResponse)
	err := c.RequestAPIv2(ctx, "create-adi", req, resp)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *Client) ExecuteCreateDataAccount(ctx context.Context, req *api.TxRequest) (*api.TxResponse, error) {
	resp := new(api.TxResponse)
	err := c.RequestAPIv2(ctx, "create-data-account", req, resp)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *Client) ExecuteCreateKeyBook(ctx context.Context, req *api.TxRequest) (*api.TxResponse, error) {
	resp := new(api.TxResponse)
	err := c.RequestAPIv2(ctx, "create-key-book", req, resp)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *Client) ExecuteCreateKeyPage(ctx context.Context, req *api.TxRequest) (*api.TxResponse, error) {
	resp := new(api.TxResponse)
	err := c.RequestAPIv2(ctx, "create-key-page", req, resp)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *Client) ExecuteCreateToken(ctx context.Context, req *api.TxRequest) (*api.TxResponse, error) {
	resp := new(api.TxResponse)
	err := c.RequestAPIv2(ctx, "create-token", req, resp)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *Client) ExecuteCreateTokenAccount(ctx context.Context, req *api.TxRequest) (*api.TxResponse, error) {
	resp := new(api.TxResponse)
	err := c.RequestAPIv2(ctx, "create-token-account", req, resp)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *Client) ExecuteIssueTokens(ctx context.Context, req *api.TxRequest) (*api.TxResponse, error) {
	resp := new(api.TxResponse)
	err := c.RequestAPIv2(ctx, "issue-tokens", req, resp)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *Client) ExecuteSendTokens(ctx context.Context, req *api.TxRequest) (*api.TxResponse, error) {
	resp := new(api.TxResponse)
	err := c.RequestAPIv2(ctx, "send-tokens", req, resp)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *Client) ExecuteUpdateKeyPage(ctx context.Context, req *api.TxRequest) (*api.TxResponse, error) {
	resp := new(api.TxResponse)
	err := c.RequestAPIv2(ctx, "update-key-page", req, resp)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *Client) ExecuteWriteData(ctx context.Context, req *api.TxRequest) (*api.TxResponse, error) {
	resp := new(api.TxResponse)
	err := c.RequestAPIv2(ctx, "write-data", req, resp)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *Client) ExecuteWriteDataTo(ctx context.Context, req *api.TxRequest) (*api.TxResponse, error) {
	resp := new(api.TxResponse)
	err := c.RequestAPIv2(ctx, "write-data-to", req, resp)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *Client) Faucet(ctx context.Context, req *protocol.AcmeFaucet) (*api.TxResponse, error) {
	var resp *api.TxResponse
	err := c.RequestAPIv2(ctx, "faucet", req, resp)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *Client) Metrics(ctx context.Context, req *api.MetricsQuery) (*api.ChainQueryResponse, error) {
	var resp *api.ChainQueryResponse
	err := c.RequestAPIv2(ctx, "metrics", req, resp)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *Client) Query(ctx context.Context, req *api.GeneralQuery) (interface{}, error) {
	var resp interface{}
	err := c.RequestAPIv2(ctx, "query", req, resp)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *Client) QueryChain(ctx context.Context, req *api.ChainIdQuery) (*api.ChainQueryResponse, error) {
	var resp *api.ChainQueryResponse
	err := c.RequestAPIv2(ctx, "query-chain", req, resp)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *Client) QueryData(ctx context.Context, req *api.DataEntryQuery) (*api.ChainQueryResponse, error) {
	var resp *api.ChainQueryResponse
	err := c.RequestAPIv2(ctx, "query-data", req, resp)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *Client) QueryDataSet(ctx context.Context, req *api.DataEntrySetQuery) (*api.MultiResponse, error) {
	var resp *api.MultiResponse
	err := c.RequestAPIv2(ctx, "query-data-set", req, resp)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *Client) QueryDirectory(ctx context.Context, req *api.DirectoryQuery) (*api.MultiResponse, error) {
	var resp *api.MultiResponse
	err := c.RequestAPIv2(ctx, "query-directory", req, resp)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *Client) QueryKeyPageIndex(ctx context.Context, req *api.KeyPageIndexQuery) (*api.ChainQueryResponse, error) {
	var resp *api.ChainQueryResponse
	err := c.RequestAPIv2(ctx, "query-key-index", req, resp)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *Client) QueryTx(ctx context.Context, req *api.TxnQuery) (*api.TransactionQueryResponse, error) {
	var resp *api.TransactionQueryResponse
	err := c.RequestAPIv2(ctx, "query-tx", req, resp)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *Client) QueryTxHistory(ctx context.Context, req *api.TxHistoryQuery) (*api.MultiResponse, error) {
	var resp *api.MultiResponse
	err := c.RequestAPIv2(ctx, "query-tx-history", req, resp)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *Client) Version(ctx context.Context) (*api.ChainQueryResponse, error) {
	var resp *api.ChainQueryResponse
	err := c.RequestAPIv2(ctx, "version", struct{}{}, resp)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
