// Copyright 2023 The Accumulate Authors
//
// Use of this source code is governed by an MIT-style
// license that can be found in the LICENSE file or at
// https://opensource.org/licenses/MIT.

package block

// GENERATED BY go run ./tools/cmd/gen-enum. DO NOT EDIT.

import (
	"encoding/json"
	"fmt"
	"strings"
)

// BlockTimerTypeExecuteEnvelope .
const BlockTimerTypeExecuteEnvelope BlockTimerType = 0

// BlockTimerTypeProcessSignature .
const BlockTimerTypeProcessSignature BlockTimerType = 1

// BlockTimerTypeBeginBlock .
const BlockTimerTypeBeginBlock BlockTimerType = 2

// BlockTimerTypeCheckTx .
const BlockTimerTypeCheckTx BlockTimerType = 3

// BlockTimerTypeDeliverTx .
const BlockTimerTypeDeliverTx BlockTimerType = 4

// BlockTimerTypeEndBlock .
const BlockTimerTypeEndBlock BlockTimerType = 5

// BlockTimerTypeCommit .
const BlockTimerTypeCommit BlockTimerType = 6

// BlockTimerTypeSigning .
const BlockTimerTypeSigning BlockTimerType = 7

// BlockTimerTypeNetworkAccountUpdates .
const BlockTimerTypeNetworkAccountUpdates BlockTimerType = 8

// BlockTimerTypeProcessRemoteSignatures .
const BlockTimerTypeProcessRemoteSignatures BlockTimerType = 9

// BlockTimerTypeProcessTransaction .
const BlockTimerTypeProcessTransaction BlockTimerType = 10

// BlockTimerTypeTransactionOffset .
const BlockTimerTypeTransactionOffset BlockTimerType = 240

// GetEnumValue returns the value of the Block Timer Type
func (v BlockTimerType) GetEnumValue() uint64 { return uint64(v) }

// SetEnumValue sets the value. SetEnumValue returns false if the value is invalid.
func (v *BlockTimerType) SetEnumValue(id uint64) bool {
	u := BlockTimerType(id)
	switch u {
	case BlockTimerTypeExecuteEnvelope, BlockTimerTypeProcessSignature, BlockTimerTypeBeginBlock, BlockTimerTypeCheckTx, BlockTimerTypeDeliverTx, BlockTimerTypeEndBlock, BlockTimerTypeCommit, BlockTimerTypeSigning, BlockTimerTypeNetworkAccountUpdates, BlockTimerTypeProcessRemoteSignatures, BlockTimerTypeProcessTransaction, BlockTimerTypeTransactionOffset:
		*v = u
		return true
	default:
		return false
	}
}

// String returns the name of the Block Timer Type.
func (v BlockTimerType) String() string {
	switch v {
	case BlockTimerTypeExecuteEnvelope:
		return "executeEnvelope"
	case BlockTimerTypeProcessSignature:
		return "processSignature"
	case BlockTimerTypeBeginBlock:
		return "beginBlock"
	case BlockTimerTypeCheckTx:
		return "checkTx"
	case BlockTimerTypeDeliverTx:
		return "deliverTx"
	case BlockTimerTypeEndBlock:
		return "endBlock"
	case BlockTimerTypeCommit:
		return "commit"
	case BlockTimerTypeSigning:
		return "signing"
	case BlockTimerTypeNetworkAccountUpdates:
		return "networkAccountUpdates"
	case BlockTimerTypeProcessRemoteSignatures:
		return "processRemoteSignatures"
	case BlockTimerTypeProcessTransaction:
		return "processTransaction"
	case BlockTimerTypeTransactionOffset:
		return "transactionOffset"
	default:
		return fmt.Sprintf("BlockTimerType:%d", v)
	}
}

// BlockTimerTypeByName returns the named Block Timer Type.
func BlockTimerTypeByName(name string) (BlockTimerType, bool) {
	switch strings.ToLower(name) {
	case "executeenvelope":
		return BlockTimerTypeExecuteEnvelope, true
	case "processsignature":
		return BlockTimerTypeProcessSignature, true
	case "beginblock":
		return BlockTimerTypeBeginBlock, true
	case "checktx":
		return BlockTimerTypeCheckTx, true
	case "delivertx":
		return BlockTimerTypeDeliverTx, true
	case "endblock":
		return BlockTimerTypeEndBlock, true
	case "commit":
		return BlockTimerTypeCommit, true
	case "signing":
		return BlockTimerTypeSigning, true
	case "networkaccountupdates":
		return BlockTimerTypeNetworkAccountUpdates, true
	case "processremotesignatures":
		return BlockTimerTypeProcessRemoteSignatures, true
	case "processtransaction":
		return BlockTimerTypeProcessTransaction, true
	case "transactionoffset":
		return BlockTimerTypeTransactionOffset, true
	default:
		return 0, false
	}
}

// MarshalJSON marshals the Block Timer Type to JSON as a string.
func (v BlockTimerType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.String())
}

// UnmarshalJSON unmarshals the Block Timer Type from JSON as a string.
func (v *BlockTimerType) UnmarshalJSON(data []byte) error {
	var s string
	err := json.Unmarshal(data, &s)
	if err != nil {
		return err
	}

	var ok bool
	*v, ok = BlockTimerTypeByName(s)
	if !ok || strings.ContainsRune(v.String(), ':') {
		return fmt.Errorf("invalid Block Timer Type %q", s)
	}
	return nil
}
