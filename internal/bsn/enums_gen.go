// Copyright 2022 The Accumulate Authors
//
// Use of this source code is governed by an MIT-style
// license that can be found in the LICENSE file or at
// https://opensource.org/licenses/MIT.

package bsn

// GENERATED BY go run ./tools/cmd/gen-enum. DO NOT EDIT.

import (
	"encoding/json"
	"fmt"
	"strings"
)

// TypeCodeUnknown .
const TypeCodeUnknown TypeCode = 0

// TypeCodeInt .
const TypeCodeInt TypeCode = 1

// TypeCodeUint .
const TypeCodeUint TypeCode = 2

// TypeCodeBool .
const TypeCodeBool TypeCode = 3

// TypeCodeString .
const TypeCodeString TypeCode = 4

// TypeCodeHash .
const TypeCodeHash TypeCode = 5

// TypeCodeBytes .
const TypeCodeBytes TypeCode = 6

// TypeCodeUrl .
const TypeCodeUrl TypeCode = 7

// TypeCodeTime .
const TypeCodeTime TypeCode = 8

// TypeCodeDuration .
const TypeCodeDuration TypeCode = 9

// TypeCodeBigInt .
const TypeCodeBigInt TypeCode = 10

// TypeCodeAny .
const TypeCodeAny TypeCode = 11

// TypeCodeRawJson .
const TypeCodeRawJson TypeCode = 12

// TypeCodeFloat .
const TypeCodeFloat TypeCode = 13

// TypeCodeTxid .
const TypeCodeTxid TypeCode = 14

// GetEnumValue returns the value of the Type Code
func (v TypeCode) GetEnumValue() uint64 { return uint64(v) }

// SetEnumValue sets the value. SetEnumValue returns false if the value is invalid.
func (v *TypeCode) SetEnumValue(id uint64) bool {
	u := TypeCode(id)
	switch u {
	case TypeCodeUnknown, TypeCodeInt, TypeCodeUint, TypeCodeBool, TypeCodeString, TypeCodeHash, TypeCodeBytes, TypeCodeUrl, TypeCodeTime, TypeCodeDuration, TypeCodeBigInt, TypeCodeAny, TypeCodeRawJson, TypeCodeFloat, TypeCodeTxid:
		*v = u
		return true
	default:
		return false
	}
}

// String returns the name of the Type Code.
func (v TypeCode) String() string {
	switch v {
	case TypeCodeUnknown:
		return "unknown"
	case TypeCodeInt:
		return "int"
	case TypeCodeUint:
		return "uint"
	case TypeCodeBool:
		return "bool"
	case TypeCodeString:
		return "string"
	case TypeCodeHash:
		return "hash"
	case TypeCodeBytes:
		return "bytes"
	case TypeCodeUrl:
		return "url"
	case TypeCodeTime:
		return "time"
	case TypeCodeDuration:
		return "duration"
	case TypeCodeBigInt:
		return "bigInt"
	case TypeCodeAny:
		return "any"
	case TypeCodeRawJson:
		return "rawJson"
	case TypeCodeFloat:
		return "float"
	case TypeCodeTxid:
		return "txid"
	default:
		return fmt.Sprintf("TypeCode:%d", v)
	}
}

// TypeCodeByName returns the named Type Code.
func TypeCodeByName(name string) (TypeCode, bool) {
	switch strings.ToLower(name) {
	case "unknown":
		return TypeCodeUnknown, true
	case "int":
		return TypeCodeInt, true
	case "varint":
		return TypeCodeInt, true
	case "uint":
		return TypeCodeUint, true
	case "uvarint":
		return TypeCodeUint, true
	case "bool":
		return TypeCodeBool, true
	case "boolean":
		return TypeCodeBool, true
	case "string":
		return TypeCodeString, true
	case "hash":
		return TypeCodeHash, true
	case "chain":
		return TypeCodeHash, true
	case "bytes":
		return TypeCodeBytes, true
	case "url":
		return TypeCodeUrl, true
	case "time":
		return TypeCodeTime, true
	case "duration":
		return TypeCodeDuration, true
	case "bigint":
		return TypeCodeBigInt, true
	case "any":
		return TypeCodeAny, true
	case "rawjson":
		return TypeCodeRawJson, true
	case "float":
		return TypeCodeFloat, true
	case "txid":
		return TypeCodeTxid, true
	default:
		return 0, false
	}
}

// MarshalJSON marshals the Type Code to JSON as a string.
func (v TypeCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.String())
}

// UnmarshalJSON unmarshals the Type Code from JSON as a string.
func (v *TypeCode) UnmarshalJSON(data []byte) error {
	var s string
	err := json.Unmarshal(data, &s)
	if err != nil {
		return err
	}

	var ok bool
	*v, ok = TypeCodeByName(s)
	if !ok || strings.ContainsRune(v.String(), ':') {
		return fmt.Errorf("invalid Type Code %q", s)
	}
	return nil
}
