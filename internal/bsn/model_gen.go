// Copyright 2022 The Accumulate Authors
//
// Use of this source code is governed by an MIT-style
// license that can be found in the LICENSE file or at
// https://opensource.org/licenses/MIT.

package bsn

// GENERATED BY go run ./tools/cmd/gen-model. DO NOT EDIT.

//lint:file-ignore S1008,U1000 generated code

import (
	"encoding/hex"

	"gitlab.com/accumulatenetwork/accumulate/internal/database/record"
	"gitlab.com/accumulatenetwork/accumulate/internal/logging"
	"gitlab.com/accumulatenetwork/accumulate/pkg/errors"
	"gitlab.com/accumulatenetwork/accumulate/pkg/types/messaging"
	"gitlab.com/accumulatenetwork/accumulate/protocol"
)

type ChangeSet struct {
	logger logging.OptionalLogger
	store  record.Store

	summary map[summaryKey]*Summary
}

type summaryKey struct {
	Hash [32]byte
}

func keyForSummary(hash [32]byte) summaryKey {
	return summaryKey{hash}
}

func (c *ChangeSet) Summary(hash [32]byte) *Summary {
	return getOrCreateMap(&c.summary, keyForSummary(hash), func() *Summary {
		v := new(Summary)
		v.logger = c.logger
		v.store = c.store
		v.key = record.Key{}.Append("Summary", hash)
		v.parent = c
		v.label = "summary" + " " + hex.EncodeToString(hash[:])
		return v
	})
}

func (c *ChangeSet) Resolve(key record.Key) (record.Record, record.Key, error) {
	if len(key) == 0 {
		return nil, nil, errors.InternalError.With("bad key for change set")
	}

	switch key[0] {
	case "Summary":
		if len(key) < 2 {
			return nil, nil, errors.InternalError.With("bad key for change set")
		}
		hash, okHash := key[1].([32]byte)
		if !okHash {
			return nil, nil, errors.InternalError.With("bad key for change set")
		}
		v := c.Summary(hash)
		return v, key[2:], nil
	default:
		return nil, nil, errors.InternalError.With("bad key for change set")
	}
}

func (c *ChangeSet) IsDirty() bool {
	if c == nil {
		return false
	}

	for _, v := range c.summary {
		if v.IsDirty() {
			return true
		}
	}

	return false
}

func (c *ChangeSet) WalkChanges(fn record.WalkFunc) error {
	if c == nil {
		return nil
	}

	var err error
	for _, v := range c.summary {
		walkChanges(&err, v, fn)
	}
	return err
}

func (c *ChangeSet) baseCommit() error {
	if c == nil {
		return nil
	}

	var err error
	for _, v := range c.summary {
		commitField(&err, v)
	}

	return err
}

type Summary struct {
	logger logging.OptionalLogger
	store  record.Store
	key    record.Key
	label  string
	parent *ChangeSet

	main       record.Value[*messaging.BlockSummary]
	anchor     record.Value[messaging.Message]
	signatures record.Set[protocol.KeySignature]
}

func (c *Summary) Main() record.Value[*messaging.BlockSummary] {
	return getOrCreateField(&c.main, func() record.Value[*messaging.BlockSummary] {
		return record.NewValue(c.logger.L, c.store, c.key.Append("Main"), c.label+" "+"main", false, record.Struct[messaging.BlockSummary]())
	})
}

func (c *Summary) Anchor() record.Value[messaging.Message] {
	return getOrCreateField(&c.anchor, func() record.Value[messaging.Message] {
		return record.NewValue(c.logger.L, c.store, c.key.Append("Anchor"), c.label+" "+"anchor", false, record.Union(messaging.UnmarshalMessage))
	})
}

func (c *Summary) Signatures() record.Set[protocol.KeySignature] {
	return getOrCreateField(&c.signatures, func() record.Set[protocol.KeySignature] {
		return record.NewSet(c.logger.L, c.store, c.key.Append("Signatures"), c.label+" "+"signatures", record.Union(protocol.UnmarshalKeySignature), compareSignatures)
	})
}

func (c *Summary) Resolve(key record.Key) (record.Record, record.Key, error) {
	if len(key) == 0 {
		return nil, nil, errors.InternalError.With("bad key for summary")
	}

	switch key[0] {
	case "Main":
		return c.Main(), key[1:], nil
	case "Anchor":
		return c.Anchor(), key[1:], nil
	case "Signatures":
		return c.Signatures(), key[1:], nil
	default:
		return nil, nil, errors.InternalError.With("bad key for summary")
	}
}

func (c *Summary) IsDirty() bool {
	if c == nil {
		return false
	}

	if fieldIsDirty(c.main) {
		return true
	}
	if fieldIsDirty(c.anchor) {
		return true
	}
	if fieldIsDirty(c.signatures) {
		return true
	}

	return false
}

func (c *Summary) WalkChanges(fn record.WalkFunc) error {
	if c == nil {
		return nil
	}

	var err error
	walkChanges(&err, c.main, fn)
	walkChanges(&err, c.anchor, fn)
	walkChanges(&err, c.signatures, fn)
	return err
}

func (c *Summary) Commit() error {
	if c == nil {
		return nil
	}

	var err error
	commitField(&err, c.main)
	commitField(&err, c.anchor)
	commitField(&err, c.signatures)

	return err
}

func getOrCreateField[T any](ptr *T, create func() T) T {
	var z T
	if any(*ptr) != any(z) {
		return *ptr
	}

	*ptr = create()
	return *ptr
}

func getOrCreateMap[T any, K comparable](ptr *map[K]T, key K, create func() T) T {
	if *ptr == nil {
		*ptr = map[K]T{}
	}

	if v, ok := (*ptr)[key]; ok {
		return v
	}

	v := create()
	(*ptr)[key] = v
	return v
}

func commitField[T record.Record](lastErr *error, field T) {
	var z T
	if *lastErr != nil || any(field) == any(z) {
		return
	}

	*lastErr = field.Commit()
}

func fieldIsDirty[T record.Record](field T) bool {
	var z T
	return any(field) != any(z) && field.IsDirty()
}

func walkChanges[T record.Record](lastErr *error, field T, fn record.WalkFunc) {
	var z T
	if *lastErr != nil || any(field) == any(z) {
		return
	}

	*lastErr = field.WalkChanges(fn)
}
