// Copyright 2022 The Accumulate Authors
//
// Use of this source code is governed by an MIT-style
// license that can be found in the LICENSE file or at
// https://opensource.org/licenses/MIT.

package testing

// GENERATED BY go run ./tools/cmd/gen-types. DO NOT EDIT.

//lint:file-ignore S1001,S1002,S1008,SA4013 generated code

import (
	"io"

	"gitlab.com/accumulatenetwork/accumulate/pkg/types/encoding"
	"gitlab.com/accumulatenetwork/accumulate/pkg/url"
	"gitlab.com/accumulatenetwork/accumulate/protocol"
)

type FakeAccount struct {
	fieldsSet []bool
	FakeLiteAccount
	protocol.AccountAuth
	extraData []byte
}

var machine_FakeAccount = &encoding.Machine[*FakeAccount]{
	ExtraData: func(v *FakeAccount) *[]byte { return &v.extraData },
	Seen:      func(v *FakeAccount) *[]bool { return &v.fieldsSet },
	Fields: []*encoding.Field[*FakeAccount]{
		{Name: "FakeLiteAccount", Number: 1, Binary: true, OmitEmpty: true, Required: true, Accessor: encoding.StructField[*FakeAccount, *FakeLiteAccount, FakeLiteAccount](func(v *FakeAccount) *FakeLiteAccount { return &v.FakeLiteAccount })},
		{Name: "AccountAuth", Number: 2, Binary: true, OmitEmpty: true, Required: true, Accessor: encoding.StructField[*FakeAccount, *protocol.AccountAuth, protocol.AccountAuth](func(v *FakeAccount) *protocol.AccountAuth { return &v.AccountAuth })},
	},
}

func (v *FakeAccount) IsValid() error                 { return machine_FakeAccount.IsValid(v) }
func (v *FakeAccount) Copy() *FakeAccount             { return encoding.Copy(machine_FakeAccount, v) }
func (v *FakeAccount) CopyAsInterface() interface{}   { return v.Copy() }
func (v *FakeAccount) Equal(u *FakeAccount) bool      { return machine_FakeAccount.Equal(v, u) }
func (v *FakeAccount) MarshalBinary() ([]byte, error) { return machine_FakeAccount.MarshalBinary(v) }
func (v *FakeAccount) UnmarshalBinary(data []byte) error {
	return machine_FakeAccount.Unmarshal(data, v)
}
func (v *FakeAccount) UnmarshalBinaryFrom(rd io.Reader) error {
	return machine_FakeAccount.UnmarshalFrom(rd, v)
}
func (v *FakeAccount) MarshalJSON() ([]byte, error) { return machine_FakeAccount.JSONMarshal(v) }
func (v *FakeAccount) UnmarshalJSON(b []byte) error { return machine_FakeAccount.JSONUnmarshal(b, v) }

type FakeAuthority struct {
	fieldsSet []bool
	FakeAccount
	Signers   *url.URL `json:"signers,omitempty" form:"signers" query:"signers" validate:"required"`
	extraData []byte
}

var machine_FakeAuthority = &encoding.Machine[*FakeAuthority]{
	ExtraData: func(v *FakeAuthority) *[]byte { return &v.extraData },
	Seen:      func(v *FakeAuthority) *[]bool { return &v.fieldsSet },
	Fields: []*encoding.Field[*FakeAuthority]{
		{Name: "FakeAccount", Number: 1, Binary: true, OmitEmpty: true, Required: true, Accessor: encoding.StructField[*FakeAuthority, *FakeAccount, FakeAccount](func(v *FakeAuthority) *FakeAccount { return &v.FakeAccount })},
		{Name: "Signers", Number: 2, Binary: true, OmitEmpty: true, Required: true, Accessor: encoding.UrlPtrField[*FakeAuthority](func(v *FakeAuthority) **url.URL { return &v.Signers })},
	},
}

func (v *FakeAuthority) IsValid() error               { return machine_FakeAuthority.IsValid(v) }
func (v *FakeAuthority) Copy() *FakeAuthority         { return encoding.Copy(machine_FakeAuthority, v) }
func (v *FakeAuthority) CopyAsInterface() interface{} { return v.Copy() }
func (v *FakeAuthority) Equal(u *FakeAuthority) bool  { return machine_FakeAuthority.Equal(v, u) }
func (v *FakeAuthority) MarshalBinary() ([]byte, error) {
	return machine_FakeAuthority.MarshalBinary(v)
}
func (v *FakeAuthority) UnmarshalBinary(data []byte) error {
	return machine_FakeAuthority.Unmarshal(data, v)
}
func (v *FakeAuthority) UnmarshalBinaryFrom(rd io.Reader) error {
	return machine_FakeAuthority.UnmarshalFrom(rd, v)
}
func (v *FakeAuthority) MarshalJSON() ([]byte, error) { return machine_FakeAuthority.JSONMarshal(v) }
func (v *FakeAuthority) UnmarshalJSON(b []byte) error {
	return machine_FakeAuthority.JSONUnmarshal(b, v)
}

type FakeLiteAccount struct {
	fieldsSet []bool
	TheType   protocol.AccountType `json:"theType,omitempty" form:"theType" query:"theType" validate:"required"`
	Url       *url.URL             `json:"url,omitempty" form:"url" query:"url" validate:"required"`
	extraData []byte
}

var machine_FakeLiteAccount = &encoding.Machine[*FakeLiteAccount]{
	ExtraData: func(v *FakeLiteAccount) *[]byte { return &v.extraData },
	Seen:      func(v *FakeLiteAccount) *[]bool { return &v.fieldsSet },
	Fields: []*encoding.Field[*FakeLiteAccount]{
		{Name: "TheType", Number: 1, Binary: true, OmitEmpty: true, Required: true, Accessor: encoding.EnumField[*FakeLiteAccount, *protocol.AccountType, protocol.AccountType](func(v *FakeLiteAccount) *protocol.AccountType { return &v.TheType })},
		{Name: "Url", Number: 2, Binary: true, OmitEmpty: true, Required: true, Accessor: encoding.UrlPtrField[*FakeLiteAccount](func(v *FakeLiteAccount) **url.URL { return &v.Url })},
	},
}

func (v *FakeLiteAccount) IsValid() error                { return machine_FakeLiteAccount.IsValid(v) }
func (v *FakeLiteAccount) Copy() *FakeLiteAccount        { return encoding.Copy(machine_FakeLiteAccount, v) }
func (v *FakeLiteAccount) CopyAsInterface() interface{}  { return v.Copy() }
func (v *FakeLiteAccount) Equal(u *FakeLiteAccount) bool { return machine_FakeLiteAccount.Equal(v, u) }
func (v *FakeLiteAccount) MarshalBinary() ([]byte, error) {
	return machine_FakeLiteAccount.MarshalBinary(v)
}
func (v *FakeLiteAccount) UnmarshalBinary(data []byte) error {
	return machine_FakeLiteAccount.Unmarshal(data, v)
}
func (v *FakeLiteAccount) UnmarshalBinaryFrom(rd io.Reader) error {
	return machine_FakeLiteAccount.UnmarshalFrom(rd, v)
}
func (v *FakeLiteAccount) MarshalJSON() ([]byte, error) {
	return machine_FakeLiteAccount.JSONMarshal(v)
}
func (v *FakeLiteAccount) UnmarshalJSON(b []byte) error {
	return machine_FakeLiteAccount.JSONUnmarshal(b, v)
}

type FakeSignature struct {
	fieldsSet     []bool
	TheType       protocol.SignatureType `json:"theType,omitempty" form:"theType" query:"theType" validate:"required"`
	Vote          protocol.VoteType      `json:"vote,omitempty" form:"vote" query:"vote" validate:"required"`
	PublicKey     []byte                 `json:"publicKey,omitempty" form:"publicKey" query:"publicKey" validate:"required"`
	Signer        *url.URL               `json:"signer,omitempty" form:"signer" query:"signer" validate:"required"`
	SignerVersion uint64                 `json:"signerVersion,omitempty" form:"signerVersion" query:"signerVersion" validate:"required"`
	Timestamp     uint64                 `json:"timestamp,omitempty" form:"timestamp" query:"timestamp"`
	extraData     []byte
}

var machine_FakeSignature = &encoding.Machine[*FakeSignature]{
	ExtraData: func(v *FakeSignature) *[]byte { return &v.extraData },
	Seen:      func(v *FakeSignature) *[]bool { return &v.fieldsSet },
	Fields: []*encoding.Field[*FakeSignature]{
		{Name: "TheType", Number: 1, Binary: true, OmitEmpty: true, Required: true, Accessor: encoding.EnumField[*FakeSignature, *protocol.SignatureType, protocol.SignatureType](func(v *FakeSignature) *protocol.SignatureType { return &v.TheType })},
		{Name: "Vote", Number: 2, Binary: true, OmitEmpty: true, Required: true, Accessor: encoding.EnumField[*FakeSignature, *protocol.VoteType, protocol.VoteType](func(v *FakeSignature) *protocol.VoteType { return &v.Vote })},
		{Name: "PublicKey", Number: 3, Binary: true, OmitEmpty: true, Required: true, Accessor: encoding.BytesField[*FakeSignature](func(v *FakeSignature) *[]byte { return &v.PublicKey })},
		{Name: "Signer", Number: 4, Binary: true, OmitEmpty: true, Required: true, Accessor: encoding.UrlPtrField[*FakeSignature](func(v *FakeSignature) **url.URL { return &v.Signer })},
		{Name: "SignerVersion", Number: 5, Binary: true, OmitEmpty: true, Required: true, Accessor: encoding.UintField[*FakeSignature](func(v *FakeSignature) *uint64 { return &v.SignerVersion })},
		{Name: "Timestamp", Number: 6, Binary: true, OmitEmpty: true, Accessor: encoding.UintField[*FakeSignature](func(v *FakeSignature) *uint64 { return &v.Timestamp })},
	},
}

func (v *FakeSignature) IsValid() error               { return machine_FakeSignature.IsValid(v) }
func (v *FakeSignature) Copy() *FakeSignature         { return encoding.Copy(machine_FakeSignature, v) }
func (v *FakeSignature) CopyAsInterface() interface{} { return v.Copy() }
func (v *FakeSignature) Equal(u *FakeSignature) bool  { return machine_FakeSignature.Equal(v, u) }
func (v *FakeSignature) MarshalBinary() ([]byte, error) {
	return machine_FakeSignature.MarshalBinary(v)
}
func (v *FakeSignature) UnmarshalBinary(data []byte) error {
	return machine_FakeSignature.Unmarshal(data, v)
}
func (v *FakeSignature) UnmarshalBinaryFrom(rd io.Reader) error {
	return machine_FakeSignature.UnmarshalFrom(rd, v)
}
func (v *FakeSignature) MarshalJSON() ([]byte, error) { return machine_FakeSignature.JSONMarshal(v) }
func (v *FakeSignature) UnmarshalJSON(b []byte) error {
	return machine_FakeSignature.JSONUnmarshal(b, v)
}

type FakeSigner struct {
	fieldsSet []bool
	FakeLiteAccount
	CreditBalance uint64              `json:"creditBalance,omitempty" form:"creditBalance" query:"creditBalance" validate:"required"`
	Threshold     uint64              `json:"threshold,omitempty" form:"threshold" query:"threshold" validate:"required"`
	Version       uint64              `json:"version,omitempty" form:"version" query:"version" validate:"required"`
	Keys          []*protocol.KeySpec `json:"keys,omitempty" form:"keys" query:"keys" validate:"required"`
	extraData     []byte
}

var machine_FakeSigner = &encoding.Machine[*FakeSigner]{
	ExtraData: func(v *FakeSigner) *[]byte { return &v.extraData },
	Seen:      func(v *FakeSigner) *[]bool { return &v.fieldsSet },
	Fields: []*encoding.Field[*FakeSigner]{
		{Name: "FakeLiteAccount", Number: 1, Binary: true, OmitEmpty: true, Required: true, Accessor: encoding.StructField[*FakeSigner, *FakeLiteAccount, FakeLiteAccount](func(v *FakeSigner) *FakeLiteAccount { return &v.FakeLiteAccount })},
		{Name: "CreditBalance", Number: 2, Binary: true, OmitEmpty: true, Required: true, Accessor: encoding.UintField[*FakeSigner](func(v *FakeSigner) *uint64 { return &v.CreditBalance })},
		{Name: "Threshold", Number: 3, Binary: true, OmitEmpty: true, Required: true, Accessor: encoding.UintField[*FakeSigner](func(v *FakeSigner) *uint64 { return &v.Threshold })},
		{Name: "Version", Number: 4, Binary: true, OmitEmpty: true, Required: true, Accessor: encoding.UintField[*FakeSigner](func(v *FakeSigner) *uint64 { return &v.Version })},
		{Name: "Keys", Number: 5, Binary: true, OmitEmpty: true, Required: true, Accessor: encoding.SliceField[*FakeSigner, *protocol.KeySpec, encoding.StructPtrField[encoding.SliceIndex[*protocol.KeySpec], *protocol.KeySpec, protocol.KeySpec]](func(v *FakeSigner) *[]*protocol.KeySpec { return &v.Keys })},
	},
}

func (v *FakeSigner) IsValid() error                    { return machine_FakeSigner.IsValid(v) }
func (v *FakeSigner) Copy() *FakeSigner                 { return encoding.Copy(machine_FakeSigner, v) }
func (v *FakeSigner) CopyAsInterface() interface{}      { return v.Copy() }
func (v *FakeSigner) Equal(u *FakeSigner) bool          { return machine_FakeSigner.Equal(v, u) }
func (v *FakeSigner) MarshalBinary() ([]byte, error)    { return machine_FakeSigner.MarshalBinary(v) }
func (v *FakeSigner) UnmarshalBinary(data []byte) error { return machine_FakeSigner.Unmarshal(data, v) }
func (v *FakeSigner) UnmarshalBinaryFrom(rd io.Reader) error {
	return machine_FakeSigner.UnmarshalFrom(rd, v)
}
func (v *FakeSigner) MarshalJSON() ([]byte, error) { return machine_FakeSigner.JSONMarshal(v) }
func (v *FakeSigner) UnmarshalJSON(b []byte) error { return machine_FakeSigner.JSONUnmarshal(b, v) }

type FakeTransactionBody struct {
	fieldsSet []bool
	TheType   protocol.TransactionType `json:"theType,omitempty" form:"theType" query:"theType" validate:"required"`
	extraData []byte
}

var machine_FakeTransactionBody = &encoding.Machine[*FakeTransactionBody]{
	ExtraData: func(v *FakeTransactionBody) *[]byte { return &v.extraData },
	Seen:      func(v *FakeTransactionBody) *[]bool { return &v.fieldsSet },
	Fields: []*encoding.Field[*FakeTransactionBody]{
		{Name: "TheType", Number: 1, Binary: true, OmitEmpty: true, Required: true, Accessor: encoding.EnumField[*FakeTransactionBody, *protocol.TransactionType, protocol.TransactionType](func(v *FakeTransactionBody) *protocol.TransactionType { return &v.TheType })},
	},
}

func (v *FakeTransactionBody) IsValid() error { return machine_FakeTransactionBody.IsValid(v) }
func (v *FakeTransactionBody) Copy() *FakeTransactionBody {
	return encoding.Copy(machine_FakeTransactionBody, v)
}
func (v *FakeTransactionBody) CopyAsInterface() interface{} { return v.Copy() }
func (v *FakeTransactionBody) Equal(u *FakeTransactionBody) bool {
	return machine_FakeTransactionBody.Equal(v, u)
}
func (v *FakeTransactionBody) MarshalBinary() ([]byte, error) {
	return machine_FakeTransactionBody.MarshalBinary(v)
}
func (v *FakeTransactionBody) UnmarshalBinary(data []byte) error {
	return machine_FakeTransactionBody.Unmarshal(data, v)
}
func (v *FakeTransactionBody) UnmarshalBinaryFrom(rd io.Reader) error {
	return machine_FakeTransactionBody.UnmarshalFrom(rd, v)
}
func (v *FakeTransactionBody) MarshalJSON() ([]byte, error) {
	return machine_FakeTransactionBody.JSONMarshal(v)
}
func (v *FakeTransactionBody) UnmarshalJSON(b []byte) error {
	return machine_FakeTransactionBody.JSONUnmarshal(b, v)
}
