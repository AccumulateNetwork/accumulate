// Copyright 2023 The Accumulate Authors
//
// Use of this source code is governed by an MIT-style
// license that can be found in the LICENSE file or at
// https://opensource.org/licenses/MIT.

package simulator

// GENERATED BY go run ./tools/cmd/gen-enum. DO NOT EDIT.

import (
	"encoding/json"
	"fmt"
	"strings"
)

// recordSectionTypeHeader .
const recordSectionTypeHeader recordSectionType = 1

// recordSectionTypeSnapshot .
const recordSectionTypeSnapshot recordSectionType = 2

// recordSectionTypeBlock .
const recordSectionTypeBlock recordSectionType = 3

// GetEnumValue returns the value of the record Section Type
func (v recordSectionType) GetEnumValue() uint64 { return uint64(v) }

// SetEnumValue sets the value. SetEnumValue returns false if the value is invalid.
func (v *recordSectionType) SetEnumValue(id uint64) bool {
	u := recordSectionType(id)
	switch u {
	case recordSectionTypeHeader, recordSectionTypeSnapshot, recordSectionTypeBlock:
		*v = u
		return true
	}
	return false
}

// String returns the name of the record Section Type.
func (v recordSectionType) String() string {
	switch v {
	case recordSectionTypeHeader:
		return "header"
	case recordSectionTypeSnapshot:
		return "snapshot"
	case recordSectionTypeBlock:
		return "block"
	}
	return fmt.Sprintf("recordSectionType:%d", v)
}

// recordSectionTypeByName returns the named record Section Type.
func recordSectionTypeByName(name string) (recordSectionType, bool) {
	switch strings.ToLower(name) {
	case "header":
		return recordSectionTypeHeader, true
	case "snapshot":
		return recordSectionTypeSnapshot, true
	case "block":
		return recordSectionTypeBlock, true
	}
	return 0, false
}

// MarshalJSON marshals the record Section Type to JSON as a string.
func (v recordSectionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.String())
}

// UnmarshalJSON unmarshals the record Section Type from JSON as a string.
func (v *recordSectionType) UnmarshalJSON(data []byte) error {
	var s string
	err := json.Unmarshal(data, &s)
	if err != nil {
		return err
	}

	var ok bool
	*v, ok = recordSectionTypeByName(s)
	if !ok || strings.ContainsRune(v.String(), ':') {
		return fmt.Errorf("invalid record Section Type %q", s)
	}
	return nil
}
