// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	api "gitlab.com/accumulatenetwork/accumulate/pkg/api/v3"
)

// ConsensusService is an autogenerated mock type for the ConsensusService type
type ConsensusService struct {
	mock.Mock
}

type ConsensusService_Expecter struct {
	mock *mock.Mock
}

func (_m *ConsensusService) EXPECT() *ConsensusService_Expecter {
	return &ConsensusService_Expecter{mock: &_m.Mock}
}

// ConsensusStatus provides a mock function with given fields: ctx, opts
func (_m *ConsensusService) ConsensusStatus(ctx context.Context, opts api.ConsensusStatusOptions) (*api.ConsensusStatus, error) {
	ret := _m.Called(ctx, opts)

	var r0 *api.ConsensusStatus
	if rf, ok := ret.Get(0).(func(context.Context, api.ConsensusStatusOptions) *api.ConsensusStatus); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.ConsensusStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, api.ConsensusStatusOptions) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsensusService_ConsensusStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConsensusStatus'
type ConsensusService_ConsensusStatus_Call struct {
	*mock.Call
}

// ConsensusStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - opts api.ConsensusStatusOptions
func (_e *ConsensusService_Expecter) ConsensusStatus(ctx interface{}, opts interface{}) *ConsensusService_ConsensusStatus_Call {
	return &ConsensusService_ConsensusStatus_Call{Call: _e.mock.On("ConsensusStatus", ctx, opts)}
}

func (_c *ConsensusService_ConsensusStatus_Call) Run(run func(ctx context.Context, opts api.ConsensusStatusOptions)) *ConsensusService_ConsensusStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(api.ConsensusStatusOptions))
	})
	return _c
}

func (_c *ConsensusService_ConsensusStatus_Call) Return(_a0 *api.ConsensusStatus, _a1 error) *ConsensusService_ConsensusStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewConsensusService interface {
	mock.TestingT
	Cleanup(func())
}

// NewConsensusService creates a new instance of ConsensusService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewConsensusService(t mockConstructorTestingTNewConsensusService) *ConsensusService {
	mock := &ConsensusService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
