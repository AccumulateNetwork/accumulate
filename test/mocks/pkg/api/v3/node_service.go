// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	api "gitlab.com/accumulatenetwork/accumulate/pkg/api/v3"
)

// NodeService is an autogenerated mock type for the NodeService type
type NodeService struct {
	mock.Mock
}

type NodeService_Expecter struct {
	mock *mock.Mock
}

func (_m *NodeService) EXPECT() *NodeService_Expecter {
	return &NodeService_Expecter{mock: &_m.Mock}
}

// NodeStatus provides a mock function with given fields: ctx, opts
func (_m *NodeService) NodeStatus(ctx context.Context, opts api.NodeStatusOptions) (*api.NodeStatus, error) {
	ret := _m.Called(ctx, opts)

	var r0 *api.NodeStatus
	if rf, ok := ret.Get(0).(func(context.Context, api.NodeStatusOptions) *api.NodeStatus); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.NodeStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, api.NodeStatusOptions) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NodeService_NodeStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NodeStatus'
type NodeService_NodeStatus_Call struct {
	*mock.Call
}

// NodeStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - opts api.NodeStatusOptions
func (_e *NodeService_Expecter) NodeStatus(ctx interface{}, opts interface{}) *NodeService_NodeStatus_Call {
	return &NodeService_NodeStatus_Call{Call: _e.mock.On("NodeStatus", ctx, opts)}
}

func (_c *NodeService_NodeStatus_Call) Run(run func(ctx context.Context, opts api.NodeStatusOptions)) *NodeService_NodeStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(api.NodeStatusOptions))
	})
	return _c
}

func (_c *NodeService_NodeStatus_Call) Return(_a0 *api.NodeStatus, _a1 error) *NodeService_NodeStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewNodeService interface {
	mock.TestingT
	Cleanup(func())
}

// NewNodeService creates a new instance of NodeService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewNodeService(t mockConstructorTestingTNewNodeService) *NodeService {
	mock := &NodeService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
