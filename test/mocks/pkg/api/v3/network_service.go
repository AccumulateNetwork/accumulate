// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	api "gitlab.com/accumulatenetwork/accumulate/pkg/api/v3"
)

// NetworkService is an autogenerated mock type for the NetworkService type
type NetworkService struct {
	mock.Mock
}

type NetworkService_Expecter struct {
	mock *mock.Mock
}

func (_m *NetworkService) EXPECT() *NetworkService_Expecter {
	return &NetworkService_Expecter{mock: &_m.Mock}
}

// NetworkStatus provides a mock function with given fields: ctx, opts
func (_m *NetworkService) NetworkStatus(ctx context.Context, opts api.NetworkStatusOptions) (*api.NetworkStatus, error) {
	ret := _m.Called(ctx, opts)

	var r0 *api.NetworkStatus
	if rf, ok := ret.Get(0).(func(context.Context, api.NetworkStatusOptions) *api.NetworkStatus); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.NetworkStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, api.NetworkStatusOptions) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkService_NetworkStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NetworkStatus'
type NetworkService_NetworkStatus_Call struct {
	*mock.Call
}

// NetworkStatus is a helper method to define mock.On call
//  - ctx context.Context
//  - opts api.NetworkStatusOptions
func (_e *NetworkService_Expecter) NetworkStatus(ctx interface{}, opts interface{}) *NetworkService_NetworkStatus_Call {
	return &NetworkService_NetworkStatus_Call{Call: _e.mock.On("NetworkStatus", ctx, opts)}
}

func (_c *NetworkService_NetworkStatus_Call) Run(run func(ctx context.Context, opts api.NetworkStatusOptions)) *NetworkService_NetworkStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(api.NetworkStatusOptions))
	})
	return _c
}

func (_c *NetworkService_NetworkStatus_Call) Return(_a0 *api.NetworkStatus, _a1 error) *NetworkService_NetworkStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewNetworkService interface {
	mock.TestingT
	Cleanup(func())
}

// NewNetworkService creates a new instance of NetworkService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewNetworkService(t mockConstructorTestingTNewNetworkService) *NetworkService {
	mock := &NetworkService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
