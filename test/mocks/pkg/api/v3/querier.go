// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	api "gitlab.com/accumulatenetwork/accumulate/pkg/api/v3"
	url "gitlab.com/accumulatenetwork/accumulate/pkg/url"
)

// Querier is an autogenerated mock type for the Querier type
type Querier struct {
	mock.Mock
}

type Querier_Expecter struct {
	mock *mock.Mock
}

func (_m *Querier) EXPECT() *Querier_Expecter {
	return &Querier_Expecter{mock: &_m.Mock}
}

// Query provides a mock function with given fields: ctx, scope, query
func (_m *Querier) Query(ctx context.Context, scope *url.URL, query api.Query) (api.Record, error) {
	ret := _m.Called(ctx, scope, query)

	var r0 api.Record
	if rf, ok := ret.Get(0).(func(context.Context, *url.URL, api.Query) api.Record); ok {
		r0 = rf(ctx, scope, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.Record)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *url.URL, api.Query) error); ok {
		r1 = rf(ctx, scope, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type Querier_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//  - ctx context.Context
//  - scope *url.URL
//  - query api.Query
func (_e *Querier_Expecter) Query(ctx interface{}, scope interface{}, query interface{}) *Querier_Query_Call {
	return &Querier_Query_Call{Call: _e.mock.On("Query", ctx, scope, query)}
}

func (_c *Querier_Query_Call) Run(run func(ctx context.Context, scope *url.URL, query api.Query)) *Querier_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*url.URL), args[2].(api.Query))
	})
	return _c
}

func (_c *Querier_Query_Call) Return(_a0 api.Record, _a1 error) *Querier_Query_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewQuerier interface {
	mock.TestingT
	Cleanup(func())
}

// NewQuerier creates a new instance of Querier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewQuerier(t mockConstructorTestingTNewQuerier) *Querier {
	mock := &Querier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
